var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AlertPopupComponent.html",[0,0.651,1,1.272]],["body/components/AlertPopupComponent.html",[0,1.148,1,1.971,2,1.46,3,0.11,4,0.128,5,1.186,6,1.186,7,1.186,8,0.128,9,5.649,10,5.031,11,2.628,12,0.205,13,3.06,14,2.434,15,4.263,16,1.186,17,2.76,18,2.76,19,1.707,20,1.711,21,1.707,22,4.414,23,1.707,24,4.414,25,0.11,26,0.266,27,3.691,28,3.343,29,2.112,30,3.056,31,4.397,32,1.619,33,5.659,34,2.431,35,2.849,36,1.573,37,4.414,38,4.414,39,3.784,40,5.52,41,1.811,42,0.02,43,4.414,44,1.898,45,3.065,46,2.813,47,2.92,48,0.964,49,1.323,50,1.626,51,1.546,52,3.37,53,2.364,54,2.608,55,2.813,56,3.784,57,0.295,58,0.625,59,3.065,60,3.37,61,4.414,62,1.264,63,3.784,64,4.435,65,2.813,66,3.065,67,4.414,68,4.414,69,0.825,70,1.067,71,0.749,72,2.628,73,2.34,74,2.628,75,2.34,76,1.186,77,0.146,78,1.811,79,2.628,80,3.065,81,3.065,82,4.414,83,1.186,84,1.707,85,1.707,86,1.186,87,2.189,88,1.186,89,0.552,90,1.186,91,1.067,92,1.186,93,1.014,94,1.186,95,1.186,96,1.014,97,1.186,98,1.014,99,1.186,100,1.014,101,1.186,102,1.067,103,1.186,104,1.067,105,1.186,106,1.014,107,1.186,108,1.067,109,1.186,110,1.014,111,1.186,112,1.067,113,1.186,114,1.014,115,1.186,116,0.788,117,1.186,118,1.186,119,0.011,120,0.011]],["title/interfaces/AlertPopupConfig.html",[27,2.157,121,0.089]],["body/interfaces/AlertPopupConfig.html",[3,0.232,4,0.199,8,0.199,12,0.318,14,2.14,15,3.822,25,0.17,26,0.358,27,3.508,31,3.035,42,0.02,44,2.178,57,0.466,58,0.917,77,0.309,119,0.015,120,0.015,121,0.116,122,0.997,123,3.302,124,3.302,125,0.707,126,5.808,127,4.697,128,2.359,129,5.808,130,4.94,131,2.176,132,4.083,133,4.083,134,2.309,135,4.083,136,3.063,137,4.117,138,3.508,139,3.784,140,4.117,141,4.117,142,4.117]],["title/injectables/AlertPopupService.html",[28,2.157,143,1.148]],["body/injectables/AlertPopupService.html",[3,0.141,4,0.165,8,0.165,12,0.264,14,2.372,15,4.235,20,1.306,25,0.141,26,0.317,27,4.141,28,3.107,30,3.495,31,4.398,32,1.93,36,1.541,40,5.41,42,0.02,44,2.315,47,3.255,48,1.654,49,2.27,50,1.654,51,1.572,57,0.395,62,0.964,63,4.51,64,5.073,65,3.353,69,0.943,71,0.964,72,3.384,73,3.013,77,0.189,79,3.384,89,0.493,119,0.014,120,0.014,127,3.647,143,1.654,144,1.914,145,5.635,146,3.384,147,5.073,148,4.51,149,3.946,150,5.26,151,5.26,152,3.946,153,5.26,154,4.51,155,1.611,156,1.241,157,4.398,158,2.714,159,3.946,160,5.26,161,4.51,162,3.946,163,4.51,164,5.26,165,1.527,166,2.331,167,2.036,168,1.448,169,5.26,170,3.946,171,3.946,172,2.515,173,3.946]],["title/components/AppComponent.html",[0,0.651,91,1.272]],["body/components/AppComponent.html",[0,1.086,1,2.007,2,1.502,3,0.114,4,0.133,5,1.233,6,1.233,7,1.233,8,0.133,10,2.434,12,0.213,13,3.148,14,2.3,15,3.74,16,1.233,17,2.777,18,2.777,19,1.756,20,1.502,21,1.756,23,1.756,25,0.114,26,0.274,27,3.933,28,3.404,36,1.488,42,0.02,44,1.666,50,1.915,51,1.82,52,3.466,53,1.457,54,2.682,56,3.892,57,0.303,58,0.452,62,0.779,69,1.061,71,0.779,73,2.434,75,2.434,76,1.756,77,0.152,83,1.233,84,1.756,85,1.756,86,1.233,87,2.229,88,1.233,89,0.568,90,1.233,91,2.007,92,1.233,93,1.055,94,1.233,95,1.233,96,1.055,97,1.233,98,1.055,99,1.233,100,1.055,101,1.233,102,1.11,103,1.233,104,1.11,105,1.233,106,1.055,107,1.233,108,1.11,109,1.233,110,1.055,111,1.233,112,1.11,113,1.233,114,1.055,115,1.233,116,0.819,117,1.233,118,1.233,119,0.012,120,0.012,127,3.666,138,2.682,147,4.533,148,3.892,157,2.894,165,1.233,167,2.973,174,2.733,175,3.995,176,5.287,177,2.913,178,4.037,179,1.842,180,4.54,181,4.54,182,2.953,183,3.37,184,3.187,185,3.187,186,3.882,187,4.54,188,4.54,189,4.54,190,4.54,191,4.54,192,3.187,193,4.54,194,3.187,195,3.466,196,3.148,197,4.54,198,3.892,199,3.892,200,3.187,201,1.756,202,1.302,203,1.645,204,3.187,205,3.187,206,3.187,207,3.187,208,2.21,209,3.466,210,4.54]],["title/components/BarChartComponent.html",[0,0.651,93,1.208]],["body/components/BarChartComponent.html",[0,1.162,1,1.113,2,1.505,3,0.114,4,0.133,5,1.237,6,1.237,7,1.237,8,0.133,14,1.058,16,1.237,17,2.778,18,2.778,19,1.76,20,1.752,21,1.76,23,1.76,25,0.114,26,0.274,34,2.506,36,1.548,41,3.408,42,0.02,50,1.43,51,2.209,62,0.781,69,0.725,70,2.321,71,0.781,76,1.76,77,0.153,78,1.888,83,1.237,84,1.76,85,1.76,86,1.237,87,2.232,88,1.237,89,0.569,90,1.237,91,1.113,92,1.237,93,1.909,94,2.808,95,1.237,96,1.058,97,1.237,98,1.058,99,1.237,100,1.058,101,1.237,102,1.113,103,1.237,104,1.113,105,1.237,106,1.058,107,1.237,108,1.113,109,1.237,110,1.058,111,1.237,112,1.113,113,1.237,114,1.058,115,1.237,116,0.821,117,1.237,118,1.237,119,0.012,120,0.012,125,0.349,128,2.395,172,2.899,177,2.917,183,4.321,196,3.672,201,1.761,211,4.977,212,4.977,213,2.741,214,7.025,215,4.549,216,4.549,217,6.518,218,4.549,219,4.54,220,5.295,221,5.295,222,5.295,223,4.549,224,4.549,225,2.741,226,4.946,227,5.769,228,5.769,229,4]],["title/components/ButtonComponent.html",[0,0.651,96,1.208]],["body/components/ButtonComponent.html",[0,1.161,1,1.336,2,1.707,3,0.137,4,0.16,5,1.483,6,1.483,7,1.483,8,0.16,12,0.256,14,1.269,16,1.483,17,2.849,18,2.849,19,1.996,20,1.929,21,1.996,23,1.996,25,0.137,26,0.311,34,2.842,36,1.524,41,2.265,42,0.02,44,2.14,50,1.622,51,1.542,60,3.94,62,0.937,69,0.93,70,1.336,71,0.937,76,1.996,77,0.183,78,2.265,83,1.483,84,1.996,85,1.996,86,1.483,87,2.413,88,1.483,89,0.645,90,1.483,91,1.336,92,1.483,93,1.269,94,1.483,95,1.483,96,2.064,97,1.483,98,1.269,99,1.483,100,1.269,101,1.483,102,1.336,103,1.483,104,1.336,105,1.483,106,1.269,107,1.483,108,1.336,109,1.483,110,1.269,111,1.483,112,1.336,113,1.483,114,1.269,115,1.483,116,0.985,117,1.483,118,1.483,119,0.013,120,0.013,125,0.564,172,3.289,179,2.031,195,4.452,196,4.043,203,1.978,225,3.288,230,3.288,231,3.928,232,5.16,233,5.16,234,2.335,235,5.581,236,5.16,237,5.16,238,5.831,239,3.288,240,5.16]],["title/interfaces/ButtonConfig.html",[121,0.089,234,1.272]],["body/interfaces/ButtonConfig.html",[3,0.215,4,0.169,8,0.169,12,0.271,25,0.145,26,0.323,29,2.605,42,0.02,44,1.966,51,1.907,57,0.485,58,1.051,77,0.194,119,0.014,120,0.014,121,0.099,122,0.849,125,0.656,128,2.222,130,4.58,136,2.764,137,3.715,138,3.165,139,3.415,140,3.715,141,3.715,142,3.715,156,2.218,179,2.222,231,3.514,234,1.866,235,5.47,241,3.098,242,3.769,243,3.292,244,3.769,245,5.47,246,5.47,247,4.127,248,3.098,249,4.89,250,2.813,251,2.813]],["title/components/CardComponent.html",[0,0.651,98,1.208]],["body/components/CardComponent.html",[0,1.192,1,1.446,2,1.8,3,0.149,4,0.173,5,1.606,6,1.606,7,1.606,8,0.173,12,0.277,14,1.374,16,1.606,17,2.877,18,2.877,19,2.104,20,1.8,21,2.104,23,2.104,25,0.149,26,0.328,34,2.997,36,1.329,42,0.02,62,1.014,69,0.867,70,2.328,71,1.014,76,1.606,77,0.198,83,1.606,84,2.104,85,2.104,86,1.606,87,2.49,88,1.606,89,0.68,90,1.606,91,1.446,92,1.606,93,1.374,94,1.606,95,1.606,96,1.374,97,1.606,98,2.13,99,1.606,100,1.374,101,1.606,102,1.446,103,1.606,104,1.446,105,1.606,106,1.374,107,1.606,108,1.446,109,1.606,110,1.374,111,1.606,112,1.446,113,1.606,114,1.374,115,1.606,116,1.067,117,1.606,118,1.606,119,0.014,120,0.014,125,0.595,252,3.56,253,4.454,254,5.44,255,5.44,256,5.73,257,5.44,258,6.067,259,1.813,260,2.453,261,3.56]],["title/interfaces/CardConfig.html",[121,0.089,260,2.157]],["body/interfaces/CardConfig.html",[3,0.228,4,0.191,8,0.191,12,0.306,25,0.164,26,0.35,42,0.02,44,2.126,57,0.446,58,0.997,77,0.219,119,0.015,120,0.015,121,0.111,122,0.959,125,0.633,136,2.99,137,4.019,138,3.424,139,3.694,140,4.019,141,4.019,142,4.019,156,2.213,253,3.694,260,3.424,262,3.498,263,5.795,264,5.728,265,3.239,266,6.201,267,2.953,268,6.201,269,6.201]],["title/interfaces/Cities.html",[121,0.089,270,1.208]],["body/interfaces/Cities.html",[3,0.154,4,0.18,8,0.18,12,0.288,25,0.154,26,0.337,42,0.02,57,0.373,58,1.012,77,0.337,89,0.773,116,1.109,119,0.014,120,0.014,121,0.171,122,0.904,125,0.771,134,2.093,259,1.29,270,2.389,271,2.227,272,3.073,273,3.371,274,2.238,275,3.576,276,2.407,277,2.878,278,1.357,279,2.093,280,1.762,281,2.227,282,2.227,283,1.357,284,1.762,285,1.583,286,2.227,287,2.824,288,2.227,289,2.549,290,2.227,291,2.986,292,2.227,293,2.227,294,2.878,295,2.878,296,2.093,297,2.227,298,2.227,299,1.503,300,2.227,301,2.093]],["title/components/CitiesComponent.html",[0,0.651,100,1.208]],["body/components/CitiesComponent.html",[0,1.07,1,0.718,2,1.667,3,0.074,4,0.086,5,0.797,6,0.797,7,0.797,8,0.086,12,0.218,13,2.266,14,0.682,16,0.797,17,2.567,18,2.567,19,1.264,20,1.081,21,1.264,23,1.264,25,0.074,26,0.197,29,1.887,30,2.399,32,1.199,36,1.582,42,0.02,44,1.199,48,1.277,49,1.753,50,1.933,51,1.838,53,1.856,55,2.083,57,0.358,58,0.575,62,0.504,69,1.032,70,1.138,71,0.504,76,1.264,77,0.099,83,0.797,84,1.264,85,1.264,86,0.797,87,1.788,88,0.797,89,0.784,90,0.797,91,0.718,92,0.797,93,0.682,94,0.797,95,0.797,96,1.343,97,0.797,98,1.343,99,0.797,100,1.529,101,0.797,102,0.718,103,0.797,104,0.718,105,0.797,106,1.343,107,0.797,108,0.718,109,0.797,110,0.682,111,0.797,112,0.718,113,0.797,114,0.682,115,0.797,116,0.53,117,0.797,118,0.797,119,0.008,120,0.008,128,1.609,131,1.493,136,1.686,155,0.842,156,0.648,157,3.211,158,1.686,165,0.797,168,0.756,177,1.8,179,1.138,183,3.999,186,3.211,201,1.136,202,0.842,203,1.064,208,3.895,231,2.953,234,1.414,242,1.931,243,1.686,244,1.931,247,1.8,249,2.266,265,1.585,267,1.334,270,2.377,274,2.143,279,1.585,299,1.609,302,1.574,303,3.204,304,2.266,305,3.482,306,3.1,307,2.237,308,3.268,309,3.268,310,3.1,311,4.061,312,5.617,313,4.061,314,3.714,315,3.1,316,2.189,317,2.399,318,3.006,319,3.268,320,3.528,321,3.962,322,3.268,323,2.061,324,3.268,325,3.962,326,2.495,327,2.313,328,3.268,329,2.061,330,4.093,331,3.528,332,3.528,333,2.495,334,2.061,335,3.268,336,5.36,337,3.204,338,2.945,339,2.061,340,2.061,341,5.36,342,4.061,343,2.802,344,2.802,345,3.268,346,3.268,347,2.061,348,3.268,349,5.145,350,3.268,351,2.061,352,3.962,353,2.266,354,3.268,355,3.268,356,2.061,357,3.268,358,2.061,359,2.802,360,2.061,361,2.266,362,2.061,363,3.268,364,1.585,365,2.802,366,3.268,367,3.268,368,1.585,369,1.585,370,2.495,371,2.495,372,2.083,373,2.061,374,1.334,375,1.493,376,2.061,377,2.802,378,2.802,379,1.574,380,1.767,381,1.767,382,1.767,383,1.574,384,1.574,385,1.574,386,1.767,387,1.429,388,2.061,389,1.574,390,2.061,391,2.083,392,2.083,393,3.268,394,3.268,395,2.802]],["title/interfaces/City.html",[121,0.089,274,1.208]],["body/interfaces/City.html",[3,0.153,4,0.178,8,0.178,12,0.285,25,0.153,26,0.334,42,0.02,57,0.411,58,1.053,77,0.336,89,0.864,116,1.097,119,0.014,120,0.014,121,0.171,122,0.894,125,0.769,134,2.069,259,1.276,270,2.152,271,2.202,272,2.351,273,2.202,274,2.23,275,3.524,276,2.91,277,3.478,278,1.342,279,2.069,280,1.743,281,2.202,282,2.202,283,1.342,284,1.743,285,1.566,286,2.202,287,2.809,288,2.202,289,2.531,290,2.202,291,2.973,292,2.202,293,2.202,294,2.857,295,2.857,296,2.069,297,2.202,298,2.202,299,1.486,300,2.202,301,2.069]],["title/components/CityComponent.html",[0,0.651,102,1.272]],["body/components/CityComponent.html",[0,1.166,1,0.671,2,1.612,3,0.174,4,0.08,5,0.745,6,0.745,7,0.745,8,0.08,12,0.129,13,2.147,14,0.638,16,0.745,17,2.529,18,2.529,19,1.198,20,1.025,21,1.198,23,1.198,25,0.069,26,0.187,30,2.294,32,1.136,36,1.503,39,2.655,42,0.02,44,1.632,46,1.974,47,1.598,48,0.606,49,1.676,50,1.894,51,1.874,53,1.774,57,0.297,58,0.439,62,0.949,65,1.974,69,1.015,71,0.471,76,1.198,77,0.092,83,0.745,84,1.198,85,1.72,86,0.745,87,1.72,88,0.745,89,0.387,90,0.745,91,0.671,92,0.745,93,1.285,94,0.745,95,0.745,96,1.285,97,0.745,98,1.285,99,0.745,100,0.638,101,0.745,102,1.812,103,0.745,104,0.671,105,0.745,106,0.638,107,0.745,108,0.671,109,0.745,110,0.638,111,0.745,112,0.671,113,0.745,114,1.285,115,0.745,116,0.495,117,0.745,118,0.745,119,0.008,120,0.008,125,0.486,128,1.079,131,1.415,136,1.598,157,3.105,158,1.598,165,0.745,177,1.706,179,1.079,183,3.486,186,3.741,199,2.655,201,1.061,203,0.994,208,1.336,211,1.471,212,1.471,231,2.45,234,1.352,242,1.83,243,2.684,244,1.83,247,1.706,249,2.147,253,1.974,259,1.329,260,3.074,265,1.502,270,1.025,274,2.357,276,1.676,284,2.322,285,1.787,289,2.032,292,1.598,293,1.598,296,1.502,299,1.079,301,1.502,304,2.147,306,2.965,307,2.139,310,2.965,314,3.839,315,2.965,317,2.294,318,2.934,320,3.395,330,2.365,331,2.365,332,2.365,333,3.395,338,1.974,344,3.813,352,3.813,353,2.147,359,2.655,361,2.147,377,2.655,380,1.652,381,1.652,382,1.652,384,1.471,386,1.652,389,1.471,392,1.974,395,2.655,396,1.471,397,2.147,398,3.097,399,3.097,400,2.878,401,2.934,402,3.883,403,1.927,404,3.097,405,2.655,406,4.447,407,1.927,408,3.097,409,1.927,410,1.927,411,1.927,412,1.927,413,1.927,414,2.655,415,2.365,416,3.097,417,3.813,418,3.097,419,2.45,420,3.097,421,3.097,422,3.097,423,3.097,424,1.927,425,3.084,426,2.655,427,1.706,428,1.927,429,2.365,430,3.097,431,1.927,432,3.097,433,3.097,434,2.655,435,3.097,436,3.097,437,2.627,438,3.097,439,5.469,440,4.447,441,3.097,442,3.097,443,3.097,444,3.097,445,3.097,446,1.927,447,4.447,448,2.655,449,3.097,450,3.097,451,2.655,452,3.097,453,1.927,454,1.927,455,1.927,456,1.471,457,1.471,458,1.927,459,1.927,460,1.471,461,1.927,462,1.927,463,3.097,464,3.097,465,3.097,466,3.097,467,3.097,468,3.097,469,3.097,470,3.097,471,3.097,472,3.097,473,3.097,474,4.447,475,3.097,476,3.097,477,3.097,478,3.097]],["title/interfaces/CityInfoResponse.html",[121,0.089,285,1.34]],["body/interfaces/CityInfoResponse.html",[3,0.143,4,0.166,8,0.166,12,0.266,25,0.143,26,0.32,42,0.02,57,0.469,58,1.044,77,0.331,89,0.848,116,1.025,119,0.014,120,0.014,121,0.168,122,0.835,125,0.756,134,1.933,259,1.583,270,2.096,271,2.057,272,2.196,273,2.057,274,2.096,275,3.573,276,2.846,277,3.403,278,1.254,279,1.933,280,1.628,281,2.057,282,2.057,283,1.665,284,2.162,285,1.943,286,3.269,287,3.211,288,3.269,289,2.895,290,3.269,291,3.25,292,2.057,293,2.057,294,2.732,295,2.732,296,1.933,297,2.057,298,2.057,299,1.389,300,2.057,301,1.933]],["title/interfaces/Climate.html",[121,0.089,291,1.668]],["body/interfaces/Climate.html",[3,0.154,4,0.18,8,0.18,12,0.288,25,0.154,26,0.337,42,0.02,57,0.373,58,1.012,77,0.337,89,0.773,116,1.109,119,0.014,120,0.014,121,0.171,122,0.904,125,0.771,134,2.093,259,1.29,270,2.162,271,2.227,272,2.377,273,2.227,274,2.045,275,3.61,276,2.407,277,2.878,278,1.357,279,2.093,280,1.762,281,2.227,282,2.227,283,1.357,284,1.762,285,1.583,286,2.227,287,2.824,288,2.227,289,2.549,290,2.227,291,3.166,292,2.227,293,2.227,294,2.878,295,2.878,296,2.093,297,2.227,298,2.227,299,1.943,300,3.371,301,3.168]],["title/interfaces/CoworkingSpace.html",[121,0.089,289,1.668]],["body/interfaces/CoworkingSpace.html",[3,0.152,4,0.178,8,0.178,12,0.285,25,0.152,26,0.334,42,0.02,57,0.41,58,1.043,77,0.336,89,0.863,116,1.671,119,0.014,120,0.014,121,0.171,122,0.892,125,0.768,134,2.066,259,1.273,270,2.151,271,2.198,272,2.347,273,2.198,274,2.032,275,3.57,276,2.387,277,2.854,278,1.339,279,2.066,280,1.739,281,2.198,282,2.198,283,1.339,284,1.739,285,1.563,286,2.198,287,2.807,288,2.198,289,2.807,290,2.198,291,2.971,292,2.198,293,2.198,294,2.854,295,2.854,296,2.682,297,2.854,298,3.354,299,1.484,300,2.198,301,2.066]],["title/components/DashboardComponent.html",[0,0.651,104,1.272]],["body/components/DashboardComponent.html",[0,1.117,1,0.714,2,1.769,3,0.073,4,0.086,5,0.793,6,0.793,7,0.793,8,0.086,12,0.217,14,0.678,16,0.793,17,2.564,18,2.564,19,1.259,20,1.077,21,1.259,23,1.259,25,0.073,26,0.278,29,2.375,30,2.391,32,1.194,36,1.53,42,0.02,44,2.134,47,2.892,48,1.023,49,1.405,50,1.93,51,1.791,53,1.849,57,0.336,62,0.989,69,0.978,71,0.501,76,1.259,77,0.098,83,0.793,84,1.259,85,1.259,86,0.793,87,1.782,88,0.793,89,0.767,90,0.793,91,0.714,92,0.793,93,0.678,94,0.793,95,0.793,96,0.678,97,0.793,98,0.678,99,0.793,100,1.339,101,0.793,102,0.714,103,0.793,104,1.863,105,0.793,106,0.678,107,0.793,108,0.714,109,0.793,110,1.339,111,0.793,112,0.714,113,0.793,114,0.678,115,0.793,116,0.527,117,0.793,118,0.793,119,0.008,120,0.008,125,0.636,128,2.026,131,0.937,155,0.837,156,0.645,157,3.573,158,1.679,161,2.79,165,0.793,168,0.752,177,2.229,183,3.993,186,3.203,201,1.129,231,3.75,234,2.026,242,3.436,243,2.759,244,3.436,247,2.946,248,4.083,259,1.377,267,2.602,304,2.257,306,3.09,315,3.09,320,3.518,330,2.485,331,2.485,332,2.485,333,2.485,349,5.136,361,2.806,384,1.566,389,1.566,405,3.95,414,2.79,437,1.923,479,1.566,480,3.312,481,3.254,482,3.254,483,4.046,484,4.046,485,3.409,486,2.25,487,2.649,488,3.312,489,2.79,490,2.05,491,4.607,492,3.254,493,4.607,494,3.254,495,3.254,496,3.254,497,3.254,498,3.254,499,3.254,500,2.05,501,2.257,502,3.254,503,2.969,504,2.485,505,2.806,506,5.348,507,5.348,508,5.348,509,2.05,510,4.607,511,2.05,512,3.09,513,3.518,514,3.254,515,2.79,516,2.05,517,3.254,518,3.254,519,3.254,520,3.254,521,2.05,522,3.518,523,2.79,524,3.254,525,2.79,526,3.254,527,2.79,528,3.254,529,2.05,530,3.254,531,2.05,532,3.254,533,2.969,534,3.254,535,2.05,536,3.254,537,2.722,538,2.05,539,2.485,540,2.05,541,1.307,542,2.05,543,2.05,544,2.05,545,1.566,546,2.05,547,2.05,548,2.05,549,2.05,550,1.566,551,2.05,552,2.05,553,2.05,554,3.254,555,2.05,556,3.254]],["title/injectables/DashboardEffects.html",[143,1.148,557,2.532]],["body/injectables/DashboardEffects.html",[3,0.116,4,0.135,8,0.135,12,0.217,25,0.116,26,0.277,36,1.418,42,0.02,50,1.825,51,1.735,53,1.481,54,2.714,62,1.304,69,1.015,71,0.792,77,0.155,119,0.012,120,0.012,143,1.825,144,1.572,165,1.254,270,2.212,274,1.921,276,2.505,278,1.444,280,2.502,284,1.876,285,1.958,317,3.76,325,4.978,326,4.433,353,3.186,387,2.248,397,3.186,400,3.76,417,4.978,419,3.506,425,4.025,427,2.531,429,3.508,460,2.475,480,3.43,557,3.186,558,2.779,559,4.594,560,3.186,561,4.446,562,4.025,563,1.497,564,3.939,565,3.241,566,3.939,567,4.074,568,4.594,569,3.241,570,4.413,571,3.186,572,5.255,573,4.978,574,4.594,575,5.255,576,5.805,577,3.508,578,4.594,579,4.249,580,4.594,581,3.939,582,5.805,583,4.594,584,4.594,585,3.241,586,4.978,587,4.433,588,4.594,589,4.594,590,4.594,591,4.249,592,3.241,593,2.779,594,2.475,595,3.241,596,3.241,597,2.475]],["title/injectables/DashboardFacade.html",[143,1.148,314,2.327]],["body/injectables/DashboardFacade.html",[3,0.123,4,0.144,8,0.144,12,0.369,25,0.123,26,0.29,32,1.761,35,1.9,36,1.586,42,0.02,48,1.735,49,2.802,50,1.509,51,1.435,55,3.059,57,0.419,58,0.782,62,0.843,69,1.035,71,0.843,77,0.165,89,0.69,119,0.012,120,0.012,143,1.509,144,1.673,155,2.254,156,1.972,165,1.335,166,2.038,167,1.78,168,1.761,243,2.476,251,3.328,270,2.389,274,2.247,276,2.382,278,1.509,280,2.72,299,2.433,314,3.059,317,4.29,353,3.328,361,3.328,387,2.392,400,3.935,427,3.8,480,2.836,537,2.836,561,4.139,566,5.116,567,3.665,577,3.665,587,4.958,597,2.634,598,2.958,599,4.8,600,4.349,601,2.958,602,4.139,603,4.8,604,4.8,605,3.45,606,6.493,607,3.45,608,4.8,609,3.45,610,5.116,611,3.45,612,4.8,613,3.45,614,4.8,615,2.199,616,3.45,617,2.038,618,3.45,619,3.45,620,3.45]],["title/injectables/DashboardService.html",[143,1.148,562,2.532]],["body/injectables/DashboardService.html",[3,0.109,4,0.127,8,0.127,12,0.203,25,0.109,32,1.612,35,1.677,36,1.259,42,0.02,48,1.774,50,1.381,57,0.429,58,0.73,62,0.744,65,3.285,69,0.994,71,0.744,77,0.146,89,0.897,116,1.324,119,0.011,120,0.011,143,1.381,144,1.476,155,2.104,156,1.62,158,2.266,165,1.178,166,1.799,167,1.571,168,1.891,209,3.354,226,2.61,229,3.046,243,2.266,270,2.279,273,1.571,274,2.062,275,2.13,276,3.005,277,3.51,280,2.304,281,2.266,282,2.266,283,1.381,284,2.545,285,2.07,286,1.571,287,1.391,288,1.571,290,1.571,291,1.391,294,1.571,295,1.571,296,2.499,297,2.659,298,3.216,299,1.53,300,1.571,301,1.476,303,3.912,372,3.596,391,3.285,400,2.595,419,3.108,425,3.912,427,3.691,562,3.046,577,3.354,610,3.766,617,1.799,621,2.61,622,5.153,623,2.61,624,4.837,625,3.044,626,3.766,627,3.044,628,3.044,629,3.912,630,3.044,631,4.392,632,5.153,633,2.61,634,3.044,635,2.111,636,3.044,637,2.111,638,3.044,639,3.044,640,3.766,641,3.044,642,3.766,643,3.766,644,4.392,645,4.392,646,4.392,647,3.044,648,4.392,649,4.392,650,4.837,651,4.392,652,6.802,653,3.044,654,3.044,655,3.044,656,3.044,657,3.766,658,3.044,659,3.044,660,3.044,661,3.044,662,3.044,663,3.044,664,3.044,665,2.61,666,3.044,667,3.044,668,3.044,669,3.044,670,3.044,671,2.61,672,3.044,673,3.044,674,2.61,675,3.044,676,3.044]],["title/interfaces/DashboardState.html",[121,0.089,677,2.532]],["body/interfaces/DashboardState.html",[3,0.141,4,0.164,8,0.164,12,0.262,25,0.141,26,0.316,42,0.02,46,2.503,47,2.026,48,1.855,57,0.35,69,0.941,77,0.282,119,0.014,120,0.014,121,0.095,122,0.822,125,0.573,131,2.697,168,2.407,259,1.882,270,2.454,274,2.433,285,2.477,303,4.092,327,1.694,387,2.722,480,3.876,537,4.454,560,2.722,579,2.722,591,2.722,597,2.998,600,2.722,602,2.503,615,2.503,677,4.092,678,2.998,679,4.002,680,1.904,681,3.366,682,2.998,683,2.998,684,4.002,685,3.635,686,2.998,687,2.998,688,3.635,689,4.506,690,4.506,691,3.366,692,3.366,693,3.366,694,3.366,695,3.366]],["title/interfaces/FooterLogoModel.html",[121,0.089,696,1.884]],["body/interfaces/FooterLogoModel.html",[3,0.149,4,0.173,8,0.173,12,0.277,25,0.149,26,0.328,29,2.221,42,0.02,57,0.458,58,1.064,69,0.867,70,1.895,77,0.334,119,0.014,120,0.014,121,0.166,122,0.869,125,0.764,128,2.388,179,1.446,182,2.638,202,1.696,234,1.895,265,2.014,267,2.477,316,1.696,327,1.792,364,2.014,368,2.014,369,2.014,374,2.629,375,3.133,563,1.014,680,2.014,696,3.13,697,2.142,698,3.584,699,2.997,700,3.448,701,3.214,702,2.287,703,1.792,704,2.997,705,1.524,706,2.638,707,2.142,708,2.807,709,2.453,710,2.142,711,2.807,712,2.142,713,2.997,714,1.446,715,1.374,716,2.142]],["title/interfaces/FooterTextModel.html",[121,0.089,711,1.884]],["body/interfaces/FooterTextModel.html",[3,0.147,4,0.171,8,0.171,12,0.274,25,0.147,26,0.326,29,2.203,42,0.02,57,0.466,58,1.068,69,0.86,70,1.879,77,0.333,119,0.014,120,0.014,121,0.166,122,0.859,125,0.761,128,2.1,179,2.231,182,2.616,202,1.674,234,1.879,265,1.988,267,2.844,316,1.674,327,1.77,364,1.988,368,1.988,369,1.988,374,2.616,375,3.123,563,1.002,680,1.988,696,2.784,697,2.116,698,3.562,699,2.259,700,2.784,701,3.187,702,2.259,703,1.77,704,2.972,705,1.505,706,2.616,707,2.116,708,2.784,709,2.423,710,2.116,711,3.111,712,2.116,713,2.972,714,1.428,715,1.357,716,3.305]],["title/components/FormComponent.html",[0,0.651,106,1.208]],["body/components/FormComponent.html",[0,1.085,1,0.749,2,1.806,3,0.077,4,0.09,5,0.832,6,0.832,7,0.832,8,0.09,12,0.279,14,1.119,15,1.271,16,0.832,17,2.59,18,2.59,19,1.308,20,1.566,21,1.308,23,1.308,25,0.077,26,0.204,28,2.796,32,1.24,34,1.862,36,1.618,41,1.271,42,0.02,44,1.24,47,1.744,48,1.313,49,2.042,50,1.617,51,2.121,52,2.581,53,1.545,57,0.279,60,1.643,62,0.526,69,0.97,70,1.178,71,0.526,74,1.845,75,1.643,76,1.308,77,0.103,78,1.271,83,0.832,84,1.308,85,1.308,86,0.832,87,1.831,88,0.832,89,0.592,90,0.832,91,0.749,92,0.832,93,0.712,94,0.832,95,0.832,96,1.382,97,0.832,98,1.382,99,0.832,100,0.712,101,0.832,102,0.749,103,0.832,104,0.749,105,0.832,106,1.566,107,0.832,108,0.749,109,0.832,110,0.712,111,0.832,112,0.749,113,0.832,114,0.712,115,0.832,116,0.553,117,0.832,118,0.832,119,0.009,120,0.009,125,0.624,126,1.845,127,1.492,128,0.749,131,1.545,139,1.372,155,1.38,156,0.677,158,1.744,163,4.058,168,1.24,177,1.862,178,2.581,179,1.178,201,1.185,202,0.879,203,1.11,229,2.344,253,2.155,256,3.581,260,2.467,261,1.845,264,2.899,304,2.344,305,3.581,307,1.185,310,3.613,316,2.229,321,4.058,327,2.626,374,2.93,375,1.908,392,3.016,415,2.581,419,1.185,426,2.899,437,3.226,501,2.344,512,2.581,581,2.899,688,2.344,703,0.929,705,0.79,706,1.639,715,1.119,717,1.643,718,3.189,719,3.381,720,3.381,721,4.176,722,4.732,723,3.927,724,4.176,725,5.143,726,4.732,727,3.381,728,2.899,729,3.381,730,3.381,731,4.169,732,4.176,733,3.381,734,5.143,735,2.152,736,2.152,737,2.581,738,3.381,739,5.46,740,2.152,741,3.381,742,2.152,743,3.381,744,3.381,745,2.152,746,5.143,747,2.152,748,3.381,749,2.152,750,3.381,751,3.381,752,2.152,753,3.281,754,2.152,755,1.845,756,2.152,757,1.643,758,2.152,759,2.152,760,2.152,761,2.152,762,2.152,763,2.152,764,2.152,765,2.152,766,2.152,767,2.152,768,2.152,769,2.152,770,2.152,771,2.152,772,2.152,773,2.152,774,2.152,775,4.176,776,2.152,777,2.152,778,3.381,779,3.381,780,3.381,781,3.381,782,3.381,783,3.381,784,3.381,785,4.732,786,3.381,787,3.381,788,3.381,789,3.381,790,3.381,791,3.381,792,3.381]],["title/interfaces/FormModel.html",[121,0.089,316,1.491]],["body/interfaces/FormModel.html",[3,0.134,4,0.156,8,0.156,12,0.25,25,0.134,26,0.306,29,2.07,42,0.02,57,0.493,58,1.058,69,0.808,70,1.765,77,0.325,119,0.013,120,0.013,121,0.162,122,0.782,125,0.744,128,2.004,156,2.297,179,1.301,182,3.128,202,1.525,234,2.149,265,2.992,267,2.349,316,2.07,327,1.612,364,2.992,368,1.811,369,1.811,374,2.634,375,3.04,563,0.912,680,1.811,696,3.184,697,1.927,698,2.995,699,2.058,700,3.328,701,2.995,702,2.058,703,1.612,704,3.399,705,1.37,706,2.992,707,3.184,708,3.184,709,3.646,710,3.184,711,3.184,712,3.184,713,2.792,714,1.301,715,1.236,716,1.927]],["title/interfaces/FormOutputModel.html",[121,0.089,703,1.576]],["body/interfaces/FormOutputModel.html",[3,0.153,4,0.178,8,0.178,29,2.264,36,1.045,42,0.02,57,0.435,58,1.061,69,0.884,70,1.931,77,0.336,119,0.014,120,0.014,121,0.168,122,0.895,125,0.755,128,2.143,179,1.489,182,2.688,202,1.746,234,1.931,265,2.073,267,2.512,316,1.746,327,1.845,364,2.073,368,2.073,369,2.073,374,2.658,375,3.082,563,1.045,680,2.688,696,2.861,697,2.206,698,3.276,699,2.355,700,2.861,701,3.276,702,2.355,703,2.393,704,3.054,705,1.569,706,2.688,707,2.206,708,2.861,709,2.526,710,2.206,711,2.861,712,2.206,713,3.054,714,1.489,715,1.415,716,2.206,793,4.276,794,4.276]],["title/interfaces/GetCitiesPayload.html",[121,0.089,280,1.491]],["body/interfaces/GetCitiesPayload.html",[3,0.154,4,0.18,8,0.18,12,0.288,25,0.154,26,0.336,42,0.02,57,0.372,58,1.012,77,0.337,89,0.772,116,1.107,119,0.014,120,0.014,121,0.171,122,0.902,125,0.77,134,2.089,259,1.288,270,2.237,271,2.222,272,2.373,273,2.222,274,2.043,275,3.609,276,2.404,277,2.874,278,1.752,279,2.701,280,2.275,281,3.368,282,3.368,283,1.354,284,1.759,285,1.58,286,2.222,287,2.822,288,2.222,289,2.546,290,2.222,291,2.983,292,2.222,293,2.222,294,2.874,295,2.874,296,2.089,297,2.222,298,2.222,299,1.5,300,2.222,301,2.089]],["title/interfaces/InputFormModel.html",[121,0.089,706,1.77]],["body/interfaces/InputFormModel.html",[3,0.144,4,0.168,8,0.168,12,0.27,25,0.144,26,0.322,29,2.704,42,0.02,57,0.471,58,1.061,69,0.851,70,2.084,77,0.332,119,0.014,120,0.014,121,0.165,122,0.845,125,0.758,128,2.369,156,1.679,179,1.406,182,2.589,202,1.648,234,1.86,265,1.957,267,2.443,316,1.648,327,1.742,364,1.957,368,3.087,369,3.087,374,2.704,375,3.109,563,0.986,680,1.957,696,2.755,697,2.082,698,3.154,699,2.223,700,2.755,701,3.761,702,2.223,703,1.742,704,2.941,705,1.481,706,2.901,707,2.082,708,2.755,709,2.384,710,2.082,711,2.755,712,2.082,713,3.507,714,1.406,715,1.335,716,2.082]],["title/interfaces/InternetSpeed.html",[121,0.089,287,1.668]],["body/interfaces/InternetSpeed.html",[3,0.154,4,0.179,8,0.179,12,0.287,25,0.154,26,0.335,42,0.02,57,0.371,58,1.011,77,0.337,89,0.771,116,1.103,119,0.014,120,0.014,121,0.171,122,0.899,125,0.77,134,2.695,259,1.283,270,2.157,271,2.214,272,2.364,273,2.214,274,2.039,275,3.607,276,2.399,277,2.867,278,1.349,279,2.081,280,1.752,281,2.214,282,2.214,283,1.349,284,1.752,285,1.575,286,2.214,287,2.979,288,2.214,289,2.54,290,2.214,291,2.979,292,2.867,293,2.867,294,3.57,295,3.57,296,2.081,297,2.214,298,2.214,299,1.495,300,2.214,301,2.081]],["title/components/LoginComponent.html",[0,0.651,108,1.272]],["body/components/LoginComponent.html",[0,1.095,1,0.919,2,1.309,3,0.094,4,0.11,5,1.021,6,1.021,7,1.021,8,0.11,12,0.264,14,0.873,16,1.021,17,2.693,18,2.693,19,1.53,20,1.309,21,1.53,23,1.53,25,0.094,26,0.239,29,2.418,32,1.451,36,1.378,42,0.02,48,0.83,49,1.139,50,1.656,51,1.77,53,1.807,57,0.377,62,1.159,69,1.03,71,0.645,76,1.53,77,0.126,83,1.021,84,1.53,85,1.53,86,1.021,87,2.038,88,1.021,89,0.593,90,1.021,91,0.919,92,1.021,93,0.873,94,1.021,95,1.021,96,0.873,97,1.021,98,0.873,99,1.021,100,0.873,101,1.021,102,0.919,103,1.021,104,0.919,105,1.021,106,1.743,107,1.021,108,2.063,109,1.021,110,0.873,111,1.021,112,0.919,113,1.021,114,0.873,115,1.021,116,0.678,117,1.021,118,1.021,119,0.01,120,0.01,125,0.647,128,2.291,136,2.041,155,1.078,156,0.83,158,2.041,165,1.021,168,0.969,179,1.378,182,1.918,186,3.596,202,1.078,208,1.831,242,2.337,243,2.041,244,2.337,247,2.179,250,2.743,267,1.615,316,2.418,318,1.362,337,2.743,338,2.521,343,3.391,364,1.918,368,2.554,369,2.554,370,4.022,371,4.022,372,2.521,374,2.418,375,2.407,379,2.016,383,2.016,385,2.016,391,2.521,397,2.743,427,2.179,437,2.337,486,2.498,488,3.112,501,2.743,539,3.02,541,1.683,545,2.016,550,3.02,563,1.543,570,2.743,571,2.743,700,2.718,703,2.556,707,2.041,710,2.041,712,2.041,714,1.965,715,1.867,716,2.041,723,3.02,731,3.02,737,3.02,753,2.743,795,2.264,796,3.955,797,3.955,798,3.112,799,3.391,800,2.64,801,3.391,802,4.517,803,3.391,804,3.391,805,3.955,806,3.955,807,3.391,808,3.391,809,3.391,810,3.955,811,3.391,812,3.391,813,2.64,814,3.02,815,2.64,816,3.955,817,3.955,818,3.955,819,2.64,820,2.64,821,1.831,822,2.264,823,2.264,824,2.64,825,2.264,826,2.264]],["title/injectables/LoginGuard.html",[143,1.148,827,2.788]],["body/injectables/LoginGuard.html",[3,0.164,4,0.191,8,0.191,20,2.103,25,0.164,32,2.126,35,2.524,36,1.416,42,0.02,48,1.822,57,0.306,62,1.119,69,1.013,71,1.119,77,0.219,89,0.573,119,0.015,120,0.015,130,4.425,143,1.822,144,2.222,155,1.871,156,1.441,166,2.707,167,2.364,172,4.052,203,2.364,219,4.969,318,3.631,401,3.631,419,3.192,487,2.974,563,1.416,617,2.707,821,3.177,827,4.425,828,3.928,829,6.68,830,3.928,831,4.582,832,4.582,833,5.795,834,4.854,835,6.357,836,5.795,837,4.969,838,4.582,839,4.582,840,4.582,841,4.582,842,5.795,843,4.582,844,3.928]],["title/interfaces/LoginPayload.html",[121,0.089,845,1.77]],["body/interfaces/LoginPayload.html",[3,0.166,4,0.194,8,0.194,12,0.31,25,0.166,26,0.353,42,0.02,57,0.391,58,1.073,77,0.331,89,0.839,119,0.015,120,0.015,121,0.168,122,0.973,125,0.756,259,1.389,278,2.012,283,1.838,401,2.397,486,2.475,487,2.898,563,1.563,714,2.41,715,2.289,845,2.835,846,2.745,847,2.397,848,2.962,849,2.559,850,2.253,851,2.253,852,2.253,853,2.745,854,2.962,855,2.745,856,2.253]],["title/injectables/LoginRegisterService.html",[143,1.148,798,2.157]],["body/injectables/LoginRegisterService.html",[3,0.132,4,0.154,8,0.154,12,0.382,25,0.132,32,1.846,35,2.034,36,1.397,42,0.02,48,1.931,54,2.972,57,0.382,58,0.713,62,0.902,69,1.057,71,0.902,77,0.177,89,0.803,119,0.013,120,0.013,131,2.299,143,1.582,144,1.791,155,2.336,156,1.799,165,1.429,166,2.182,167,1.905,168,1.846,278,1.931,283,1.931,299,1.752,397,3.488,415,4.689,419,3.383,427,3.857,486,2.376,563,1.73,570,3.488,571,3.488,617,2.182,623,3.167,624,5.266,626,4.313,629,4.259,633,3.167,635,2.561,637,2.561,642,4.313,705,1.846,714,2.139,715,2.032,798,2.972,845,3.29,850,2.439,851,3.348,852,3.29,856,2.439,857,3.167,858,3.693,859,5.03,860,3.693,861,6.142,862,6.142,863,5.03,864,3.693,865,3.693,866,3.693,867,3.693,868,4.313,869,3.693,870,5.03,871,3.693,872,5.03,873,3.693,874,3.693]],["title/interfaces/LoginResponse.html",[121,0.089,850,1.77]],["body/interfaces/LoginResponse.html",[3,0.166,4,0.193,8,0.193,12,0.31,25,0.166,26,0.352,42,0.02,57,0.39,58,1.073,77,0.331,89,0.896,119,0.015,120,0.015,121,0.168,122,0.971,125,0.756,259,1.386,278,1.836,283,2.01,401,2.392,486,2.731,487,2.759,563,1.562,714,2.034,715,1.932,845,2.248,846,2.74,847,2.392,848,3.722,849,3.217,850,2.832,851,2.248,852,2.248,853,2.74,854,2.956,855,2.74,856,2.248]],["title/components/NavBarComponent.html",[0,0.651,110,1.208]],["body/components/NavBarComponent.html",[0,1.126,1,1.224,2,2.089,3,0.126,4,0.147,5,1.359,6,1.359,7,1.359,8,0.147,12,0.235,14,1.162,16,1.359,17,2.816,18,2.816,19,1.88,20,1.844,21,1.88,23,1.88,25,0.126,26,0.293,34,2.677,36,1.469,41,2.076,42,0.02,44,2.045,62,0.858,69,0.959,70,1.224,71,0.858,76,1.88,77,0.168,78,2.076,83,1.359,84,1.88,85,1.88,86,1.359,87,2.326,88,1.359,89,0.608,90,1.359,91,1.224,92,1.359,93,1.162,94,2.679,95,1.359,96,1.844,97,1.359,98,1.162,99,1.359,100,1.162,101,1.359,102,1.224,103,1.359,104,1.224,105,1.359,106,1.162,107,1.359,108,1.224,109,1.359,110,1.99,111,1.359,112,1.224,113,1.359,114,1.162,115,1.359,116,0.903,117,1.359,118,1.359,119,0.013,120,0.013,125,0.531,131,1.605,231,3.816,234,1.224,239,3.012,392,3.833,437,3.292,448,5.85,485,4.162,489,5.413,513,3.711,728,4.167,731,4.255,753,3.37,755,3.012,875,2.682,876,4.86,877,4.86,878,4.86,879,4.86,880,5.573,881,3.513,882,4.86,883,6.013,884,4.86,885,6.013]],["title/interfaces/NavbarConfig.html",[121,0.089,485,2.327]],["body/interfaces/NavbarConfig.html",[3,0.187,4,0.218,8,0.218,12,0.348,25,0.187,26,0.379,42,0.02,44,2.303,57,0.45,58,0.954,69,0.831,77,0.249,119,0.016,120,0.016,121,0.127,122,1.092,125,0.686,234,2.559,485,4.001,513,4.793,523,5.993,525,5.993,527,5.993,702,2.872,886,4.471]],["title/interfaces/RegisterPayload.html",[121,0.089,852,1.77]],["body/interfaces/RegisterPayload.html",[3,0.162,4,0.189,8,0.189,12,0.302,25,0.162,26,0.347,42,0.02,57,0.444,58,1.079,77,0.328,89,0.891,119,0.015,120,0.015,121,0.167,122,0.946,125,0.75,259,1.351,278,1.986,283,1.806,401,2.331,486,2.443,487,2.869,563,1.403,714,2.39,715,2.27,845,2.191,846,2.67,847,2.331,848,2.88,849,2.489,850,2.191,851,2.786,852,2.786,853,3.927,854,2.88,855,2.67,856,2.191]],["title/interfaces/RegisterResponse.html",[121,0.089,856,1.77]],["body/interfaces/RegisterResponse.html",[3,0.166,4,0.193,8,0.193,12,0.309,25,0.166,26,0.352,42,0.02,57,0.39,58,1.073,77,0.33,89,0.896,119,0.015,120,0.015,121,0.168,122,0.969,125,0.755,259,1.743,278,1.834,283,2.008,401,2.388,486,2.73,487,2.894,563,1.425,714,2.031,715,1.93,845,2.244,846,2.734,847,2.388,848,2.95,849,2.549,850,2.244,851,2.244,852,2.244,853,2.734,854,3.717,855,3.446,856,2.828]],["title/components/RegistrationComponent.html",[0,0.651,112,1.272]],["body/components/RegistrationComponent.html",[0,1.001,1,0.908,2,1.296,3,0.093,4,0.109,5,1.009,6,1.009,7,1.009,8,0.109,12,0.262,14,0.863,16,1.009,17,2.687,18,2.687,19,1.516,20,1.296,21,1.516,23,1.516,25,0.093,26,0.236,29,2.755,32,1.438,36,1.279,42,0.02,48,0.82,49,1.125,50,1.48,51,1.407,53,2.151,54,2.315,57,0.35,62,0.637,69,1.003,71,0.637,76,1.516,77,0.125,83,1.009,84,1.516,85,1.516,86,1.009,87,2.025,88,1.009,89,0.737,90,1.009,91,0.908,92,1.009,93,0.863,94,1.009,95,1.009,96,0.863,97,1.009,98,0.863,99,1.009,100,0.863,101,1.009,102,0.908,103,1.009,104,0.908,105,1.009,106,1.732,107,1.009,108,0.908,109,1.009,110,0.863,111,1.009,112,1.823,113,1.009,114,0.863,115,1.009,116,0.67,117,1.009,118,1.009,119,0.01,120,0.01,125,0.572,128,2.438,136,2.022,155,1.065,156,0.82,168,0.957,179,1.365,182,1.9,202,1.065,242,2.315,243,2.022,244,2.315,247,2.158,250,2.717,267,2.407,316,2.407,318,1.345,337,2.717,338,2.498,364,1.9,368,3.179,369,3.179,370,5.006,371,4.501,372,2.498,374,2.407,375,2.392,379,1.991,383,1.991,385,1.991,391,4.011,437,2.315,488,3.093,501,2.717,539,2.992,541,1.662,545,1.991,563,0.957,570,2.717,571,2.717,700,2.701,703,2.544,705,1.438,707,2.022,710,2.022,712,2.022,714,1.955,715,2.129,716,2.022,723,2.992,737,2.992,753,2.717,798,3.093,799,3.36,801,3.36,802,4.489,803,3.36,804,4.489,807,4.489,808,3.36,811,3.36,812,3.36,814,2.992,821,1.808,822,2.235,823,2.235,825,2.235,826,2.235,851,3.051,853,2.781,887,2.235,888,3.918,889,3.918,890,2.607,891,3.918,892,3.918,893,3.918,894,3.918,895,2.607,896,2.607,897,2.607,898,2.607,899,2.607,900,2.607]],["title/components/StarRatingComponent.html",[0,0.651,114,1.208]],["body/components/StarRatingComponent.html",[0,1.247,1,1.358,2,1.726,3,0.14,4,0.163,5,1.508,6,1.508,7,1.508,8,0.163,12,0.261,14,1.29,16,1.508,17,2.855,18,2.855,19,2.019,20,1.946,21,2.019,23,2.019,25,0.14,26,0.315,34,2.874,36,1.275,41,2.304,42,0.02,51,1.758,62,0.953,69,0.622,70,1.358,71,0.953,76,1.508,77,0.186,78,2.304,83,1.508,84,2.019,85,2.019,86,1.508,87,2.429,88,1.508,89,0.652,90,1.508,91,1.358,92,1.508,93,1.29,94,1.508,95,1.508,96,1.29,97,1.508,98,1.29,99,1.508,100,1.29,101,1.508,102,1.358,103,1.508,104,1.358,105,1.508,106,1.29,107,1.508,108,1.358,109,1.508,110,1.29,111,1.508,112,1.358,113,1.508,114,2.078,115,2.867,116,1.904,117,1.508,118,1.508,119,0.014,120,0.014,125,0.57,229,3.618,372,3.326,391,3.326,392,3.326,456,4.49,457,4.49,650,4.474,657,4.474,901,3.344,902,5.218,903,5.218,904,5.218,905,3.899]],["title/interfaces/TitleFormModel.html",[121,0.089,708,1.884]],["body/interfaces/TitleFormModel.html",[3,0.148,4,0.173,8,0.173,12,0.276,25,0.148,26,0.327,29,2.726,42,0.02,57,0.458,58,1.064,69,0.865,70,1.89,77,0.334,119,0.014,120,0.014,121,0.166,122,0.866,125,0.763,128,2.386,156,1.706,179,1.441,182,2.937,202,1.689,234,1.89,265,2.006,267,2.473,316,1.689,327,1.786,364,2.006,368,2.006,369,2.006,374,2.726,375,3.13,563,1.011,680,2.006,696,2.8,697,2.135,698,3.206,699,2.279,700,2.8,701,3.206,702,2.279,703,1.786,704,2.99,705,1.518,706,2.632,707,2.135,708,3.125,709,2.444,710,2.135,711,2.8,712,2.135,713,2.99,714,1.441,715,1.369,716,2.135]],["title/interfaces/UserData.html",[121,0.089,847,1.884]],["body/interfaces/UserData.html",[3,0.164,4,0.192,8,0.192,12,0.307,25,0.164,26,0.35,42,0.02,57,0.425,58,1.076,77,0.33,89,0.894,119,0.015,120,0.015,121,0.167,122,0.961,125,0.754,259,1.372,278,1.825,283,1.825,299,1.599,401,3.449,486,2.724,487,2.885,563,1.418,714,2.021,715,1.92,845,2.226,846,2.712,847,2.994,848,2.926,849,2.529,850,2.226,851,2.226,852,2.226,853,2.712,854,2.926,855,2.712,856,2.226]],["title/injectables/UserEffects.html",[143,1.148,906,2.788]],["body/injectables/UserEffects.html",[3,0.096,4,0.112,8,0.112,12,0.267,25,0.096,26,0.241,30,3.516,32,1.465,35,2.633,36,1.549,42,0.02,48,1.256,49,2.288,50,1.784,51,1.696,53,1.825,54,2.359,57,0.267,58,0.751,62,0.653,69,1.011,71,0.653,77,0.128,89,0.865,119,0.01,120,0.01,131,2.422,143,1.256,144,1.296,154,3.424,155,1.63,156,1.256,165,1.034,168,1.465,203,1.379,278,1.667,283,1.256,299,2.362,317,3.829,318,1.379,401,3.689,419,3.278,460,4.709,480,3.132,486,2.624,487,2.927,503,3.132,504,3.049,505,2.769,561,3.046,563,1.612,564,3.424,567,2.041,572,5.288,573,5.103,575,4.864,586,5.103,593,2.292,594,2.041,617,1.58,643,4.545,705,2.183,798,3.132,814,3.049,821,1.854,830,2.292,837,5.657,844,2.292,847,3.07,850,2.317,856,2.317,906,3.049,907,2.292,908,5.301,909,3.993,910,3.993,911,2.674,912,5.301,913,3.993,914,2.674,915,4.841,916,3.993,917,2.674,918,3.993,919,3.993,920,5.301,921,5.301,922,3.993,923,2.674,924,3.993,925,3.993,926,3.314,927,2.674,928,3.993,929,3.993,930,3.314,931,2.674,932,2.292,933,2.674,934,1.854,935,2.041,936,2.041,937,2.674,938,2.674,939,2.674,940,2.674,941,2.674,942,2.674,943,2.674]],["title/injectables/UserFacade.html",[143,1.148,488,2.157]],["body/injectables/UserFacade.html",[3,0.128,4,0.15,8,0.15,12,0.33,25,0.128,26,0.298,32,1.81,35,1.977,36,1.606,42,0.02,48,1.772,49,2.837,50,1.551,51,1.475,57,0.425,62,0.877,69,1.073,71,0.877,77,0.172,89,0.705,119,0.013,120,0.013,143,1.551,144,1.741,155,2.301,156,1.772,165,1.389,166,2.121,167,1.852,168,1.81,278,2.284,317,4.314,326,4.634,427,3.833,429,4.634,486,2.543,487,2.619,488,2.915,503,3.759,504,3.767,505,3.421,533,3.759,537,2.915,561,4.19,563,1.645,587,5.019,601,3.078,602,4.19,615,2.288,617,2.121,705,2.47,845,2.943,852,2.943,932,3.078,935,2.741,944,3.078,945,4.933,946,4.933,947,3.59,948,3.59,949,4.933,950,3.59,951,4.933,952,4.933,953,3.59,954,3.59,955,3.59,956,3.59,957,3.59,958,3.59]],["title/interfaces/UserState.html",[121,0.089,533,2.157]],["body/interfaces/UserState.html",[3,0.138,4,0.161,8,0.161,12,0.258,25,0.138,26,0.313,42,0.02,46,2.461,47,1.992,48,1.84,55,2.461,57,0.346,58,0.952,69,0.826,77,0.28,89,0.883,119,0.013,120,0.013,121,0.094,122,0.808,125,0.566,131,2.674,168,2.295,175,3.594,259,1.549,283,2.112,284,2.116,486,2.733,487,3.131,503,2.281,522,4.775,533,3.457,537,4.427,560,2.677,563,0.943,602,2.461,615,2.461,629,3.594,679,3.957,680,1.872,683,4.467,684,3.957,685,4.057,686,2.947,688,3.594,689,3.957,690,3.957,834,2.947,849,3.223,851,1.872,926,2.677,930,2.677,934,2.677,935,2.947,959,2.947,960,3.31,961,2.947,962,2.947,963,3.31,964,4.444,965,4.444,966,3.31,967,3.31]],["title/coverage.html",[968,4.279]],["body/coverage.html",[0,1.207,1,0.872,2,1.825,8,0.105,9,2.148,10,1.913,11,2.148,27,1.48,28,1.48,31,1.597,42,0.02,57,0.167,65,3.846,91,0.872,93,0.829,96,0.829,98,0.829,100,0.829,102,0.872,104,0.872,106,0.829,108,0.872,110,0.829,112,0.872,114,0.829,119,0.01,120,0.01,121,0.176,123,2.636,124,2.636,143,1.954,145,2.148,146,2.148,158,1.292,174,2.148,211,1.913,212,1.913,213,2.148,230,2.148,234,0.872,241,1.913,252,2.148,260,1.48,262,1.913,270,1.52,271,3.113,274,0.829,280,1.023,285,0.919,287,1.145,289,1.145,291,1.145,302,3.508,307,2.094,314,1.597,316,1.023,318,1.292,338,4.796,396,3.508,400,2.246,456,1.913,457,1.913,479,2.903,485,1.597,486,0.969,488,1.48,503,1.48,533,2.246,541,1.597,557,1.737,558,2.148,562,1.737,563,0.612,579,1.737,591,1.737,598,2.148,600,1.737,621,2.148,635,2.636,637,1.737,640,3.26,671,2.148,677,1.737,678,3.917,682,1.913,685,2.636,687,1.913,696,1.292,697,2.996,703,1.081,705,0.919,706,1.215,708,1.292,711,1.292,717,3.508,718,1.913,795,2.148,798,1.48,827,1.913,828,2.148,845,1.215,846,3.258,847,1.292,850,1.215,852,1.215,856,1.215,857,2.148,875,2.903,886,2.148,887,2.148,901,2.148,906,1.913,907,2.148,926,1.737,930,1.737,934,1.737,944,2.148,959,3.917,961,1.913,962,1.913,968,2.148,969,2.148,970,2.505,971,2.505,972,2.505,973,2.148,974,7.491,975,2.148,976,7.428,977,3.26,978,2.148,979,2.148,980,2.148,981,2.505,982,6.033,983,6.687,984,6.687,985,6.033,986,6.033,987,3.802,988,3.802,989,3.802,990,4.729,991,4.595,992,3.802,993,3.802,994,3.94,995,2.148,996,5.329,997,2.148,998,2.148,999,3.802,1000,2.505,1001,2.505,1002,2.505,1003,3.94,1004,2.148,1005,3.802,1006,2.505,1007,3.802,1008,3.802,1009,2.505,1010,2.505,1011,2.505,1012,2.505,1013,2.505,1014,3.802,1015,2.505,1016,2.505,1017,2.505,1018,2.148,1019,2.148,1020,2.505,1021,2.505]],["title/dependencies.html",[936,3.354,1022,2.325]],["body/dependencies.html",[42,0.02,71,1.291,119,0.016,120,0.016,165,2.045,201,2.912,202,2.158,203,2.727,594,4.036,615,4.034,936,4.036,1023,5.286,1024,7.427,1025,5.286,1026,6.328,1027,6.328,1028,5.286,1029,6.774,1030,5.286,1031,5.286,1032,5.286,1033,5.286,1034,5.286,1035,5.286,1036,5.286,1037,5.286]],["title/index.html",[25,0.109,279,1.476,1038,3.045]],["body/index.html",[4,0.186,42,0.015,119,0.015,120,0.015,167,2.295,175,3.085,209,3.397,337,3.085,365,4.877,868,4.877,915,3.397,969,5.376,1022,3.397,1039,3.815,1040,6.27,1041,4.449,1042,4.449,1043,4.449,1044,3.397,1045,4.449,1046,4.449,1047,7.261,1048,7.367,1049,6.27,1050,4.449,1051,6.829,1052,7.19,1053,4.449,1054,4.449,1055,4.449,1056,4.449,1057,4.449,1058,4.449,1059,4.449,1060,4.449,1061,6.829,1062,4.449,1063,4.449,1064,6.27,1065,5.688,1066,5.688,1067,4.449,1068,4.449,1069,5.688,1070,4.449,1071,6.608,1072,4.449,1073,4.449,1074,4.449,1075,4.449,1076,4.449,1077,5.688,1078,5.688,1079,4.449,1080,4.449,1081,4.449,1082,6.829,1083,5.856,1084,4.449,1085,4.449,1086,3.815,1087,5.688,1088,4.449,1089,4.449,1090,4.449,1091,4.449,1092,4.449,1093,4.449,1094,4.449,1095,5.688,1096,4.449,1097,4.449,1098,4.449,1099,4.449]],["title/modules.html",[307,2.749]],["body/modules.html",[42,0.018,119,0.018,120,0.018,307,3.28]],["title/overview.html",[1100,4.279]],["body/overview.html",[2,1.94,42,0.017,119,0.017,120,0.017,122,1.228,144,2.843,665,5.028,674,5.028,1100,5.028,1101,5.864]],["title/properties.html",[26,0.265,1022,2.325]],["body/properties.html",[26,0.357,42,0.018,119,0.018,120,0.018,1044,4.512,1102,5.909]],["title/miscellaneous/typealiases.html",[1103,2.111,1104,4.393]],["body/miscellaneous/typealiases.html",[3,0.241,14,1.29,15,2.304,25,0.14,42,0.02,57,0.437,62,0.953,70,1.358,119,0.014,120,0.014,123,2.704,124,3.618,125,0.715,129,4.474,133,4.474,134,1.891,135,3.344,136,3.476,137,4.671,138,3.98,139,4.294,140,4.671,141,4.671,142,4.671,231,3.24,241,2.977,245,4.474,246,4.474,247,4.11,248,2.977,249,4.848,250,2.704,251,2.704,253,2.486,262,2.977,266,4.474,267,2.891,268,5.994,269,5.994,327,1.683,374,1.592,563,0.953,697,2.012,704,2.874,705,1.431,713,2.874,714,1.358,715,1.29,809,3.344,1086,3.344,1103,2.704,1105,3.899,1106,3.344,1107,5.218,1108,3.899,1109,5.218,1110,3.899]],["title/miscellaneous/variables.html",[757,3.354,1103,2.111]],["body/miscellaneous/variables.html",[0,0.501,2,2.005,3,0.101,20,0.565,25,0.061,31,1.79,42,0.02,44,1.312,46,1.79,47,2.902,48,1.547,50,2.278,51,2.166,55,1.089,57,0.446,58,0.398,89,0.572,93,0.565,96,1.37,98,1.183,100,0.565,106,0.565,110,0.565,114,0.565,119,0.007,120,0.007,123,1.185,124,1.947,125,0.307,132,1.465,138,3.072,168,2.064,172,1.089,175,3.605,177,1.97,178,1.304,179,1.245,195,1.304,196,1.947,198,1.465,251,1.947,259,1.844,270,2.209,274,2.24,275,0.828,283,1.547,284,1.691,285,1.03,299,1.811,302,1.304,303,2.479,307,2.521,318,2.538,327,1.212,374,0.698,378,3.551,396,1.304,400,2.447,425,2.479,434,1.465,451,2.408,479,1.304,480,3.506,486,2.24,487,2.973,503,2.703,505,1.947,512,2.73,515,1.465,522,3.162,533,2.112,537,4.325,541,1.79,550,1.304,557,1.185,560,3.765,561,4.185,563,1.415,579,1.947,591,2.479,600,1.947,602,2.917,629,1.947,635,3.605,637,2.479,677,1.185,678,1.304,679,2.144,680,1.362,681,1.465,682,2.144,683,3.162,684,3.162,685,3.605,686,2.144,687,2.73,688,2.872,689,3.494,690,3.494,691,1.465,692,1.465,693,1.465,694,1.465,695,1.465,699,1.97,705,1.805,717,1.304,718,2.144,757,1.304,834,1.304,849,2.281,851,0.828,855,1.009,875,1.304,915,3.162,926,2.479,930,1.947,934,1.947,959,1.304,960,1.465,961,2.144,962,2.73,963,1.465,964,2.408,965,2.408,966,1.465,967,1.465,973,1.465,975,2.408,977,1.465,978,2.408,979,1.465,980,1.465,990,1.465,994,1.465,995,2.408,996,1.465,997,2.408,998,2.408,1003,1.465,1004,2.408,1018,1.465,1019,1.465,1039,2.408,1044,1.304,1083,2.408,1103,1.185,1106,1.465,1111,1.708,1112,4.576,1113,3.576,1114,1.708,1115,2.808,1116,2.808,1117,2.808,1118,1.708,1119,3.576,1120,2.808,1121,1.708,1122,1.708,1123,3.576,1124,1.708,1125,3.576,1126,5.43,1127,1.708,1128,1.708,1129,1.708,1130,1.708,1131,1.708,1132,1.708,1133,2.808,1134,1.708,1135,1.708,1136,2.808,1137,5.43,1138,5.199,1139,4.141,1140,4.576,1141,1.708,1142,3.576,1143,1.708,1144,1.708,1145,2.808,1146,3.576,1147,1.708,1148,1.708,1149,3.576,1150,2.808,1151,1.708,1152,4.92,1153,2.808,1154,2.808,1155,2.808,1156,2.808,1157,2.808,1158,2.808,1159,1.708,1160,2.808,1161,1.708,1162,4.141,1163,1.708,1164,1.708,1165,1.708,1166,1.708,1167,1.708,1168,1.708,1169,1.708,1170,1.708,1171,1.708,1172,5.43,1173,1.708,1174,1.708,1175,1.708,1176,1.708,1177,1.708,1178,2.808,1179,1.708]]],"invertedIndex":[["",{"_index":42,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":65,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CityComponent.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1102,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":650,"title":{},"body":{"injectables/DashboardService.html":{},"components/StarRatingComponent.html":{}}}],["1/1",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":984,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":338,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"coverage.html":{}}}],["11",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["11/15",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":1064,"title":{},"body":{"index.html":{}}}],["13",{"_index":1101,"title":{},"body":{"overview.html":{}}}],["14/14",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["17.2.0",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["17.3.0",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["17.3.5",{"_index":1045,"title":{},"body":{"index.html":{}}}],["2",{"_index":391,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["2.3.0",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["2/4",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":640,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["24",{"_index":674,"title":{},"body":{"injectables/DashboardService.html":{},"overview.html":{}}}],["25",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":372,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["3/3",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["31",{"_index":647,"title":{},"body":{"injectables/DashboardService.html":{}}}],["33",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":657,"title":{},"body":{"injectables/DashboardService.html":{},"components/StarRatingComponent.html":{}}}],["4/5",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":228,"title":{},"body":{"components/BarChartComponent.html":{}}}],["5",{"_index":229,"title":{},"body":{"components/BarChartComponent.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/StarRatingComponent.html":{}}}],["5.3.3",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":171,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["53",{"_index":672,"title":{},"body":{"injectables/DashboardService.html":{}}}],["55",{"_index":670,"title":{},"body":{"injectables/DashboardService.html":{}}}],["6",{"_index":660,"title":{},"body":{"injectables/DashboardService.html":{}}}],["6/6",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":663,"title":{},"body":{"injectables/DashboardService.html":{}}}],["7.8.0",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":226,"title":{},"body":{"components/BarChartComponent.html":{},"injectables/DashboardService.html":{}}}],["7000",{"_index":132,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/variables.html":{}}}],["71",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":671,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["75",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":665,"title":{},"body":{"injectables/DashboardService.html":{},"overview.html":{}}}],["8/8",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":675,"title":{},"body":{"injectables/DashboardService.html":{}}}],["85",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["89",{"_index":673,"title":{},"body":{"injectables/DashboardService.html":{}}}],["9",{"_index":667,"title":{},"body":{"injectables/DashboardService.html":{}}}],["9733",{"_index":905,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["access",{"_index":834,"title":{},"body":{"injectables/LoginGuard.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["account",{"_index":807,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["action",{"_index":561,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":567,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserEffects.html":{}}}],["actual_component",{"_index":118,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["address",{"_index":298,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["alert",{"_index":14,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"miscellaneous/typealiases.html":{}}}],["alertpopupcomponent",{"_index":1,"title":{"components/AlertPopupComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["alertpopupconfig",{"_index":27,"title":{"interfaces/AlertPopupConfig.html":{}},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"coverage.html":{}}}],["alertpopupconfig().label",{"_index":82,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["alertpopupservice",{"_index":28,"title":{"injectables/AlertPopupService.html":{}},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{},"coverage.html":{}}}],["alertpopupsubject",{"_index":147,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{}}}],["alertpopuptype",{"_index":129,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/typealiases.html":{}}}],["alerttype",{"_index":126,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/FormComponent.html":{}}}],["aliases",{"_index":1105,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":833,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["allowing",{"_index":841,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["angeles",{"_index":654,"title":{},"body":{"injectables/DashboardService.html":{}}}],["angular",{"_index":1042,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":201,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":633,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["angular/compiler",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":71,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":202,"title":{},"body":{"components/AppComponent.html":{},"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":203,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{},"dependencies.html":{}}}],["api",{"_index":1083,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":18,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["app.component.html",{"_index":180,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":181,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":91,"title":{"components/AppComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":975,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":175,"title":{},"body":{"components/AppComponent.html":{},"interfaces/UserState.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applicationconfig",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":512,"title":{},"body":{"components/DashboardComponent.html":{},"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["artifacts",{"_index":1072,"title":{},"body":{"index.html":{}}}],["assets",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/yanchware_logo.svg",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/yanchwarego_logo.svg",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assets/images/yanchwarego_mini_logo.svg",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":1056,"title":{},"body":{"index.html":{}}}],["averagetemperature",{"_index":300,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["back",{"_index":406,"title":{},"body":{"components/CityComponent.html":{}}}],["backgroundsrc",{"_index":709,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["bar",{"_index":94,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["bar__orange",{"_index":227,"title":{},"body":{"components/BarChartComponent.html":{}}}],["barchartcomponent",{"_index":93,"title":{"components/BarChartComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":1154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":325,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardEffects.html":{}}}],["baseurl",{"_index":1156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":840,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["between",{"_index":433,"title":{},"body":{"components/CityComponent.html":{}}}],["bg",{"_index":268,"title":{},"body":{"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["boolean",{"_index":130,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"injectables/LoginGuard.html":{}}}],["bootstrap",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["border",{"_index":269,"title":{},"body":{"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["boston",{"_index":668,"title":{},"body":{"injectables/DashboardService.html":{}}}],["break",{"_index":554,"title":{},"body":{"components/DashboardComponent.html":{}}}],["browser",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["btn",{"_index":247,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"miscellaneous/typealiases.html":{}}}],["build",{"_index":1071,"title":{},"body":{"index.html":{}}}],["button",{"_index":231,"title":{},"body":{"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/NavBarComponent.html":{},"miscellaneous/typealiases.html":{}}}],["button'},{'name",{"_index":97,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["button.component.html",{"_index":232,"title":{},"body":{"components/ButtonComponent.html":{}}}],["button.component.scss",{"_index":233,"title":{},"body":{"components/ButtonComponent.html":{}}}],["button.id",{"_index":549,"title":{},"body":{"components/DashboardComponent.html":{}}}],["button.model",{"_index":702,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/NavbarConfig.html":{},"interfaces/TitleFormModel.html":{}}}],["button/button.component",{"_index":755,"title":{},"body":{"components/FormComponent.html":{},"components/NavBarComponent.html":{}}}],["buttonclasstype",{"_index":245,"title":{},"body":{"interfaces/ButtonConfig.html":{},"miscellaneous/typealiases.html":{}}}],["buttoncomponent",{"_index":96,"title":{"components/ButtonComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buttonconfig",{"_index":234,"title":{"interfaces/ButtonConfig.html":{}},"body":{"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["buttonconfig().label",{"_index":240,"title":{},"body":{"components/ButtonComponent.html":{}}}],["buttonelement",{"_index":310,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{}}}],["buttonelements",{"_index":707,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["buttonlogoutconfig",{"_index":483,"title":{},"body":{"components/DashboardComponent.html":{}}}],["buttonsnavbar",{"_index":484,"title":{},"body":{"components/DashboardComponent.html":{}}}],["buttonsnavbarend",{"_index":527,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["buttonsnavbarstart",{"_index":525,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["buttontype",{"_index":246,"title":{},"body":{"interfaces/ButtonConfig.html":{},"miscellaneous/typealiases.html":{}}}],["c",{"_index":471,"title":{},"body":{"components/CityComponent.html":{}}}],["called",{"_index":332,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["canactivate",{"_index":829,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["card",{"_index":253,"title":{},"body":{"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["card'},{'name",{"_index":99,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["card.component.html",{"_index":254,"title":{},"body":{"components/CardComponent.html":{}}}],["card.component.scss",{"_index":255,"title":{},"body":{"components/CardComponent.html":{}}}],["card/card.component",{"_index":756,"title":{},"body":{"components/FormComponent.html":{}}}],["cardbodycustomclass",{"_index":264,"title":{},"body":{"interfaces/CardConfig.html":{},"components/FormComponent.html":{}}}],["cardcomponent",{"_index":98,"title":{"components/CardComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cardconfig",{"_index":260,"title":{"interfaces/CardConfig.html":{}},"body":{"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"coverage.html":{}}}],["cardcustomclass",{"_index":265,"title":{},"body":{"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["cardmodel",{"_index":256,"title":{},"body":{"components/CardComponent.html":{},"components/FormComponent.html":{}}}],["cardtype",{"_index":266,"title":{},"body":{"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["case",{"_index":552,"title":{},"body":{"components/DashboardComponent.html":{}}}],["catcherror",{"_index":595,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["catcherror((error",{"_index":580,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["certain",{"_index":67,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["change",{"_index":1058,"title":{},"body":{"index.html":{}}}],["changes",{"_index":734,"title":{},"body":{"components/FormComponent.html":{}}}],["chart",{"_index":214,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart'},{'name",{"_index":95,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["chart.component",{"_index":455,"title":{},"body":{"components/CityComponent.html":{}}}],["chart.component.html",{"_index":215,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.scss",{"_index":216,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts",{"_index":213,"title":{},"body":{"components/BarChartComponent.html":{},"coverage.html":{}}}],["chart.component.ts:19",{"_index":223,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:25",{"_index":224,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart.component.ts:30",{"_index":218,"title":{},"body":{"components/BarChartComponent.html":{}}}],["chart/bar",{"_index":212,"title":{},"body":{"components/BarChartComponent.html":{},"components/CityComponent.html":{},"coverage.html":{}}}],["checks",{"_index":839,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["chicago",{"_index":658,"title":{},"body":{"injectables/DashboardService.html":{}}}],["choose",{"_index":365,"title":{},"body":{"components/CitiesComponent.html":{},"index.html":{}}}],["cities",{"_index":270,"title":{"interfaces/Cities.html":{}},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cities'},{'name",{"_index":101,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["cities(getcitiespayload",{"_index":604,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["cities.component.html",{"_index":308,"title":{},"body":{"components/CitiesComponent.html":{}}}],["cities.component.scss",{"_index":309,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citiescomponent",{"_index":100,"title":{"components/CitiesComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["citieslist",{"_index":311,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citieslistfiltered",{"_index":312,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citiessuccess",{"_index":591,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["city",{"_index":274,"title":{"interfaces/City.html":{}},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["city'},{'name",{"_index":103,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["city().cityid",{"_index":463,"title":{},"body":{"components/CityComponent.html":{}}}],["city().climate",{"_index":467,"title":{},"body":{"components/CityComponent.html":{}}}],["city().climate.averagetemperature",{"_index":470,"title":{},"body":{"components/CityComponent.html":{}}}],["city().climate.rainfall",{"_index":472,"title":{},"body":{"components/CityComponent.html":{}}}],["city().country",{"_index":465,"title":{},"body":{"components/CityComponent.html":{}}}],["city().coworkingspaces",{"_index":474,"title":{},"body":{"components/CityComponent.html":{}}}],["city().internetspeed",{"_index":466,"title":{},"body":{"components/CityComponent.html":{}}}],["city().name",{"_index":464,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.html",{"_index":398,"title":{},"body":{"components/CityComponent.html":{}}}],["city.component.scss",{"_index":399,"title":{},"body":{"components/CityComponent.html":{}}}],["city.country",{"_index":394,"title":{},"body":{"components/CitiesComponent.html":{}}}],["city.name",{"_index":393,"title":{},"body":{"components/CitiesComponent.html":{}}}],["city.name.tolowercase().includes(this.cityfiltername().tolowercase",{"_index":355,"title":{},"body":{"components/CitiesComponent.html":{}}}],["citycomponent",{"_index":102,"title":{"components/CityComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["cityfiltername",{"_index":313,"title":{},"body":{"components/CitiesComponent.html":{}}}],["cityid",{"_index":276,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["cityinforesponse",{"_index":285,"title":{"interfaces/CityInfoResponse.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":62,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/typealiases.html":{}}}],["classbuttontype",{"_index":242,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["cleanup",{"_index":493,"title":{},"body":{"components/DashboardComponent.html":{}}}],["clearinterval(this.timer",{"_index":173,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["cleartimeout(this.timer",{"_index":81,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["cli",{"_index":1043,"title":{},"body":{"index.html":{}}}],["click",{"_index":502,"title":{},"body":{"components/DashboardComponent.html":{}}}],["clicked",{"_index":880,"title":{},"body":{"components/NavBarComponent.html":{}}}],["climate",{"_index":291,"title":{"interfaces/Climate.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["collection",{"_index":272,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["command",{"_index":1087,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":177,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["compodoc",{"_index":1067,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["component's",{"_index":363,"title":{},"body":{"components/CitiesComponent.html":{}}}],["component_template",{"_index":88,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["computed",{"_index":349,"title":{},"body":{"components/CitiesComponent.html":{},"components/DashboardComponent.html":{}}}],["config",{"_index":258,"title":{},"body":{"components/CardComponent.html":{}}}],["configuration",{"_index":44,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"miscellaneous/variables.html":{}}}],["configurations",{"_index":161,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/DashboardComponent.html":{}}}],["confirm",{"_index":891,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["console.log('error",{"_index":584,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["console.log('form",{"_index":774,"title":{},"body":{"components/FormComponent.html":{}}}],["console.log('token",{"_index":818,"title":{},"body":{"components/LoginComponent.html":{}}}],["const",{"_index":131,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"injectables/UserEffects.html":{},"interfaces/UserState.html":{}}}],["constant",{"_index":377,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["constants/endpoints",{"_index":867,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["constants/images",{"_index":822,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["constants/route",{"_index":821,"title":{},"body":{"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["constructor(http",{"_index":623,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["constructor(private",{"_index":617,"title":{},"body":{"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["constructor(router",{"_index":830,"title":{},"body":{"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{}}}],["constructor(store",{"_index":601,"title":{},"body":{"injectables/DashboardFacade.html":{},"injectables/UserFacade.html":{}}}],["consult",{"_index":1070,"title":{},"body":{"index.html":{}}}],["containing",{"_index":629,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":515,"title":{},"body":{"components/DashboardComponent.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":163,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/FormComponent.html":{}}}],["core/components/cities/cities.component",{"_index":547,"title":{},"body":{"components/DashboardComponent.html":{}}}],["core/models/dashboard.model",{"_index":634,"title":{},"body":{"injectables/DashboardService.html":{}}}],["core/models/user.model",{"_index":865,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["core/store/user/user.facade",{"_index":545,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["core/store/user/user.reducer",{"_index":546,"title":{},"body":{"components/DashboardComponent.html":{}}}],["costoflivingindex",{"_index":286,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["count",{"_index":273,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["country",{"_index":277,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["coverage",{"_index":968,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coworking",{"_index":296,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["coworkingspace",{"_index":289,"title":{"interfaces/CoworkingSpace.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["coworkingspace.address",{"_index":477,"title":{},"body":{"components/CityComponent.html":{}}}],["coworkingspace.name",{"_index":476,"title":{},"body":{"components/CityComponent.html":{}}}],["coworkingspaces",{"_index":288,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["create",{"_index":808,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["createaction('[city",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createaction('[dashboard",{"_index":1136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createaction('[user",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createeffect",{"_index":572,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["createfeatureselector(dashboardfeaturekey",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createfeatureselector(userfeaturekey",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createreducer",{"_index":679,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["createselector(getdashboardfeature",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createselector(getuserfeature",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creator",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["css",{"_index":61,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["current",{"_index":689,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":60,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/ButtonComponent.html":{},"components/FormComponent.html":{}}}],["customclass",{"_index":29,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["danger",{"_index":139,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/FormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["dark",{"_index":142,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["dashboard",{"_index":480,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserEffects.html":{},"miscellaneous/variables.html":{}}}],["dashboard'},{'name",{"_index":105,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["dashboard.actions",{"_index":597,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{}}}],["dashboard.component.html",{"_index":481,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.component.scss",{"_index":482,"title":{},"body":{"components/DashboardComponent.html":{}}}],["dashboard.selectors",{"_index":616,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["dashboardcomponent",{"_index":104,"title":{"components/DashboardComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["dashboardeffects",{"_index":557,"title":{"injectables/DashboardEffects.html":{}},"body":{"injectables/DashboardEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardfacade",{"_index":314,"title":{"injectables/DashboardFacade.html":{}},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"injectables/DashboardFacade.html":{},"coverage.html":{}}}],["dashboardfeaturekey",{"_index":682,"title":{},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardreducer",{"_index":687,"title":{},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dashboardservice",{"_index":562,"title":{"injectables/DashboardService.html":{}},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"coverage.html":{}}}],["dashboardstate",{"_index":677,"title":{"interfaces/DashboardState.html":{}},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":299,"title":{},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"injectables/LoginRegisterService.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"miscellaneous/variables.html":{}}}],["decoration",{"_index":506,"title":{},"body":{"components/DashboardComponent.html":{}}}],["default",{"_index":50,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":36,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/FormOutputModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["defines",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":936,"title":{"dependencies.html":{}},"body":{"injectables/UserEffects.html":{},"dependencies.html":{}}}],["description",{"_index":12,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["destination",{"_index":367,"title":{},"body":{"components/CitiesComponent.html":{}}}],["destroy",{"_index":315,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["destroyed",{"_index":333,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["destruction",{"_index":414,"title":{},"body":{"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["detailed",{"_index":631,"title":{},"body":{"injectables/DashboardService.html":{}}}],["determines",{"_index":219,"title":{},"body":{"components/BarChartComponent.html":{},"injectables/LoginGuard.html":{}}}],["dev",{"_index":1053,"title":{},"body":{"index.html":{}}}],["development",{"_index":1046,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["direct",{"_index":1091,"title":{},"body":{"index.html":{}}}],["directive",{"_index":86,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["directives",{"_index":117,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["directory",{"_index":1075,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":238,"title":{},"body":{"components/ButtonComponent.html":{}}}],["dispatched",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatches",{"_index":587,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserFacade.html":{}}}],["displayed",{"_index":220,"title":{},"body":{"components/BarChartComponent.html":{}}}],["displaying",{"_index":13,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["dist",{"_index":1074,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":969,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["don’t",{"_index":806,"title":{},"body":{"components/LoginComponent.html":{}}}],["download",{"_index":294,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["duration",{"_index":68,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["dynamic",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":514,"title":{},"body":{"components/DashboardComponent.html":{}}}],["effect",{"_index":586,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["effects",{"_index":559,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["element",{"_index":85,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["element)[0",{"_index":444,"title":{},"body":{"components/CityComponent.html":{}}}],["email",{"_index":714,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"miscellaneous/typealiases.html":{}}}],["emit",{"_index":160,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["emits",{"_index":415,"title":{},"body":{"components/CityComponent.html":{},"components/FormComponent.html":{},"injectables/LoginRegisterService.html":{}}}],["emitted",{"_index":731,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{}}}],["empty",{"_index":694,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["endpoint",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoints",{"_index":637,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":635,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environments/environment",{"_index":866,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["error",{"_index":582,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["errors",{"_index":773,"title":{},"body":{"components/FormComponent.html":{}}}],["event",{"_index":437,"title":{},"body":{"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{}}}],["event.urlafterredirects",{"_index":441,"title":{},"body":{"components/CityComponent.html":{}}}],["events",{"_index":447,"title":{},"body":{"components/CityComponent.html":{}}}],["execute",{"_index":1079,"title":{},"body":{"index.html":{}}}],["explore",{"_index":336,"title":{},"body":{"components/CitiesComponent.html":{}}}],["export",{"_index":77,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["extracts",{"_index":450,"title":{},"body":{"components/CityComponent.html":{}}}],["facade",{"_index":599,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["false",{"_index":172,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"injectables/LoginGuard.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":560,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["feel",{"_index":1096,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":606,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["fetching",{"_index":608,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{}}}],["files",{"_index":1059,"title":{},"body":{"index.html":{}}}],["filter",{"_index":208,"title":{},"body":{"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{}}}],["filter((city",{"_index":418,"title":{},"body":{"components/CityComponent.html":{}}}],["filter((event",{"_index":436,"title":{},"body":{"components/CityComponent.html":{}}}],["filter(boolean",{"_index":188,"title":{},"body":{"components/AppComponent.html":{}}}],["filtercities",{"_index":319,"title":{},"body":{"components/CitiesComponent.html":{}}}],["filtercities(searchcity",{"_index":322,"title":{},"body":{"components/CitiesComponent.html":{}}}],["filtered",{"_index":357,"title":{},"body":{"components/CitiesComponent.html":{}}}],["filters",{"_index":324,"title":{},"body":{"components/CitiesComponent.html":{}}}],["fixme",{"_index":642,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["follow",{"_index":1092,"title":{},"body":{"index.html":{}}}],["following",{"_index":1086,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["footer",{"_index":698,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["footerlogo",{"_index":712,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["footerlogomodel",{"_index":696,"title":{"interfaces/FooterLogoModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["footertext",{"_index":710,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["footertextmodel",{"_index":711,"title":{"interfaces/FooterTextModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["for(button",{"_index":884,"title":{},"body":{"components/NavBarComponent.html":{}}}],["for(inputelement",{"_index":782,"title":{},"body":{"components/FormComponent.html":{}}}],["form",{"_index":374,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["form'},{'name",{"_index":107,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["form.component.html",{"_index":719,"title":{},"body":{"components/FormComponent.html":{}}}],["form.component.scss",{"_index":720,"title":{},"body":{"components/FormComponent.html":{}}}],["form__card",{"_index":744,"title":{},"body":{"components/FormComponent.html":{}}}],["formbuilder",{"_index":722,"title":{},"body":{"components/FormComponent.html":{}}}],["formcomponent",{"_index":106,"title":{"components/FormComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["formcontrol",{"_index":739,"title":{},"body":{"components/FormComponent.html":{}}}],["formgroup",{"_index":746,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel",{"_index":316,"title":{"interfaces/FormModel.html":{}},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["formmodel().buttonelements",{"_index":787,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().footerlogo?.label",{"_index":792,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().footertext?.labellink",{"_index":790,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().footertext?.text",{"_index":789,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().inputelements",{"_index":783,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().title?.label",{"_index":781,"title":{},"body":{"components/FormComponent.html":{}}}],["formmodel().type",{"_index":786,"title":{},"body":{"components/FormComponent.html":{}}}],["formoutputmodel",{"_index":703,"title":{"interfaces/FormOutputModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["formoutputmodel['email",{"_index":825,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["formoutputmodel['name",{"_index":899,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["formoutputmodel['password",{"_index":826,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["formoutputmodel['surname",{"_index":900,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["found",{"_index":395,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["francisco",{"_index":656,"title":{},"body":{"injectables/DashboardService.html":{}}}],["free",{"_index":1097,"title":{},"body":{"index.html":{}}}],["function",{"_index":686,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["functionality",{"_index":571,"title":{},"body":{"injectables/DashboardEffects.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{}}}],["g",{"_index":1088,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1066,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1041,"title":{},"body":{"index.html":{}}}],["getcities",{"_index":622,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getcities(getcitiespayload",{"_index":589,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["getcities(undefined",{"_index":627,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getcitiespayload",{"_index":280,"title":{"interfaces/GetCitiesPayload.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["getcity",{"_index":400,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcity(cityid",{"_index":577,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{}}}],["getcitysuccess",{"_index":579,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getdashboardfeature",{"_index":995,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":279,"title":{"index.html":{}},"body":{"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["getuserfeature",{"_index":1004,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":741,"title":{},"body":{"components/FormComponent.html":{}}}],["globally",{"_index":1085,"title":{},"body":{"index.html":{}}}],["go",{"_index":199,"title":{},"body":{"components/AppComponent.html":{},"components/CityComponent.html":{}}}],["guard",{"_index":838,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["h",{"_index":408,"title":{},"body":{"components/CityComponent.html":{}}}],["handle",{"_index":581,"title":{},"body":{"injectables/DashboardEffects.html":{},"components/FormComponent.html":{}}}],["handles",{"_index":501,"title":{},"body":{"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["handling",{"_index":570,"title":{},"body":{"injectables/DashboardEffects.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{}}}],["hardcoded",{"_index":644,"title":{},"body":{"injectables/DashboardService.html":{}}}],["here",{"_index":583,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["hide",{"_index":40,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["hides",{"_index":150,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["homepage",{"_index":510,"title":{},"body":{"components/DashboardComponent.html":{}}}],["hook",{"_index":331,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["html",{"_index":84,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["http",{"_index":626,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["http://localhost:1234",{"_index":1157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200",{"_index":1055,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":624,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/LoginRegisterService.html":{}}}],["id",{"_index":243,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["identifier",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":681,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["if(formmodel().backgroundsrc",{"_index":778,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().footerlogo",{"_index":791,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().footertext",{"_index":788,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().logosrc",{"_index":779,"title":{},"body":{"components/FormComponent.html":{}}}],["if(formmodel().title",{"_index":780,"title":{},"body":{"components/FormComponent.html":{}}}],["if(isvisible",{"_index":210,"title":{},"body":{"components/AppComponent.html":{}}}],["if(navbarconfig().imglogo",{"_index":882,"title":{},"body":{"components/NavBarComponent.html":{}}}],["image",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["images",{"_index":541,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["images.yanchware_logo",{"_index":812,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["images.yanchwarego_logo",{"_index":801,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["images.yanchwarego_mini_logo",{"_index":524,"title":{},"body":{"components/DashboardComponent.html":{}}}],["imglogo",{"_index":523,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["implements",{"_index":304,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{}}}],["import",{"_index":69,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["imports",{"_index":76,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["include",{"_index":135,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/typealiases.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":793,"title":{},"body":{"interfaces/FormOutputModel.html":{}}}],["indicate",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicates",{"_index":195,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":284,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["initial",{"_index":683,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["initialized",{"_index":335,"title":{},"body":{"components/CitiesComponent.html":{}}}],["initializes",{"_index":38,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["initialstate",{"_index":685,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initiate",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":53,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["inject(actions",{"_index":564,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["inject(alertpopupservice",{"_index":52,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{}}}],["inject(dashboardfacade",{"_index":359,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["inject(dashboardservice",{"_index":568,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["inject(formbuilder",{"_index":748,"title":{},"body":{"components/FormComponent.html":{}}}],["inject(loginregisterservice",{"_index":814,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["inject(router",{"_index":430,"title":{},"body":{"components/CityComponent.html":{}}}],["inject(userfacade",{"_index":539,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["injectable",{"_index":143,"title":{"injectables/AlertPopupService.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}},"body":{"injectables/AlertPopupService.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["injectables",{"_index":144,"title":{},"body":{"injectables/AlertPopupService.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"overview.html":{}}}],["input",{"_index":70,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["input(false",{"_index":225,"title":{},"body":{"components/BarChartComponent.html":{},"components/ButtonComponent.html":{}}}],["input.inputvalidator",{"_index":762,"title":{},"body":{"components/FormComponent.html":{}}}],["input.label.tolowercase().trim",{"_index":760,"title":{},"body":{"components/FormComponent.html":{}}}],["input.required",{"_index":78,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["inputelement",{"_index":784,"title":{},"body":{"components/FormComponent.html":{}}}],["inputelement.label",{"_index":785,"title":{},"body":{"components/FormComponent.html":{}}}],["inputelements",{"_index":364,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["inputformmodel",{"_index":706,"title":{"interfaces/InputFormModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["inputformtype",{"_index":713,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["inputs",{"_index":34,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["inputtype",{"_index":368,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["inputvalidator",{"_index":369,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["install",{"_index":1084,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":438,"title":{},"body":{"components/CityComponent.html":{}}}],["interface",{"_index":121,"title":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{}},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"coverage.html":{}}}],["interfaces",{"_index":122,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"overview.html":{}}}],["internet",{"_index":292,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["internetspeed",{"_index":287,"title":{"interfaces/InternetSpeed.html":{}},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["invalid",{"_index":775,"title":{},"body":{"components/FormComponent.html":{}}}],["isdisabled",{"_index":235,"title":{},"body":{"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{}}}],["isreverse",{"_index":217,"title":{},"body":{"components/BarChartComponent.html":{}}}],["isvisible",{"_index":127,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{}}}],["it's",{"_index":1062,"title":{},"body":{"index.html":{}}}],["json",{"_index":478,"title":{},"body":{"components/CityComponent.html":{}}}],["karma",{"_index":1081,"title":{},"body":{"index.html":{}}}],["key",{"_index":680,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["label",{"_index":128,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/BarChartComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["labellink",{"_index":716,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["las",{"_index":661,"title":{},"body":{"injectables/DashboardService.html":{}}}],["launch",{"_index":1090,"title":{},"body":{"index.html":{}}}],["legend",{"_index":83,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["lifecycle",{"_index":330,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["light",{"_index":141,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["limit",{"_index":281,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["line",{"_index":646,"title":{},"body":{"injectables/DashboardService.html":{}}}],["link",{"_index":248,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/DashboardComponent.html":{},"miscellaneous/typealiases.html":{}}}],["list",{"_index":303,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["listens",{"_index":449,"title":{},"body":{"components/CityComponent.html":{}}}],["local",{"_index":1069,"title":{},"body":{"index.html":{}}}],["localstorage",{"_index":916,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.getitem('name",{"_index":520,"title":{},"body":{"components/DashboardComponent.html":{}}}],["localstorage.getitem('token",{"_index":842,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["localstorage.removeitem('name",{"_index":943,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.removeitem('token",{"_index":942,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.setitem('name",{"_index":939,"title":{},"body":{"injectables/UserEffects.html":{}}}],["localstorage.setitem('token",{"_index":937,"title":{},"body":{"injectables/UserEffects.html":{}}}],["log",{"_index":504,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["logged",{"_index":835,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["logging",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":494,"title":{},"body":{"components/DashboardComponent.html":{}}}],["login",{"_index":563,"title":{},"body":{"injectables/DashboardEffects.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["login'},{'name",{"_index":109,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["login(loginpayload",{"_index":859,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["login(payload",{"_index":946,"title":{},"body":{"injectables/UserFacade.html":{}}}],["login.component.html",{"_index":796,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":797,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":108,"title":{"components/LoginComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["loginguard",{"_index":827,"title":{"injectables/LoginGuard.html":{}},"body":{"injectables/LoginGuard.html":{},"coverage.html":{}}}],["loginpayload",{"_index":845,"title":{"interfaces/LoginPayload.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["loginpayload.email.replace",{"_index":871,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["loginregisterservice",{"_index":798,"title":{"injectables/LoginRegisterService.html":{}},"body":{"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["loginresponse",{"_index":850,"title":{"interfaces/LoginResponse.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["loginsuccess",{"_index":934,"title":{},"body":{"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loginsuccess({response",{"_index":922,"title":{},"body":{"injectables/UserEffects.html":{}}}],["logo",{"_index":699,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/variables.html":{}}}],["logosrc",{"_index":700,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["logout",{"_index":503,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logoutsuccess",{"_index":926,"title":{},"body":{"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logs",{"_index":550,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["los",{"_index":653,"title":{},"body":{"injectables/DashboardService.html":{}}}],["managing",{"_index":55,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/CitiesComponent.html":{},"injectables/DashboardFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":460,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["map((cities",{"_index":590,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["map((city",{"_index":578,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["map((event",{"_index":440,"title":{},"body":{"components/CityComponent.html":{}}}],["match",{"_index":770,"title":{},"body":{"components/FormComponent.html":{}}}],["matching",{"_index":120,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":639,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mb",{"_index":371,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["metadata",{"_index":16,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["methods",{"_index":32,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["miami",{"_index":659,"title":{},"body":{"injectables/DashboardService.html":{}}}],["mini",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":1103,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":767,"title":{},"body":{"components/FormComponent.html":{}}}],["mm",{"_index":473,"title":{},"body":{"components/CityComponent.html":{}}}],["mock",{"_index":868,"title":{},"body":{"injectables/LoginRegisterService.html":{},"index.html":{}}}],["mocker",{"_index":1061,"title":{},"body":{"index.html":{}}}],["mockresponse",{"_index":870,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["mode",{"_index":1153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":375,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["models/alert",{"_index":72,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["models/button.model",{"_index":239,"title":{},"body":{"components/ButtonComponent.html":{},"components/NavBarComponent.html":{}}}],["models/card.model",{"_index":261,"title":{},"body":{"components/CardComponent.html":{},"components/FormComponent.html":{}}}],["models/dashboard.model",{"_index":387,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{}}}],["models/form.model",{"_index":754,"title":{},"body":{"components/FormComponent.html":{}}}],["models/navbar.model",{"_index":881,"title":{},"body":{"components/NavBarComponent.html":{}}}],["models/user.model",{"_index":932,"title":{},"body":{"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["module",{"_index":718,"title":{},"body":{"components/FormComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":307,"title":{"modules.html":{}},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"coverage.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["modules/services/dashboard.service",{"_index":596,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["modules/services/loginregisterservice.service",{"_index":933,"title":{},"body":{"injectables/UserEffects.html":{}}}],["name",{"_index":89,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["navbar",{"_index":513,"title":{},"body":{"components/DashboardComponent.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{}}}],["navbar'},{'name",{"_index":111,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["navbar.component.html",{"_index":876,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navbar.component.scss",{"_index":877,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navbarcomponent",{"_index":110,"title":{"components/NavBarComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["navbarconfig",{"_index":485,"title":{"interfaces/NavbarConfig.html":{}},"body":{"components/DashboardComponent.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"coverage.html":{}}}],["navbarconfig().buttonsnavbarend",{"_index":885,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navbarconfig().buttonsnavbarstart",{"_index":883,"title":{},"body":{"components/NavBarComponent.html":{}}}],["navigate",{"_index":1054,"title":{},"body":{"index.html":{}}}],["navigating",{"_index":432,"title":{},"body":{"components/CityComponent.html":{}}}],["navigation",{"_index":448,"title":{},"body":{"components/CityComponent.html":{},"components/NavBarComponent.html":{}}}],["navigationend",{"_index":439,"title":{},"body":{"components/CityComponent.html":{}}}],["necessary",{"_index":492,"title":{},"body":{"components/DashboardComponent.html":{}}}],["needs",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":158,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"coverage.html":{}}}],["next",{"_index":366,"title":{},"body":{"components/CitiesComponent.html":{}}}],["ng",{"_index":1049,"title":{},"body":{"index.html":{}}}],["ngondestroy",{"_index":320,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["ngoninit",{"_index":321,"title":{},"body":{"components/CitiesComponent.html":{},"components/FormComponent.html":{}}}],["ngrx/effects",{"_index":594,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":615,"title":{},"body":{"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"dependencies.html":{}}}],["none",{"_index":507,"title":{},"body":{"components/DashboardComponent.html":{}}}],["npm",{"_index":1051,"title":{},"body":{"index.html":{}}}],["number",{"_index":275,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":259,"title":{},"body":{"components/CardComponent.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["object.keys(city).length",{"_index":420,"title":{},"body":{"components/CityComponent.html":{}}}],["observable",{"_index":427,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserFacade.html":{}}}],["observables",{"_index":405,"title":{},"body":{"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["of(mockresponse",{"_index":872,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["offset",{"_index":282,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["oftype",{"_index":593,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["oftype(cities",{"_index":588,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["oftype(getcity",{"_index":574,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["oftype(login",{"_index":918,"title":{},"body":{"injectables/UserEffects.html":{}}}],["oftype(logout",{"_index":924,"title":{},"body":{"injectables/UserEffects.html":{}}}],["oftype(register",{"_index":928,"title":{},"body":{"injectables/UserEffects.html":{}}}],["on(citiessuccess",{"_index":691,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["on(getcitysuccess",{"_index":693,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["on(loginsuccess",{"_index":963,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["on(logoutsuccess",{"_index":967,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["on(registersuccess",{"_index":966,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["on(resetcity",{"_index":695,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["onclickbutton",{"_index":489,"title":{},"body":{"components/DashboardComponent.html":{},"components/NavBarComponent.html":{}}}],["onclickbutton(button",{"_index":499,"title":{},"body":{"components/DashboardComponent.html":{}}}],["ondestroy",{"_index":306,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["one",{"_index":809,"title":{},"body":{"components/LoginComponent.html":{},"miscellaneous/typealiases.html":{}}}],["oninit",{"_index":305,"title":{},"body":{"components/CitiesComponent.html":{},"components/FormComponent.html":{}}}],["onsubmit",{"_index":726,"title":{},"body":{"components/FormComponent.html":{}}}],["onsubmitform",{"_index":723,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["onsubmitform(formoutputmodel",{"_index":799,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["open",{"_index":1082,"title":{},"body":{"index.html":{}}}],["openapi",{"_index":1060,"title":{},"body":{"index.html":{}}}],["operation",{"_index":862,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["operations",{"_index":518,"title":{},"body":{"components/DashboardComponent.html":{}}}],["optional",{"_index":156,"title":{},"body":{"injectables/AlertPopupService.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["options",{"_index":263,"title":{},"body":{"interfaces/CardConfig.html":{}}}],["order",{"_index":222,"title":{},"body":{"components/BarChartComponent.html":{}}}],["orlando",{"_index":664,"title":{},"body":{"injectables/DashboardService.html":{}}}],["otherwise",{"_index":836,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["out",{"_index":505,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":249,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"miscellaneous/typealiases.html":{}}}],["output",{"_index":753,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{}}}],["outputs",{"_index":728,"title":{},"body":{"components/FormComponent.html":{},"components/NavBarComponent.html":{}}}],["overview",{"_index":1100,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1095,"title":{},"body":{"index.html":{}}}],["package",{"_index":1022,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":912,"title":{},"body":{"injectables/UserEffects.html":{}}}],["param",{"_index":168,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["parameters",{"_index":155,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["password",{"_index":715,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"miscellaneous/typealiases.html":{}}}],["passwords",{"_index":769,"title":{},"body":{"components/FormComponent.html":{}}}],["path",{"_index":378,"title":{},"body":{"components/CitiesComponent.html":{},"miscellaneous/variables.html":{}}}],["paths",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern",{"_index":361,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{}}}],["payload",{"_index":278,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["perform",{"_index":491,"title":{},"body":{"components/DashboardComponent.html":{}}}],["performs",{"_index":861,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["pipe",{"_index":417,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{}}}],["pipe(filter(boolean",{"_index":343,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{}}}],["popup",{"_index":15,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{},"miscellaneous/typealiases.html":{}}}],["popup'},{'name",{"_index":90,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["popup.component",{"_index":205,"title":{},"body":{"components/AppComponent.html":{}}}],["popup.component.html",{"_index":22,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.scss",{"_index":24,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts",{"_index":11,"title":{},"body":{"components/AlertPopupComponent.html":{},"coverage.html":{}}}],["popup.component.ts:19",{"_index":59,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:24",{"_index":66,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:29",{"_index":43,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:35",{"_index":37,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.component.ts:49",{"_index":45,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["popup.model",{"_index":73,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{}}}],["popup.model.ts",{"_index":124,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["popup.service",{"_index":75,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/FormComponent.html":{}}}],["popup.service.ts",{"_index":146,"title":{},"body":{"injectables/AlertPopupService.html":{},"coverage.html":{}}}],["popup.service.ts:12",{"_index":162,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup.service.ts:17",{"_index":159,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup.service.ts:24",{"_index":152,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup.service.ts:34",{"_index":149,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["popup/alert",{"_index":10,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"coverage.html":{}}}],["popups",{"_index":56,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{}}}],["port",{"_index":1065,"title":{},"body":{"index.html":{}}}],["possible",{"_index":133,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"miscellaneous/typealiases.html":{}}}],["powered",{"_index":811,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["primary",{"_index":136,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"miscellaneous/typealiases.html":{}}}],["private",{"_index":30,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/UserEffects.html":{}}}],["process",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":1040,"title":{},"body":{"index.html":{}}}],["properties",{"_index":26,"title":{"properties.html":{}},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"properties.html":{}}}],["property",{"_index":352,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["props",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protected",{"_index":721,"title":{},"body":{"components/FormComponent.html":{}}}],["provided",{"_index":326,"title":{},"body":{"components/CitiesComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/UserFacade.html":{}}}],["providedin",{"_index":166,"title":{},"body":{"injectables/AlertPopupService.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserFacade.html":{}}}],["provideeffects([usereffects",{"_index":1135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient",{"_index":1132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestore",{"_index":1133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providestoredevtools",{"_index":1134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":317,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["px",{"_index":743,"title":{},"body":{"components/FormComponent.html":{}}}],["rainfall",{"_index":301,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["rating",{"_index":116,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["rating.component",{"_index":458,"title":{},"body":{"components/CityComponent.html":{}}}],["rating.component.html",{"_index":902,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["rating.component.scss",{"_index":903,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["rating.component.ts",{"_index":901,"title":{},"body":{"components/StarRatingComponent.html":{},"coverage.html":{}}}],["rating.component.ts:17",{"_index":904,"title":{},"body":{"components/StarRatingComponent.html":{}}}],["rating/star",{"_index":457,"title":{},"body":{"components/CityComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["reactive",{"_index":536,"title":{},"body":{"components/DashboardComponent.html":{}}}],["reactiveformsmodule",{"_index":178,"title":{},"body":{"components/AppComponent.html":{},"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["real",{"_index":649,"title":{},"body":{"injectables/DashboardService.html":{}}}],["received",{"_index":848,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{}}}],["receiving",{"_index":348,"title":{},"body":{"components/CitiesComponent.html":{}}}],["redirect",{"_index":837,"title":{},"body":{"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{}}}],["reducer",{"_index":684,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["redux",{"_index":960,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":705,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["register(payload",{"_index":949,"title":{},"body":{"injectables/UserFacade.html":{}}}],["register(registerpayload",{"_index":863,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["registered",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registering",{"_index":855,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"miscellaneous/variables.html":{}}}],["registerpayload",{"_index":852,"title":{"interfaces/RegisterPayload.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["registerpayload.email.replace",{"_index":874,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["registerresponse",{"_index":856,"title":{"interfaces/RegisterResponse.html":{}},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["registers",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registersuccess",{"_index":930,"title":{},"body":{"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registration",{"_index":851,"title":{},"body":{"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["registration'},{'name",{"_index":113,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["registration.component.html",{"_index":888,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["registration.component.scss",{"_index":889,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["registrationcomponent",{"_index":112,"title":{"components/RegistrationComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["related",{"_index":353,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{}}}],["releasing",{"_index":497,"title":{},"body":{"components/DashboardComponent.html":{}}}],["reload",{"_index":1057,"title":{},"body":{"index.html":{}}}],["remove",{"_index":643,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/UserEffects.html":{}}}],["removeuserdataredirect",{"_index":908,"title":{},"body":{"injectables/UserEffects.html":{}}}],["representing",{"_index":429,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/UserFacade.html":{}}}],["represents",{"_index":125,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":1155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":41,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["reset",{"_index":251,"title":{},"body":{"interfaces/ButtonConfig.html":{},"injectables/DashboardFacade.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resetcity",{"_index":600,"title":{},"body":{"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resets",{"_index":46,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/CityComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["resettimer",{"_index":33,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["resources",{"_index":498,"title":{},"body":{"components/DashboardComponent.html":{}}}],["response",{"_index":283,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["response.name",{"_index":965,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["response.token",{"_index":964,"title":{},"body":{"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["responsible",{"_index":397,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{}}}],["results",{"_index":119,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retrieve",{"_index":632,"title":{},"body":{"injectables/DashboardService.html":{}}}],["retrieved",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retrieves",{"_index":425,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":419,"title":{},"body":{"components/CityComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardService.html":{},"components/FormComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{}}}],["returned",{"_index":854,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{}}}],["returns",{"_index":48,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["returntype",{"_index":63,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["reverse",{"_index":221,"title":{},"body":{"components/BarChartComponent.html":{}}}],["root",{"_index":167,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"injectables/LoginGuard.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserFacade.html":{},"index.html":{}}}],["root'},{'name",{"_index":92,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["route",{"_index":318,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route.dashboard",{"_index":920,"title":{},"body":{"injectables/UserEffects.html":{}}}],["route.login",{"_index":894,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["route.register",{"_index":810,"title":{},"body":{"components/LoginComponent.html":{}}}],["router",{"_index":401,"title":{},"body":{"components/CityComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{}}}],["routerlink",{"_index":179,"title":{},"body":{"components/AppComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/variables.html":{}}}],["routeroutlet",{"_index":176,"title":{},"body":{"components/AppComponent.html":{}}}],["routersubscirption",{"_index":402,"title":{},"body":{"components/CityComponent.html":{}}}],["routes",{"_index":434,"title":{},"body":{"components/CityComponent.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1048,"title":{},"body":{"index.html":{}}}],["running",{"_index":1076,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":165,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"components/LoginComponent.html":{},"injectables/LoginRegisterService.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"dependencies.html":{}}}],["s",{"_index":1093,"title":{},"body":{"index.html":{}}}],["safetyindex",{"_index":290,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["san",{"_index":655,"title":{},"body":{"injectables/DashboardService.html":{}}}],["script",{"_index":1089,"title":{},"body":{"index.html":{}}}],["search",{"_index":327,"title":{},"body":{"components/CitiesComponent.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["searchcity",{"_index":328,"title":{},"body":{"components/CitiesComponent.html":{}}}],["searchformvaluechanges",{"_index":724,"title":{},"body":{"components/FormComponent.html":{}}}],["searchvaluechanges",{"_index":725,"title":{},"body":{"components/FormComponent.html":{}}}],["seattle",{"_index":666,"title":{},"body":{"injectables/DashboardService.html":{}}}],["secondary",{"_index":137,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["selector",{"_index":17,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["selects",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":1050,"title":{},"body":{"index.html":{}}}],["served",{"_index":1063,"title":{},"body":{"index.html":{}}}],["server",{"_index":1047,"title":{},"body":{"index.html":{}}}],["server/sr.frontend.challenge.yml",{"_index":1094,"title":{},"body":{"index.html":{}}}],["service",{"_index":54,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/LoginRegisterService.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{}}}],["services/alert",{"_index":74,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/FormComponent.html":{}}}],["services/loginregisterservice.service",{"_index":823,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["set",{"_index":915,"title":{},"body":{"injectables/UserEffects.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sets",{"_index":39,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/CityComponent.html":{}}}],["settimeout",{"_index":64,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["setting",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setuserdata",{"_index":997,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setuserdataredirect",{"_index":909,"title":{},"body":{"injectables/UserEffects.html":{}}}],["setuserdataredirect(userdata",{"_index":913,"title":{},"body":{"injectables/UserEffects.html":{}}}],["setuserdatasuccess",{"_index":998,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["shared/components/alert",{"_index":204,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/models/alert",{"_index":206,"title":{},"body":{"components/AppComponent.html":{}}}],["shared/services/alert",{"_index":207,"title":{},"body":{"components/AppComponent.html":{}}}],["show",{"_index":148,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{}}}],["show(alertpopupconfig",{"_index":151,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["shows",{"_index":153,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["sign",{"_index":802,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["signal",{"_index":183,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["signal(false",{"_index":193,"title":{},"body":{"components/AppComponent.html":{}}}],["signin",{"_index":805,"title":{},"body":{"components/LoginComponent.html":{}}}],["signup",{"_index":892,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["single",{"_index":692,"title":{},"body":{"interfaces/DashboardState.html":{},"miscellaneous/variables.html":{}}}],["skip",{"_index":641,"title":{},"body":{"injectables/DashboardService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CardComponent.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"components/NavBarComponent.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"index.html":{}}}],["space",{"_index":297,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["spaces",{"_index":475,"title":{},"body":{"components/CityComponent.html":{}}}],["specific",{"_index":610,"title":{},"body":{"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{}}}],["specified",{"_index":154,"title":{},"body":{"injectables/AlertPopupService.html":{},"injectables/UserEffects.html":{}}}],["specifies",{"_index":1158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speed",{"_index":293,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["src/.../alert",{"_index":1106,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../button.model.ts",{"_index":1107,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../card.model.ts",{"_index":1108,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cities.component.ts",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../city.component.ts",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.actions.ts",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.component.ts",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.reducer.ts",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dashboard.selectors.ts",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../endpoints.ts",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.prod.ts",{"_index":1121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../form.component.ts",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../form.model.ts",{"_index":1109,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../images.ts",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../navbar.component.ts",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route.ts",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.actions.ts",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.reducer.ts",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.selectors.ts",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":174,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:32",{"_index":200,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:37",{"_index":185,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:42",{"_index":184,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:47",{"_index":194,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:52",{"_index":192,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":973,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/constants/endpoints",{"_index":638,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/constants/endpoints.ts",{"_index":977,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/constants/images",{"_index":542,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/constants/images.ts",{"_index":979,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/constants/route",{"_index":380,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["src/app/constants/route.ts",{"_index":980,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/components/cities/cities.component.ts",{"_index":302,"title":{},"body":{"components/CitiesComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/components/cities/cities.component.ts:103",{"_index":347,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:112",{"_index":334,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:119",{"_index":329,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:127",{"_index":323,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:39",{"_index":340,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:44",{"_index":351,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:49",{"_index":358,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:54",{"_index":356,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:61",{"_index":373,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:77",{"_index":339,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:88",{"_index":376,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:93",{"_index":362,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/components/cities/cities.component.ts:98",{"_index":360,"title":{},"body":{"components/CitiesComponent.html":{}}}],["src/app/core/models/dashboard.model",{"_index":453,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/core/models/dashboard.model.ts",{"_index":271,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"coverage.html":{}}}],["src/app/core/models/user.model.ts",{"_index":846,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"coverage.html":{}}}],["src/app/core/store/dashboard/dashboard.actions.ts",{"_index":990,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts",{"_index":558,"title":{},"body":{"injectables/DashboardEffects.html":{},"coverage.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:16",{"_index":565,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:21",{"_index":569,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:27",{"_index":592,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.effects.ts:46",{"_index":585,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["src/app/core/store/dashboard/dashboard.facade",{"_index":454,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts",{"_index":598,"title":{},"body":{"injectables/DashboardFacade.html":{},"coverage.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:17",{"_index":613,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:22",{"_index":603,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:30",{"_index":605,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:38",{"_index":609,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.facade.ts:45",{"_index":611,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["src/app/core/store/dashboard/dashboard.reducer.ts",{"_index":678,"title":{},"body":{"interfaces/DashboardState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/dashboard/dashboard.selectors.ts",{"_index":994,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/user/user.actions.ts",{"_index":996,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/user/user.effects.ts",{"_index":907,"title":{},"body":{"injectables/UserEffects.html":{},"coverage.html":{}}}],["src/app/core/store/user/user.effects.ts:20",{"_index":917,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:21",{"_index":910,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:33",{"_index":914,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:42",{"_index":911,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:51",{"_index":923,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:69",{"_index":931,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.effects.ts:87",{"_index":927,"title":{},"body":{"injectables/UserEffects.html":{}}}],["src/app/core/store/user/user.facade.ts",{"_index":944,"title":{},"body":{"injectables/UserFacade.html":{},"coverage.html":{}}}],["src/app/core/store/user/user.facade.ts:14",{"_index":953,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:19",{"_index":945,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:27",{"_index":947,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:35",{"_index":950,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.facade.ts:42",{"_index":948,"title":{},"body":{"injectables/UserFacade.html":{}}}],["src/app/core/store/user/user.reducer.ts",{"_index":959,"title":{},"body":{"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/store/user/user.selectors.ts",{"_index":1003,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/guards/login.guard.ts",{"_index":828,"title":{},"body":{"injectables/LoginGuard.html":{},"coverage.html":{}}}],["src/app/guards/login.guard.ts:11",{"_index":831,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["src/app/guards/login.guard.ts:18",{"_index":832,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["src/app/modules/components/city/city.component.ts",{"_index":396,"title":{},"body":{"components/CityComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/modules/components/city/city.component.ts:100",{"_index":424,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:116",{"_index":403,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:33",{"_index":431,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:38",{"_index":411,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:43",{"_index":410,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:48",{"_index":428,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:53",{"_index":407,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:63",{"_index":409,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:70",{"_index":412,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:76",{"_index":413,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/city/city.component.ts:83",{"_index":446,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts",{"_index":479,"title":{},"body":{"components/DashboardComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:105",{"_index":529,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:115",{"_index":500,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:136",{"_index":490,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:37",{"_index":538,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:42",{"_index":531,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:47",{"_index":521,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:52",{"_index":540,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:58",{"_index":516,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:64",{"_index":535,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:74",{"_index":511,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/dashboard/dashboard.component.ts:94",{"_index":509,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/modules/components/login/login.component.ts",{"_index":795,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/modules/components/login/login.component.ts:26",{"_index":813,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:67",{"_index":820,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:68",{"_index":815,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:74",{"_index":819,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/login/login.component.ts:84",{"_index":800,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts",{"_index":887,"title":{},"body":{"components/RegistrationComponent.html":{},"coverage.html":{}}}],["src/app/modules/components/registration/registration.component.ts:24",{"_index":895,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts:84",{"_index":896,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts:85",{"_index":897,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/components/registration/registration.component.ts:91",{"_index":890,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["src/app/modules/services/dashboard.service.ts",{"_index":621,"title":{},"body":{"injectables/DashboardService.html":{},"coverage.html":{}}}],["src/app/modules/services/dashboard.service.ts:11",{"_index":625,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/modules/services/dashboard.service.ts:20",{"_index":628,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/modules/services/dashboard.service.ts:41",{"_index":630,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts",{"_index":857,"title":{},"body":{"injectables/LoginRegisterService.html":{},"coverage.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts:14",{"_index":858,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts:22",{"_index":860,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["src/app/modules/services/loginregisterservice.service.ts:37",{"_index":864,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["src/app/shared/components/alert",{"_index":9,"title":{},"body":{"components/AlertPopupComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/bar",{"_index":211,"title":{},"body":{"components/BarChartComponent.html":{},"components/CityComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/button/button.component",{"_index":381,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["src/app/shared/components/button/button.component.ts",{"_index":230,"title":{},"body":{"components/ButtonComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/button/button.component.ts:22",{"_index":236,"title":{},"body":{"components/ButtonComponent.html":{}}}],["src/app/shared/components/button/button.component.ts:27",{"_index":237,"title":{},"body":{"components/ButtonComponent.html":{}}}],["src/app/shared/components/card/card.component",{"_index":382,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["src/app/shared/components/card/card.component.ts",{"_index":252,"title":{},"body":{"components/CardComponent.html":{},"coverage.html":{}}}],["src/app/shared/components/card/card.component.ts:18",{"_index":257,"title":{},"body":{"components/CardComponent.html":{}}}],["src/app/shared/components/form/form.component",{"_index":383,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["src/app/shared/components/form/form.component.ts",{"_index":717,"title":{},"body":{"components/FormComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/components/form/form.component.ts:120",{"_index":740,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:42",{"_index":747,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:47",{"_index":745,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:55",{"_index":729,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:61",{"_index":730,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:66",{"_index":733,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:69",{"_index":749,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:70",{"_index":742,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:76",{"_index":752,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:80",{"_index":735,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/form/form.component.ts:92",{"_index":736,"title":{},"body":{"components/FormComponent.html":{}}}],["src/app/shared/components/navbar/navbar.component",{"_index":543,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/shared/components/navbar/navbar.component.ts",{"_index":875,"title":{},"body":{"components/NavBarComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/components/navbar/navbar.component.ts:27",{"_index":878,"title":{},"body":{"components/NavBarComponent.html":{}}}],["src/app/shared/components/navbar/navbar.component.ts:32",{"_index":879,"title":{},"body":{"components/NavBarComponent.html":{}}}],["src/app/shared/components/star",{"_index":456,"title":{},"body":{"components/CityComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{}}}],["src/app/shared/models/alert",{"_index":123,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/models/button.model",{"_index":384,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["src/app/shared/models/button.model.ts",{"_index":241,"title":{},"body":{"interfaces/ButtonConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/models/card.model",{"_index":459,"title":{},"body":{"components/CityComponent.html":{}}}],["src/app/shared/models/card.model.ts",{"_index":262,"title":{},"body":{"interfaces/CardConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/models/form.model",{"_index":385,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["src/app/shared/models/form.model.ts",{"_index":697,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/shared/models/form.model.ts:4",{"_index":794,"title":{},"body":{"interfaces/FormOutputModel.html":{}}}],["src/app/shared/models/navbar.model",{"_index":544,"title":{},"body":{"components/DashboardComponent.html":{}}}],["src/app/shared/models/navbar.model.ts",{"_index":886,"title":{},"body":{"interfaces/NavbarConfig.html":{},"coverage.html":{}}}],["src/app/shared/services/alert",{"_index":145,"title":{},"body":{"injectables/AlertPopupService.html":{},"coverage.html":{}}}],["src/environments/environment.prod",{"_index":636,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/environments/environment.prod.ts",{"_index":1018,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1019,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":19,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["star",{"_index":115,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["starratingcomponent",{"_index":114,"title":{"components/StarRatingComponent.html":{}},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1052,"title":{},"body":{"index.html":{}}}],["started",{"_index":1038,"title":{"index.html":{}},"body":{}}],["state",{"_index":537,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":602,"title":{},"body":{"injectables/DashboardFacade.html":{},"interfaces/DashboardState.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["store/dashboard/dashboard.facade",{"_index":388,"title":{},"body":{"components/CitiesComponent.html":{}}}],["stored",{"_index":1073,"title":{},"body":{"index.html":{}}}],["storing",{"_index":341,"title":{},"body":{"components/CitiesComponent.html":{}}}],["stream",{"_index":566,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{}}}],["string",{"_index":58,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"components/AppComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":23,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["subject",{"_index":157,"title":{},"body":{"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["submission",{"_index":737,"title":{},"body":{"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["submit",{"_index":250,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"miscellaneous/typealiases.html":{}}}],["submitted",{"_index":732,"title":{},"body":{"components/FormComponent.html":{}}}],["subscribe((alertpopupconfig",{"_index":189,"title":{},"body":{"components/AppComponent.html":{}}}],["subscribe((cities",{"_index":345,"title":{},"body":{"components/CitiesComponent.html":{}}}],["subscribe((city",{"_index":422,"title":{},"body":{"components/CityComponent.html":{}}}],["subscribe((event",{"_index":442,"title":{},"body":{"components/CityComponent.html":{}}}],["subscribe((token",{"_index":817,"title":{},"body":{"components/LoginComponent.html":{}}}],["subscribes",{"_index":426,"title":{},"body":{"components/CityComponent.html":{},"components/FormComponent.html":{}}}],["subscription",{"_index":186,"title":{},"body":{"components/AppComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{}}}],["success",{"_index":138,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"components/AppComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["successful",{"_index":849,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["such",{"_index":495,"title":{},"body":{"components/DashboardComponent.html":{}}}],["surname",{"_index":853,"title":{},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/UserData.html":{}}}],["switch",{"_index":548,"title":{},"body":{"components/DashboardComponent.html":{}}}],["switchmap",{"_index":575,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["table",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1020,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":461,"title":{},"body":{"components/CityComponent.html":{}}}],["take(1",{"_index":421,"title":{},"body":{"components/CityComponent.html":{}}}],["takeuntil",{"_index":386,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["takeuntil(this.destroy",{"_index":344,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{}}}],["temperature",{"_index":469,"title":{},"body":{"components/CityComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["templateurl",{"_index":21,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["test",{"_index":209,"title":{},"body":{"components/AppComponent.html":{},"injectables/DashboardService.html":{},"index.html":{}}}],["tests",{"_index":1078,"title":{},"body":{"index.html":{}}}],["text",{"_index":267,"title":{},"body":{"interfaces/CardConfig.html":{},"components/CitiesComponent.html":{},"components/DashboardComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["this.action$.pipe",{"_index":573,"title":{},"body":{"injectables/DashboardEffects.html":{},"injectables/UserEffects.html":{}}}],["this.alertpopupconfig.set(alertpopupconfig",{"_index":190,"title":{},"body":{"components/AppComponent.html":{}}}],["this.alertpopupservice.alertpopupsubject.pipe",{"_index":187,"title":{},"body":{"components/AppComponent.html":{}}}],["this.alertpopupservice.show",{"_index":768,"title":{},"body":{"components/FormComponent.html":{}}}],["this.alertpopupsubject.next",{"_index":169,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["this.buttonlogoutconfig",{"_index":528,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.buttonsnavbar",{"_index":526,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.cities().cities",{"_index":350,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.cities.set(cities",{"_index":346,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.citieslist()?.filter((city",{"_index":354,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.city.set(city",{"_index":423,"title":{},"body":{"components/CityComponent.html":{}}}],["this.cityfiltername.set(searchcity",{"_index":390,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.cityid.set(event.split('/city/').filter((element",{"_index":443,"title":{},"body":{"components/CityComponent.html":{}}}],["this.customclass",{"_index":80,"title":{},"body":{"components/AlertPopupComponent.html":{}}}],["this.dashboardfacade.cities",{"_index":342,"title":{},"body":{"components/CitiesComponent.html":{}}}],["this.dashboardfacade.getcity",{"_index":416,"title":{},"body":{"components/CityComponent.html":{}}}],["this.dashboardfacade.getcity(this.cityid",{"_index":445,"title":{},"body":{"components/CityComponent.html":{}}}],["this.dashboardfacade.resetcity",{"_index":462,"title":{},"body":{"components/CityComponent.html":{}}}],["this.dashboardservice",{"_index":576,"title":{},"body":{"injectables/DashboardEffects.html":{}}}],["this.destroy$.next",{"_index":389,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{}}}],["this.form.addcontrol",{"_index":759,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.patchvalue(value",{"_index":777,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.reset",{"_index":776,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.valid",{"_index":763,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.value.password",{"_index":765,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.value['confirm",{"_index":766,"title":{},"body":{"components/FormComponent.html":{}}}],["this.form.valuechanges.subscribe((value",{"_index":750,"title":{},"body":{"components/FormComponent.html":{}}}],["this.formbuilder.control",{"_index":761,"title":{},"body":{"components/FormComponent.html":{}}}],["this.formmodel().type",{"_index":764,"title":{},"body":{"components/FormComponent.html":{}}}],["this.formmodel()?.inputelements.foreach((input",{"_index":758,"title":{},"body":{"components/FormComponent.html":{}}}],["this.hide",{"_index":170,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["this.http.get(`${environment.baseurl}/${endpoints.cities}/${cityid",{"_index":676,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.http.get(`${environment.baseurl}/${endpoints.cities}?limit=${limit}&offset=${offset",{"_index":669,"title":{},"body":{"injectables/DashboardService.html":{}}}],["this.http.post(`${environment.baseurl}/${endpoints.login",{"_index":869,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["this.http.post(`${environment.baseurl}/${endpoints.register",{"_index":873,"title":{},"body":{"injectables/LoginRegisterService.html":{}}}],["this.isvisible.set(alertpopupconfig.isvisible",{"_index":191,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loginregisterservice.login(payload).pipe",{"_index":919,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.loginregisterservice.register(payload).pipe",{"_index":929,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.onsubmitform.emit(this.form.value",{"_index":771,"title":{},"body":{"components/FormComponent.html":{}}}],["this.removeuserdataredirect",{"_index":925,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.router.events",{"_index":435,"title":{},"body":{"components/CityComponent.html":{}}}],["this.router.navigate([route.login",{"_index":844,"title":{},"body":{"injectables/LoginGuard.html":{},"injectables/UserEffects.html":{}}}],["this.router.navigate([userdata.router",{"_index":941,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.searchvaluechanges.emit(object.values(value)[0",{"_index":751,"title":{},"body":{"components/FormComponent.html":{}}}],["this.setuserdataredirect",{"_index":921,"title":{},"body":{"injectables/UserEffects.html":{}}}],["this.store.dispatch(cities",{"_index":618,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.dispatch(getcity",{"_index":619,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.dispatch(login",{"_index":956,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.dispatch(logout",{"_index":958,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.dispatch(register",{"_index":957,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.dispatch(resetcity",{"_index":620,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.select(cities",{"_index":612,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.select(getcity",{"_index":614,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["this.store.select(token",{"_index":951,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.store.select(userstate",{"_index":952,"title":{},"body":{"injectables/UserFacade.html":{}}}],["this.timer",{"_index":79,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{}}}],["this.token$.unsubscribe",{"_index":555,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.user()?.name",{"_index":519,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.user()?.token",{"_index":530,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.user.set(user",{"_index":534,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.userfacade.login",{"_index":824,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userfacade.logout",{"_index":553,"title":{},"body":{"components/DashboardComponent.html":{}}}],["this.userfacade.register",{"_index":898,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["this.userfacade.token",{"_index":816,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.userfacade.userstate$.subscribe",{"_index":532,"title":{},"body":{"components/DashboardComponent.html":{}}}],["through",{"_index":551,"title":{},"body":{"components/DashboardComponent.html":{}}}],["timer",{"_index":31,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":182,"title":{},"body":{"components/AppComponent.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{}}}],["titleformmodel",{"_index":708,"title":{"interfaces/TitleFormModel.html":{}},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"coverage.html":{}}}],["token",{"_index":486,"title":{},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tool",{"_index":1068,"title":{},"body":{"index.html":{}}}],["track",{"_index":392,"title":{},"body":{"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/FormComponent.html":{},"components/NavBarComponent.html":{},"components/StarRatingComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["true",{"_index":20,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":57,"title":{},"body":{"components/AlertPopupComponent.html":{},"interfaces/AlertPopupConfig.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"interfaces/Cities.html":{},"components/CitiesComponent.html":{},"interfaces/City.html":{},"components/CityComponent.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"injectables/DashboardService.html":{},"interfaces/DashboardState.html":{},"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"components/FormComponent.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InputFormModel.html":{},"interfaces/InternetSpeed.html":{},"components/LoginComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"injectables/LoginRegisterService.html":{},"interfaces/LoginResponse.html":{},"interfaces/NavbarConfig.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"components/RegistrationComponent.html":{},"interfaces/TitleFormModel.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1104,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typebuttontype",{"_index":244,"title":{},"body":{"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["typeformmodel",{"_index":704,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{},"miscellaneous/typealiases.html":{}}}],["types",{"_index":1110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uncomment",{"_index":645,"title":{},"body":{"injectables/DashboardService.html":{}}}],["undefined",{"_index":843,"title":{},"body":{"injectables/LoginGuard.html":{}}}],["unit",{"_index":1077,"title":{},"body":{"index.html":{}}}],["unsubscribe",{"_index":517,"title":{},"body":{"components/DashboardComponent.html":{}}}],["unsubscribes",{"_index":404,"title":{},"body":{"components/CityComponent.html":{}}}],["unsubscribing",{"_index":496,"title":{},"body":{"components/DashboardComponent.html":{}}}],["up",{"_index":893,"title":{},"body":{"components/RegistrationComponent.html":{}}}],["updated",{"_index":690,"title":{},"body":{"interfaces/DashboardState.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["updateformvalue",{"_index":727,"title":{},"body":{"components/FormComponent.html":{}}}],["updateformvalue(value",{"_index":738,"title":{},"body":{"components/FormComponent.html":{}}}],["updates",{"_index":688,"title":{},"body":{"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["upload",{"_index":295,"title":{},"body":{"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"injectables/DashboardService.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{}}}],["url",{"_index":451,"title":{},"body":{"components/CityComponent.html":{},"miscellaneous/variables.html":{}}}],["usa",{"_index":652,"title":{},"body":{"injectables/DashboardService.html":{}}}],["used",{"_index":47,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"interfaces/DashboardState.html":{},"components/FormComponent.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":487,"title":{},"body":{"components/DashboardComponent.html":{},"injectables/LoginGuard.html":{},"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":522,"title":{},"body":{"components/DashboardComponent.html":{},"interfaces/UserState.html":{},"miscellaneous/variables.html":{}}}],["user.actions",{"_index":935,"title":{},"body":{"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{}}}],["user.reducer",{"_index":955,"title":{},"body":{"injectables/UserFacade.html":{}}}],["user.selectors",{"_index":954,"title":{},"body":{"injectables/UserFacade.html":{}}}],["userdata",{"_index":847,"title":{"interfaces/UserData.html":{}},"body":{"interfaces/LoginPayload.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayload.html":{},"interfaces/RegisterResponse.html":{},"interfaces/UserData.html":{},"injectables/UserEffects.html":{},"coverage.html":{}}}],["userdata.name",{"_index":940,"title":{},"body":{"injectables/UserEffects.html":{}}}],["userdata.token",{"_index":938,"title":{},"body":{"injectables/UserEffects.html":{}}}],["usereffects",{"_index":906,"title":{"injectables/UserEffects.html":{}},"body":{"injectables/UserEffects.html":{},"coverage.html":{}}}],["userfacade",{"_index":488,"title":{"injectables/UserFacade.html":{}},"body":{"components/DashboardComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserFacade.html":{},"coverage.html":{}}}],["userfeaturekey",{"_index":961,"title":{},"body":{"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userreducer",{"_index":962,"title":{},"body":{"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userstate",{"_index":533,"title":{"interfaces/UserState.html":{}},"body":{"components/DashboardComponent.html":{},"injectables/UserFacade.html":{},"interfaces/UserState.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":452,"title":{},"body":{"components/CityComponent.html":{}}}],["v1",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validation",{"_index":772,"title":{},"body":{"components/FormComponent.html":{}}}],["validatorfn",{"_index":701,"title":{},"body":{"interfaces/FooterLogoModel.html":{},"interfaces/FooterTextModel.html":{},"interfaces/FormModel.html":{},"interfaces/FormOutputModel.html":{},"interfaces/InputFormModel.html":{},"interfaces/TitleFormModel.html":{}}}],["validators",{"_index":379,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["validators.email",{"_index":803,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["validators.minlength(6",{"_index":804,"title":{},"body":{"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["validators.required",{"_index":370,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{}}}],["value",{"_index":51,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"interfaces/ButtonConfig.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardEffects.html":{},"injectables/DashboardFacade.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":134,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/Cities.html":{},"interfaces/City.html":{},"interfaces/CityInfoResponse.html":{},"interfaces/Climate.html":{},"interfaces/CoworkingSpace.html":{},"interfaces/GetCitiesPayload.html":{},"interfaces/InternetSpeed.html":{},"miscellaneous/typealiases.html":{}}}],["var",{"_index":87,"title":{},"body":{"components/AlertPopupComponent.html":{},"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"components/CardComponent.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/NavBarComponent.html":{},"components/RegistrationComponent.html":{},"components/StarRatingComponent.html":{}}}],["variable",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":757,"title":{"miscellaneous/variables.html":{}},"body":{"components/FormComponent.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vegas",{"_index":662,"title":{},"body":{"injectables/DashboardService.html":{}}}],["version",{"_index":1044,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["versions",{"_index":978,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["versions.v1}/cities",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["via",{"_index":1080,"title":{},"body":{"index.html":{}}}],["visibility",{"_index":164,"title":{},"body":{"injectables/AlertPopupService.html":{}}}],["visible",{"_index":197,"title":{},"body":{"components/AppComponent.html":{}}}],["void",{"_index":49,"title":{},"body":{"components/AlertPopupComponent.html":{},"injectables/AlertPopupService.html":{},"components/CitiesComponent.html":{},"components/CityComponent.html":{},"components/DashboardComponent.html":{},"injectables/DashboardFacade.html":{},"components/FormComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"injectables/UserEffects.html":{},"injectables/UserFacade.html":{}}}],["w",{"_index":337,"title":{},"body":{"components/CitiesComponent.html":{},"components/LoginComponent.html":{},"components/RegistrationComponent.html":{},"index.html":{}}}],["want",{"_index":1099,"title":{},"body":{"index.html":{}}}],["warning",{"_index":140,"title":{},"body":{"interfaces/AlertPopupConfig.html":{},"interfaces/ButtonConfig.html":{},"interfaces/CardConfig.html":{},"miscellaneous/typealiases.html":{}}}],["weather",{"_index":468,"title":{},"body":{"components/CityComponent.html":{}}}],["welcome",{"_index":556,"title":{},"body":{"components/DashboardComponent.html":{}}}],["whatever",{"_index":1098,"title":{},"body":{"index.html":{}}}],["whether",{"_index":196,"title":{},"body":{"components/AppComponent.html":{},"components/BarChartComponent.html":{},"components/ButtonComponent.html":{},"miscellaneous/variables.html":{}}}],["whit",{"_index":648,"title":{},"body":{"injectables/DashboardService.html":{}}}],["white",{"_index":508,"title":{},"body":{"components/DashboardComponent.html":{}}}],["withviewtransitions",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yanchware",{"_index":198,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["yanchware_logo",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yanchwarego",{"_index":1039,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["yanchwarego_logo",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yanchwarego_mini_logo",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":607,"title":{},"body":{"injectables/DashboardFacade.html":{}}}],["york",{"_index":651,"title":{},"body":{"injectables/DashboardService.html":{}}}],["zone.js",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AlertPopupComponent.html":{"url":"components/AlertPopupComponent.html","title":"component - AlertPopupComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AlertPopupComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/alert-popup/alert-popup.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying an alert popup.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-alert-popup\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./alert-popup.component.html\n            \n\n\n\n            \n                styleUrl\n                ./alert-popup.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupConfig\n                            \n                            \n                                alertPopupService\n                            \n                            \n                                customClass\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                resetTimer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupConfig\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:35\n                            \n                        \n\n                \n                    \n                            Initializes the alert popup component and sets a timer to hide the popup.\n\n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        alertPopupConfig\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:29\n                            \n                        \n                \n                    \n                        The configuration for the alert popup.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        resetTimer\n                        \n                    \n                \n            \n            \n                \nresetTimer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Resets the timer used to hide the alert popup.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupConfig\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:29\n                        \n                    \n\n            \n                \n                    The configuration for the alert popup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AlertPopupService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:35\n                        \n                    \n\n            \n                \n                    Inject service for managing alert popups.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:19\n                        \n                    \n\n            \n                \n                    The custom CSS class for the alert popup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                \n                    \n                        Default value : setTimeout(() => {}, 0)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/alert-popup/alert-popup.component.ts:24\n                        \n                    \n\n            \n                \n                    The timer used to hide the alert popup after a certain duration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, input } from '@angular/core';\nimport { AlertPopupConfig, TIMER } from '../../models/alert-popup.model';\nimport { AlertPopupService } from '../../services/alert-popup.service';\n\n/**\n * Component for displaying an alert popup.\n */\n@Component({\n  selector: 'app-alert-popup',\n  standalone: true,\n  imports: [],\n  templateUrl: './alert-popup.component.html',\n  styleUrl: './alert-popup.component.scss',\n})\nexport class AlertPopupComponent {\n  /**\n   * The custom CSS class for the alert popup.\n   */\n  customClass: string = '';\n\n  /**\n   * The timer used to hide the alert popup after a certain duration.\n   */\n  private timer: ReturnType = setTimeout(() => {}, 0);\n\n  /**\n   * The configuration for the alert popup.\n   */\n  alertPopupConfig = input.required();\n\n\n  /**\n   * Inject service for managing alert popups.\n   */\n  alertPopupService = inject(AlertPopupService);\n\n  /**\n   * Initializes the alert popup component and sets a timer to hide the popup.\n   */\n  constructor() {\n    this.timer = setTimeout(() => {\n      this.customClass = 'hide';\n    }, TIMER);\n  }\n\n  /**\n   * Resets the timer used to hide the alert popup.\n   */\n  resetTimer() {\n    clearTimeout(this.timer);\n  }\n}\n\n    \n\n    \n        \n  \n    {{ alertPopupConfig().label }}\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ alertPopupConfig().label }}      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AlertPopupComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AlertPopupConfig.html":{"url":"interfaces/AlertPopupConfig.html","title":"interface - AlertPopupConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AlertPopupConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/alert-popup.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for an alert popup.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alertType\n                                        \n                                \n                                \n                                        \n                                            isVisible\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alertType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alertType:         AlertPopupType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AlertPopupType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isVisible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const TIMER = 7000;\n\n/**\n * Represents the type of an alert popup.\n * Possible values include: 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'.\n */\nexport type AlertPopupType =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark';\n\n/**\n * Represents the configuration for an alert popup.\n */\nexport interface AlertPopupConfig {\n  alertType: AlertPopupType;\n  label: string;\n  isVisible: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlertPopupService.html":{"url":"injectables/AlertPopupService.html","title":"injectable - AlertPopupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AlertPopupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/alert-popup.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupSubject\n                            \n                            \n                                    Private\n                                timer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hide\n                            \n                            \n                                show\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hide\n                        \n                    \n                \n            \n            \n                \nhide()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/alert-popup.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Hides the alert popup.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        show\n                        \n                    \n                \n            \n            \n                \nshow(alertPopupConfig: AlertPopupConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/alert-popup.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Shows the alert popup with the specified configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                alertPopupConfig\n                                            \n                                                            AlertPopupConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The configuration for the alert popup.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/alert-popup.service.ts:17\n                        \n                    \n\n            \n                \n                    Subject used to emit alert popup configurations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReturnType<>\n\n                    \n                \n                \n                    \n                        Default value : setTimeout(() => {}, 0)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/alert-popup.service.ts:12\n                        \n                    \n\n            \n                \n                    Timer used to control the visibility of the alert popup.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AlertPopupConfig, TIMER } from '../models/alert-popup.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlertPopupService {\n  /**\n   * Timer used to control the visibility of the alert popup.\n   */\n  private timer: ReturnType = setTimeout(() => {}, 0);\n\n  /**\n   * Subject used to emit alert popup configurations.\n   */\n  alertPopupSubject: Subject =\n    new Subject();\n\n  /**\n   * Shows the alert popup with the specified configuration.\n   * @param alertPopupConfig The configuration for the alert popup.\n   */\n  show(alertPopupConfig: AlertPopupConfig) {\n    this.alertPopupSubject.next({ ...alertPopupConfig, isVisible: true });\n    this.timer = setTimeout(() => {\n      this.hide();\n    }, TIMER + 500);\n  }\n\n  /**\n   * Hides the alert popup.\n   */\n  hide() {\n    this.alertPopupSubject.next({\n      ...({} as AlertPopupConfig),\n      isVisible: false,\n    });\n    clearInterval(this.timer);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        The root component of the application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                            CommonModule\n                            ReactiveFormsModule\n                            RouterLink\n                                AlertPopupComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupConfig\n                            \n                            \n                                alertPopupService\n                            \n                            \n                                alertPopupSubject$\n                            \n                            \n                                isVisible\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as AlertPopupConfig)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:42\n                        \n                    \n\n            \n                \n                    The configuration for the alert popup.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AlertPopupService)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:37\n                        \n                    \n\n            \n                \n                    Service for displaying alert popups.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.alertPopupService.alertPopupSubject.pipe(\n    filter(Boolean)\n  ).subscribe((alertPopupConfig: AlertPopupConfig) => {\n    this.alertPopupConfig.set(alertPopupConfig);\n    this.isVisible.set(alertPopupConfig.isVisible);\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:52\n                        \n                    \n\n            \n                \n                    Subscription for the alert popup subject.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isVisible\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:47\n                        \n                    \n\n            \n                \n                    Indicates whether the alert popup is visible or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'yanchware-go'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:32\n                        \n                    \n\n            \n                \n                    The title of the application.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, inject, signal } from '@angular/core';\nimport {\n  ReactiveFormsModule\n} from '@angular/forms';\nimport { RouterLink, RouterOutlet } from '@angular/router';\nimport { AlertPopupComponent } from './shared/components/alert-popup/alert-popup.component';\nimport { AlertPopupConfig } from './shared/models/alert-popup.model';\nimport { AlertPopupService } from './shared/services/alert-popup.service';\nimport { Subscription, filter } from 'rxjs';\n\n/**\n * The root component of the application.\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterLink,\n    AlertPopupComponent,\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  /**\n   * The title of the application.\n   */\n  title = 'yanchware-go';\n\n  /**\n   * Service for displaying alert popups.\n   */\n  alertPopupService = inject(AlertPopupService);\n\n  /**\n   * The configuration for the alert popup.\n   */\n  alertPopupConfig = signal({} as AlertPopupConfig);\n\n  /**\n   * Indicates whether the alert popup is visible or not.\n   */\n  isVisible = signal(false);\n\n  /**\n   * Subscription for the alert popup subject.\n   */\n  alertPopupSubject$: Subscription = this.alertPopupService.alertPopupSubject.pipe(\n    filter(Boolean)\n  ).subscribe((alertPopupConfig: AlertPopupConfig) => {\n    this.alertPopupConfig.set(alertPopupConfig);\n    this.isVisible.set(alertPopupConfig.isVisible);\n  });\n}\n\n    \n\n    \n        SHOW ALERT TEST SUCCESS -->\n\n  \n\n  @if(isVisible()) {\n  \n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'SHOW ALERT TEST SUCCESS -->    @if(isVisible()) {    }'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BarChartComponent.html":{"url":"components/BarChartComponent.html","title":"component - BarChartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BarChartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/bar-chart/bar-chart.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-bar-chart\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./bar-chart.component.html\n            \n\n\n\n            \n                styleUrl\n                ./bar-chart.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isReverse\n                            \n                            \n                                label\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                isReverse\n                            \n                            \n                                label\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        isReverse\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:30\n                            \n                        \n                \n                    \n                        signal that Determines whether the bar chart should be displayed in reverse order.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:19\n                            \n                        \n                \n                    \n                        signal label input for the bar chart component.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:25\n                            \n                        \n                \n                    \n                        signal input required value of the bar chart.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isReverse\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:30\n                        \n                    \n\n            \n                \n                    signal that Determines whether the bar chart should be displayed in reverse order.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        label\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:19\n                        \n                    \n\n            \n                \n                    signal label input for the bar chart component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/bar-chart/bar-chart.component.ts:25\n                        \n                    \n\n            \n                \n                    signal input required value of the bar chart.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\n@Component({\n  selector: 'app-bar-chart',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './bar-chart.component.html',\n  styleUrl: './bar-chart.component.scss'\n})\n/**\n * Represents a bar chart component.\n */\nexport class BarChartComponent {\n\n  /**\n   * signal label input for the bar chart component.\n   */\n  label = input();\n\n\n  /**\n   * signal input required value of the bar chart.\n   */\n  value = input.required();\n    \n  /**\n   * signal that Determines whether the bar chart should be displayed in reverse order.\n   */\n  isReverse = input(false);\n\n}\n\n    \n\n    \n        \n  {{ label() }}\n  \n    @if (!isReverse()) {\n    = 70, 'bar__orange': (value() > 40 && value() \n       5}\">{{ value() }}\n    \n    } @else {\n    = 70, 'bar__orange': (value() > 40 && value() \n       5}\">{{ value() }}\n    \n    }\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{ label() }}      @if (!isReverse()) {    = 70, \\'bar__orange\\': (value() > 40 && value()        5}\">{{ value() }}        } @else {    = 70, \\'bar__orange\\': (value() > 40 && value()        5}\">{{ value() }}        }  '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BarChartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ButtonComponent.html":{"url":"components/ButtonComponent.html","title":"component - ButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/button/button.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a custom button component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-button\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterLink\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./button.component.html\n            \n\n\n\n            \n                styleUrl\n                ./button.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonConfig\n                            \n                            \n                                isDisabled\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                buttonConfig\n                            \n                            \n                                isDisabled\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        buttonConfig\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/button/button.component.ts:22\n                            \n                        \n                \n                    \n                        The configuration for the button.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isDisabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/button/button.component.ts:27\n                            \n                        \n                \n                    \n                        Indicates whether the button is disabled.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonConfig\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/button/button.component.ts:22\n                        \n                    \n\n            \n                \n                    The configuration for the button.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/button/button.component.ts:27\n                        \n                    \n\n            \n                \n                    Indicates whether the button is disabled.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { ButtonConfig } from '../../models/button.model';\n\n/**\n * Represents a custom button component.\n */\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [\n    RouterLink\n  ],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.scss'\n})\nexport class ButtonComponent {\n\n  /**\n   * The configuration for the button.\n   */\n  buttonConfig = input.required();\n\n  /**\n   * Indicates whether the button is disabled.\n   */\n  isDisabled = input(false);\n}\n\n    \n\n    \n        {{ buttonConfig().label }}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{ buttonConfig().label }}'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ButtonConfig.html":{"url":"interfaces/ButtonConfig.html","title":"interface - ButtonConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ButtonConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/button.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for a button.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            classButtonType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            customClass\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isDisabled\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            routerLink\n                                        \n                                \n                                \n                                        \n                                            typeButtonType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        classButtonType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        classButtonType:         ButtonClassType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonClassType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isDisabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isDisabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routerLink\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        routerLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typeButtonType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        typeButtonType:         ButtonType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type ButtonClassType =\n  | 'btn'\n  | 'btn-primary'\n  | 'btn-secondary'\n  | 'btn-success'\n  | 'btn-danger'\n  | 'btn-warning'\n  | 'btn-info'\n  | 'btn-light'\n  | 'btn-dark'\n  | 'btn-link'\n  | 'btn-outline-primary'\n  | 'btn-outline-secondary'\n  | 'btn-outline-success'\n  | 'btn-outline-danger'\n  | 'btn-outline-warning'\n  | 'btn-outline-info'\n  | 'btn-outline-light'\n  | 'btn-outline-dark';\n\n/**\n * Represents the type of a button.\n */\ntype ButtonType = 'button' | 'submit' | 'reset';\n\n/**\n * Represents the configuration for a button.\n */\nexport interface ButtonConfig {\n  id: string;\n  classButtonType: ButtonClassType;\n  typeButtonType: ButtonType;\n  label: string;\n  \n  customClass?: string;\n  isDisabled?: boolean;\n  routerLink?: string;\n  value?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardComponent.html":{"url":"components/CardComponent.html","title":"component - CardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/card/card.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a card component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-card\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./card.component.html\n            \n\n\n\n            \n                styleUrl\n                ./card.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cardModel\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cardModel\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        cardModel\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/card/card.component.ts:18\n                            \n                        \n                \n                    \n                        Input with card config object.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cardModel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/card/card.component.ts:18\n                        \n                    \n\n            \n                \n                    Input with card config object.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input } from '@angular/core';\nimport { CardConfig } from '../../models/card.model';\n\n/**\n * Represents a card component.\n */\n@Component({\n  selector: 'app-card',\n  standalone: true,\n  imports: [],\n  templateUrl: './card.component.html',\n  styleUrl: './card.component.scss'\n})\nexport class CardComponent {\n  /**\n   * Input with card config object.\n   */\n  cardModel = input();\n}\n\n    \n\n    \n        \n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardConfig.html":{"url":"interfaces/CardConfig.html","title":"interface - CardConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CardConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/card.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration options for a card.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cardBodyCustomClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cardCustomClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cardType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cardBodyCustomClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardBodyCustomClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cardCustomClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardCustomClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cardType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardType:         CardType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CardType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type CardType =\n'text-bg-primary'\n| 'text-bg-secondary'\n| 'text-bg-success'\n| 'text-bg-danger'\n| 'text-bg-warning'\n| 'text-bg-info'\n| 'text-bg-light'\n| 'text-bg-dark'\n| 'border-primary'\n| 'border-secondary'\n| 'border-success'\n| 'border-danger'\n| 'border-warning'\n| 'border-info'\n| 'border-light'\n| 'border-dark';\n\n/**\n * Represents the configuration options for a card.\n */\nexport interface CardConfig {\n  cardCustomClass?: string;\n  cardType?: CardType;\n  cardBodyCustomClass?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cities.html":{"url":"interfaces/Cities.html","title":"interface - Cities","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cities\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a collection of cities.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cities\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cities:         City[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         City[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CitiesComponent.html":{"url":"components/CitiesComponent.html","title":"component - CitiesComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CitiesComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/core/components/cities/cities.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component for displaying a list of cities.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-cities\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MODULES\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./cities.component.html\n            \n\n\n\n            \n                styleUrl\n                ./cities.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonElement\n                            \n                            \n                                cities\n                            \n                            \n                                cities$\n                            \n                            \n                                citiesList\n                            \n                            \n                                citiesListFiltered\n                            \n                            \n                                cityFilterName\n                            \n                            \n                                dashboardFacade\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                formModel\n                            \n                            \n                                    Public\n                                ROUTE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterCities\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterCities\n                        \n                    \n                \n            \n            \n                \nfilterCities(searchCity: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/cities/cities.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Filters the cities based on the provided search city name.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchCity\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The name of the city to filter.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/cities/cities.component.ts:119\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when the component is about to be destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/components/cities/cities.component.ts:112\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called after the component has been initialized.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: 'explore',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Explore',\n    customClass: 'w-100',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:77\n                        \n                    \n\n            \n                \n                    Button configuration for the explore button.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cities\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as Cities)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:39\n                        \n                    \n\n            \n                \n                    Signal for storing the cities data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cities$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.dashboardFacade.cities$\n    .pipe(filter(Boolean), takeUntil(this.destroy$))\n    .subscribe((cities: Cities) => {\n      this.cities.set(cities);\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:103\n                        \n                    \n\n            \n                \n                    Subscription for receiving cities data from the DashboardFacade.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        citiesList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => this.cities().cities)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:44\n                        \n                    \n\n            \n                \n                    Computed property related with cities signal => cities.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        citiesListFiltered\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() =>\n    this.citiesList()?.filter((city) => city.name.toLowerCase().includes(this.cityFilterName().toLowerCase()))\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:54\n                        \n                    \n\n            \n                \n                    Computed property for getting the filtered list of cities based on the city filter name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cityFilterName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:49\n                        \n                    \n\n            \n                \n                    Signal for storing the city filter name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DashboardFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:98\n                        \n                    \n\n            \n                \n                    Inject the DashboardFacade Pattern.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:93\n                        \n                    \n\n            \n                \n                    Subject for managing the component's lifecycle.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormModel\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'search',\n    cardCustomClass: 'w-100',\n    inputElements: [\n      {\n        label: 'Choose your next destination',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'mb-3',\n      },\n    ],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:61\n                        \n                    \n\n            \n                \n                    Form model for the search input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ROUTE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ROUTE\n                    \n                \n                    \n                        \n                                Defined in src/app/core/components/cities/cities.component.ts:88\n                        \n                    \n\n            \n                \n                    Constant for storing the route path.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  OnDestroy,\n  OnInit,\n  computed,\n  inject,\n  signal,\n} from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { ROUTE } from '@src/app/constants/route';\nimport { ButtonComponent } from '@src/app/shared/components/button/button.component';\nimport { CardComponent } from '@src/app/shared/components/card/card.component';\nimport { FormComponent } from '@src/app/shared/components/form/form.component';\nimport { ButtonConfig } from '@src/app/shared/models/button.model';\nimport { FormModel } from '@src/app/shared/models/form.model';\nimport { Subject, Subscription, filter, takeUntil } from 'rxjs';\nimport { Cities, City } from '../../models/dashboard.model';\nimport { DashboardFacade } from '../../store/dashboard/dashboard.facade';\n\nconst MODULES = [CommonModule, RouterLink];\nconst COMPONENTS = [FormComponent, CardComponent, ButtonComponent];\n\n/**\n * Component for displaying a list of cities.\n */\n@Component({\n  selector: 'app-cities',\n  standalone: true,\n  imports: [...MODULES, ...COMPONENTS],\n  templateUrl: './cities.component.html',\n  styleUrl: './cities.component.scss',\n})\nexport class CitiesComponent implements OnInit, OnDestroy {\n  /**\n   * Signal for storing the cities data.\n   */\n  cities = signal({} as Cities);\n\n  /**\n   * Computed property related with cities signal => cities.\n   */\n  citiesList = computed(() => this.cities().cities);\n\n  /**\n   * Signal for storing the city filter name.\n   */\n  cityFilterName = signal('');\n\n  /**\n   * Computed property for getting the filtered list of cities based on the city filter name.\n   */\n  citiesListFiltered = computed(() =>\n    this.citiesList()?.filter((city) => city.name.toLowerCase().includes(this.cityFilterName().toLowerCase()))\n  );\n\n  /**\n   * Form model for the search input.\n   */\n  formModel: FormModel = {\n    type: 'search',\n    cardCustomClass: 'w-100',\n    inputElements: [\n      {\n        label: 'Choose your next destination',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'mb-3',\n      },\n    ],\n  };\n\n  /**\n   * Button configuration for the explore button.\n   */\n  buttonElement: ButtonConfig = {\n    id: 'explore',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Explore',\n    customClass: 'w-100',\n  };\n\n  /**\n   * Constant for storing the route path.\n   */\n  public ROUTE = ROUTE;\n\n  /**\n   * Subject for managing the component's lifecycle.\n   */\n  private destroy$ = new Subject();\n\n  /**\n   * Inject the DashboardFacade Pattern.\n   */\n  dashboardFacade = inject(DashboardFacade);\n\n  /**\n   * Subscription for receiving cities data from the DashboardFacade.\n   */\n  cities$: Subscription = this.dashboardFacade.cities$\n    .pipe(filter(Boolean), takeUntil(this.destroy$))\n    .subscribe((cities: Cities) => {\n      this.cities.set(cities);\n    });\n\n  /**\n   * Lifecycle hook that is called after the component has been initialized.\n   */\n  ngOnInit() {\n    this.dashboardFacade.cities();\n  }\n\n  /**\n   * Lifecycle hook that is called when the component is about to be destroyed.\n   */\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n\n  /**\n   * Filters the cities based on the provided search city name.\n   * @param searchCity The name of the city to filter.\n   */\n  filterCities(searchCity: string) {\n    this.cityFilterName.set(searchCity);\n  }\n}\n\n    \n\n    \n        \n  \n\n    \n      \n    \n  \n\n  @if (citiesListFiltered()) {\n   2, }\">\n    @for (city of citiesListFiltered(); track city) {\n    \n      \n        \n          \n        \n\n        \n          {{ city.name }}\n          {{ city.country }}\n        \n\n        \n      \n    \n    }\n  \n  } @else {\n  \n    \n      \n        \n          No cities found\n        \n      \n    \n  \n  }\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    @if (citiesListFiltered()) {   2, }\">    @for (city of citiesListFiltered(); track city) {                                                      {{ city.name }}          {{ city.country }}                              }    } @else {                              No cities found                      }'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CitiesComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/City.html":{"url":"interfaces/City.html","title":"interface - City","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  City\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a city.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cityId\n                                        \n                                \n                                \n                                        \n                                            country\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cityId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CityComponent.html":{"url":"components/CityComponent.html","title":"component - CityComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CityComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/city/city.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the CityComponent class.\nThis component is responsible for displaying city information.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-city\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MODULES\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./city.component.html\n            \n\n\n\n            \n                styleUrl\n                ./city.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonElement\n                            \n                            \n                                cardConfig\n                            \n                            \n                                city\n                            \n                            \n                                cityId\n                            \n                            \n                                dashboardFacade\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                getCity\n                            \n                            \n                                    Public\n                                ROUTE\n                            \n                            \n                                router\n                            \n                            \n                                routerSubscirption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/city/city.component.ts:116\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when the component is destroyed.\nIt resets the city in the DashboardFacade and unsubscribes from observables.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: 'back',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Go back to cities',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:53\n                        \n                    \n\n            \n                \n                    Configuration for the button element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cardConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CardConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    cardCustomClass: 'h-100'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:63\n                        \n                    \n\n            \n                \n                    Configuration object for the card.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as CityInfoResponse)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:43\n                        \n                    \n\n            \n                \n                    Represents the city information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cityId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:38\n                        \n                    \n\n            \n                \n                    The ID of the city.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DashboardFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:70\n                        \n                    \n\n            \n                \n                    Inject the DashboardFacade Pattern.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:76\n                        \n                    \n\n            \n                \n                    Subject used to signal the destruction of the component.\nIt emits a void value when the component is destroyed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.dashboardFacade.getCity$\n    .pipe(\n      filter((city) => {\n        return Object.keys(city).length > 0;\n      }),\n      take(1),\n      takeUntil(this.destroy$),\n      )\n    .subscribe((city: CityInfoResponse) => {\n      this.city.set(city);\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:100\n                        \n                    \n\n            \n                \n                    Subscription property that retrieves the city information.\nIt subscribes to the getCity$ observable and sets the city information\nto the city property of the component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ROUTE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ROUTE\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:48\n                        \n                    \n\n            \n                \n                    The constant representing the route for the city component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:33\n                        \n                    \n\n            \n                \n                    The router object for navigating between routes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        routerSubscirption\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.router.events\n    .pipe(\n      filter((event) => event instanceof NavigationEnd),\n      map((event) => event as NavigationEnd),\n      map((event) => event.urlAfterRedirects),\n      takeUntil(this.destroy$)\n    )\n    .subscribe((event: string) => {\n      this.cityId.set(event.split('/city/').filter((element) => element)[0]);\n      return this.dashboardFacade.getCity(this.cityId());\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/city/city.component.ts:83\n                        \n                    \n\n            \n                \n                    Subscription for router events related to navigation.\nIt listens for NavigationEnd events, extracts the city ID from the URL,\nand retrieves the city data using the dashboardFacade.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnDestroy, inject, signal } from '@angular/core';\nimport { NavigationEnd, Router, RouterLink } from '@angular/router';\nimport { ROUTE } from '@src/app/constants/route';\nimport { CityInfoResponse } from '@src/app/core/models/dashboard.model';\nimport { DashboardFacade } from '@src/app/core/store/dashboard/dashboard.facade';\nimport { BarChartComponent } from '@src/app/shared/components/bar-chart/bar-chart.component';\nimport { ButtonComponent } from '@src/app/shared/components/button/button.component';\nimport { CardComponent } from '@src/app/shared/components/card/card.component';\nimport { StarRatingComponent } from '@src/app/shared/components/star-rating/star-rating.component';\nimport { ButtonConfig } from '@src/app/shared/models/button.model';\nimport { CardConfig } from '@src/app/shared/models/card.model';\nimport { Subject, Subscription, filter, map, take, takeUntil } from 'rxjs';\n\nconst MODULES = [CommonModule, RouterLink];\nconst COMPONENTS = [CardComponent, ButtonComponent, BarChartComponent, StarRatingComponent];\n\n/**\n * Represents the CityComponent class.\n * This component is responsible for displaying city information.\n */\n@Component({\n  selector: 'app-city',\n  standalone: true,\n  imports: [...MODULES, ...COMPONENTS],\n  templateUrl: './city.component.html',\n  styleUrl: './city.component.scss',\n})\nexport class CityComponent implements OnDestroy {\n  /**\n   * The router object for navigating between routes.\n   */\n  router = inject(Router);\n\n  /**\n   * The ID of the city.\n   */\n  cityId = signal('');\n\n  /**\n   * Represents the city information.\n   */\n  city = signal({} as CityInfoResponse);\n\n  /**\n   * The constant representing the route for the city component.\n   */\n  public ROUTE = ROUTE;\n\n  /**\n   * Configuration for the button element.\n   */\n  buttonElement: ButtonConfig = {\n    id: 'back',\n    classButtonType: 'btn-outline-primary',\n    typeButtonType: 'button',\n    label: 'Go back to cities',\n  };\n\n  /**\n   * Configuration object for the card.\n   */\n  cardConfig: CardConfig = {\n    cardCustomClass: 'h-100'\n  }\n\n  /**\n   * Inject the DashboardFacade Pattern.\n   */\n  dashboardFacade = inject(DashboardFacade);\n\n  /**\n   * Subject used to signal the destruction of the component.\n   * It emits a void value when the component is destroyed.\n   */\n  private destroy$ = new Subject();\n\n  /**\n   * Subscription for router events related to navigation.\n   * It listens for NavigationEnd events, extracts the city ID from the URL,\n   * and retrieves the city data using the dashboardFacade.\n   */\n  routerSubscirption: Subscription = this.router.events\n    .pipe(\n      filter((event) => event instanceof NavigationEnd),\n      map((event) => event as NavigationEnd),\n      map((event) => event.urlAfterRedirects),\n      takeUntil(this.destroy$)\n    )\n    .subscribe((event: string) => {\n      this.cityId.set(event.split('/city/').filter((element) => element)[0]);\n      return this.dashboardFacade.getCity(this.cityId());\n    });\n\n  /**\n   * Subscription property that retrieves the city information.\n   * It subscribes to the `getCity$` observable and sets the city information\n   * to the `city` property of the component.\n   */\n  getCity: Subscription = this.dashboardFacade.getCity$\n    .pipe(\n      filter((city) => {\n        return Object.keys(city).length > 0;\n      }),\n      take(1),\n      takeUntil(this.destroy$),\n      )\n    .subscribe((city: CityInfoResponse) => {\n      this.city.set(city);\n    });\n\n  /**\n   * Lifecycle hook that is called when the component is destroyed.\n   * It resets the city in the DashboardFacade and unsubscribes from observables.\n   */\n  ngOnDestroy() {\n    this.dashboardFacade.resetCity();\n    this.destroy$.next();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n      \n\n      @if (city().cityId) {\n      \n        \n      \n      \n        {{ city().name }}\n        {{ city().country }}\n      \n\n      \n        \n      \n\n      \n        \n      \n\n\n      @if (city().internetSpeed) {\n        \n          Internet Speed\n          \n            \n          \n          \n            \n          \n        \n      }\n\n      @if (city().climate) {\n        \n          Weather Info\n          \n            \n              Temperature {{ city().climate.averageTemperature }}C°\n            \n            \n              Rainfall {{ city().climate.rainfall }}mm\n            \n             \n        \n      }\n\n      @if (city().coworkingSpaces) {\n      \n        \n          \n            \n              \n                Coworking Spaces Info\n              \n            \n            \n              \n                @for (coworkingSpace of city().coworkingSpaces; track coworkingSpace) {\n                \n\n                  \n                    {{ coworkingSpace.name }}\n                  \n                  \n                    {{ coworkingSpace.address }}\n                  \n                  \n                    \n                  \n                \n                }\n              \n            \n          \n        \n      \n      }\n\n      } @else {\n      No City Found\n      }\n\n      {{ city() | json }} -->\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                @if (city().cityId) {                                  {{ city().name }}        {{ city().country }}                                                    @if (city().internetSpeed) {                  Internet Speed                                                                              }      @if (city().climate) {                  Weather Info                                    Temperature {{ city().climate.averageTemperature }}C°                                      Rainfall {{ city().climate.rainfall }}mm                                       }      @if (city().coworkingSpaces) {                                                                  Coworking Spaces Info                                                                    @for (coworkingSpace of city().coworkingSpaces; track coworkingSpace) {                                                      {{ coworkingSpace.name }}                                                        {{ coworkingSpace.address }}                                                                                                          }                                                        }      } @else {      No City Found      }      {{ city() | json }} -->      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CityComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CityInfoResponse.html":{"url":"interfaces/CityInfoResponse.html","title":"interface - CityInfoResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CityInfoResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response object for city information.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cityId\n                                        \n                                \n                                \n                                        \n                                            climate\n                                        \n                                \n                                \n                                        \n                                            costOfLivingIndex\n                                        \n                                \n                                \n                                        \n                                            country\n                                        \n                                \n                                \n                                        \n                                            coworkingSpaces\n                                        \n                                \n                                \n                                        \n                                            internetSpeed\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            safetyIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cityId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        climate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        climate:         Climate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Climate\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        costOfLivingIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        costOfLivingIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coworkingSpaces\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coworkingSpaces:         CoworkingSpace[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CoworkingSpace[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        internetSpeed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        internetSpeed:         InternetSpeed\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InternetSpeed\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        safetyIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        safetyIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Climate.html":{"url":"interfaces/Climate.html","title":"interface - Climate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Climate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the climate data.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            averageTemperature\n                                        \n                                \n                                \n                                        \n                                            rainfall\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        averageTemperature\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        averageTemperature:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rainfall\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rainfall:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CoworkingSpace.html":{"url":"interfaces/CoworkingSpace.html","title":"interface - CoworkingSpace","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CoworkingSpace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a coworking space.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            rating\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rating\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rating:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DashboardComponent.html":{"url":"components/DashboardComponent.html","title":"component - DashboardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DashboardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/dashboard/dashboard.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the DashboardComponent class.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dashboard\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dashboard.component.html\n            \n\n\n\n            \n                styleUrl\n                ./dashboard.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                buttonLogOutConfig\n                            \n                            \n                                buttonsNavbar\n                            \n                            \n                                    Private\n                                destroy$\n                            \n                            \n                                name\n                            \n                            \n                                navbarConfig\n                            \n                            \n                                token\n                            \n                            \n                                token$\n                            \n                            \n                                user\n                            \n                            \n                                userFacade\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                onClickButton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/dashboard/dashboard.component.ts:136\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when the component is about to be destroyed.\nIt is used to perform any necessary cleanup logic, such as unsubscribing from observables or\nreleasing resources.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClickButton\n                        \n                    \n                \n            \n            \n                \nonClickButton(button: ButtonConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/dashboard/dashboard.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Handles the click event of a button in the dashboard component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                button\n                                            \n                                                            ButtonConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe button configuration object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        buttonLogOutConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    id: 'logout',\n    classButtonType: 'btn-link',\n    typeButtonType: 'button',\n    label: 'Log out',\n    customClass: 'text-decoration-none text-white',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:94\n                        \n                    \n\n            \n                \n                    Configuration for the logout button.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buttonsNavbar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ButtonConfig[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: 'homepage',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'Homepage',\n      customClass: 'text-decoration-none text-white',\n    },\n    {\n      id: 'about',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'About',\n      customClass: 'text-decoration-none text-white',\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:74\n                        \n                    \n\n            \n                \n                    Array of button configurations for the navbar.\nEach button configuration contains properties like classButtonType, typeButtonType, label, and customClass.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroy$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:58\n                        \n                    \n\n            \n                \n                    Subject used to signal the destruction of the component.\nThis subject is used to unsubscribe from observables and perform cleanup operations.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => this.user()?.name || localStorage.getItem('name') || '')\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:47\n                        \n                    \n\n            \n                \n                    Computed signal that represents the user's name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navbarConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NavbarConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    imgLogo: IMAGES.YANCHWAREGO_MINI_LOGO,\n    buttonsNavbarStart: this.buttonsNavbar,\n    buttonsNavbarEnd: [this.buttonLogOutConfig],\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:105\n                        \n                    \n\n            \n                \n                    Configuration object for the navbar in the dashboard component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : computed(() => this.user()?.token)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:42\n                        \n                    \n\n            \n                \n                    Computed signal that represents the user's token.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.userFacade.userState$.subscribe(\n    (user: UserState) => {\n      this.user.set(user);\n    }\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:64\n                        \n                    \n\n            \n                \n                    Reactive subscription to the user state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal({} as UserState)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:37\n                        \n                    \n\n            \n                \n                    Signal that represents the user state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/dashboard/dashboard.component.ts:52\n                        \n                    \n\n            \n                \n                    Inject the UserFacade Pattern.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnDestroy, computed, inject, signal } from '@angular/core';\nimport { IMAGES } from '@src/app/constants/images';\nimport { NavBarComponent } from '@src/app/shared/components/navbar/navbar.component';\nimport { ButtonConfig } from '@src/app/shared/models/button.model';\nimport { NavbarConfig } from '@src/app/shared/models/navbar.model';\nimport { Subject, Subscription } from 'rxjs';\nimport { UserFacade } from '../../../core/store/user/user.facade';\nimport { UserState } from '../../../core/store/user/user.reducer';\nimport { CitiesComponent } from '../../../core/components/cities/cities.component';\n\n/**\n * Array of components used in the dashboard.\n */\nconst COMPONENTS = [\n  NavBarComponent,\n  CitiesComponent,\n];\n\n/**\n * Represents the DashboardComponent class.\n */\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ...COMPONENTS\n  ],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n})\nexport class DashboardComponent implements OnDestroy {\n  /**\n   * Signal that represents the user state.\n   */\n  user = signal({} as UserState);\n\n  /**\n   * Computed signal that represents the user's token.\n   */\n  token = computed(() => this.user()?.token);\n\n  /**\n   * Computed signal that represents the user's name.\n   */\n  name = computed(() => this.user()?.name || localStorage.getItem('name') || '');\n\n  /**\n   * Inject the UserFacade Pattern.\n   **/\n  userFacade = inject(UserFacade);\n\n  /**\n   * Subject used to signal the destruction of the component.\n   * This subject is used to unsubscribe from observables and perform cleanup operations.\n   */\n  private destroy$ = new Subject();\n\n  \n  /**\n   * Reactive subscription to the user state.\n   */\n  token$: Subscription = this.userFacade.userState$.subscribe(\n    (user: UserState) => {\n      this.user.set(user);\n    }\n  );\n\n  /**\n   * Array of button configurations for the navbar.\n   * Each button configuration contains properties like classButtonType, typeButtonType, label, and customClass.\n   */\n  buttonsNavbar: ButtonConfig[] = [\n    {\n      id: 'homepage',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'Homepage',\n      customClass: 'text-decoration-none text-white',\n    },\n    {\n      id: 'about',\n      classButtonType: 'btn-link',\n      typeButtonType: 'button',\n      label: 'About',\n      customClass: 'text-decoration-none text-white',\n    },\n  ];\n\n  /**\n   * Configuration for the logout button.\n   */\n  buttonLogOutConfig: ButtonConfig = {\n    id: 'logout',\n    classButtonType: 'btn-link',\n    typeButtonType: 'button',\n    label: 'Log out',\n    customClass: 'text-decoration-none text-white',\n  };\n\n  /**\n   * Configuration object for the navbar in the dashboard component.\n   */\n  navbarConfig: NavbarConfig = {\n    imgLogo: IMAGES.YANCHWAREGO_MINI_LOGO,\n    buttonsNavbarStart: this.buttonsNavbar,\n    buttonsNavbarEnd: [this.buttonLogOutConfig],\n  };\n\n  /**\n   * Handles the click event of a button in the dashboard component.\n   * @param button - The button configuration object.\n   */\n  onClickButton(button: ButtonConfig) {\n    switch (button.id) {\n      /**\n       * Logs out the user through UserFacade Pattern.\n       */\n      case 'logout': {\n        this.userFacade.logOut();\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Lifecycle hook that is called when the component is about to be destroyed.\n   * It is used to perform any necessary cleanup logic, such as unsubscribing from observables or\n   * releasing resources.\n   */\n  ngOnDestroy() {\n    this.token$.unsubscribe();\n    this.destroy$.next();  \n  }\n\n}\n\n    \n\n    \n        \n  \n\n  \n    Welcome {{ name() }}\n  \n\n  \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        Welcome {{ name() }}          '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DashboardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardEffects.html":{"url":"injectables/DashboardEffects.html","title":"injectable - DashboardEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/dashboard/dashboard.effects.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable class representing the effects for the dashboard feature.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                action$\n                            \n                            \n                                dashboardService\n                            \n                            \n                                    Public\n                                getCity$\n                            \n                            \n                                    Public\n                                login$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        action$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:16\n                        \n                    \n\n            \n                \n                    Observable stream of actions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DashboardService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:21\n                        \n                    \n\n            \n                \n                    The service responsible for handling dashboard-related functionality.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCity$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(getCity),\n      switchMap(({ cityId }) =>\n        this.dashboardService\n          .getCity(cityId)\n          .pipe(\n            map((city: CityInfoResponse) => {\n              return getCitySuccess({ city });\n            }),\n            catchError((error: any) => {\n              // Handle the error here\n              console.log('Error: ', error);\n              \n              return of();\n            })\n          ),\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:46\n                        \n                    \n\n            \n                \n                    Effect for handling the getCity action.\nRetrieves the city information based on the provided cityId and dispatches the getCitySuccess action.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(cities),\n      switchMap(({ getCitiesPayload }) =>\n        this.dashboardService\n          .getCities(getCitiesPayload || ({} as GetCitiesPayload))\n          .pipe(\n            map((cities: Cities) => {\n              return citiesSuccess({ cities });\n            })\n          )\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.effects.ts:27\n                        \n                    \n\n            \n                \n                    Effect for handling the login action.\nRetrieves the cities based on the provided payload and dispatches the citiesSuccess action.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, of, switchMap } from 'rxjs';\nimport { DashboardService } from '../../../modules/services/dashboard.service';\nimport { Cities, CityInfoResponse, GetCitiesPayload } from '../../models/dashboard.model';\nimport { cities, citiesSuccess, getCity, getCitySuccess } from './dashboard.actions';\n\n/**\n * Injectable class representing the effects for the dashboard feature.\n */\n@Injectable()\nexport class DashboardEffects {\n  /**\n   * Observable stream of actions.\n   */\n  action$ = inject(Actions);\n\n  /**\n   * The service responsible for handling dashboard-related functionality.\n   */\n  dashboardService = inject(DashboardService);\n\n  /**\n   * Effect for handling the login action.\n   * Retrieves the cities based on the provided payload and dispatches the citiesSuccess action.\n   */\n  public login$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(cities),\n      switchMap(({ getCitiesPayload }) =>\n        this.dashboardService\n          .getCities(getCitiesPayload || ({} as GetCitiesPayload))\n          .pipe(\n            map((cities: Cities) => {\n              return citiesSuccess({ cities });\n            })\n          )\n      )\n    )\n  );\n\n  /**\n   * Effect for handling the getCity action.\n   * Retrieves the city information based on the provided cityId and dispatches the getCitySuccess action.\n   */\n  public getCity$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(getCity),\n      switchMap(({ cityId }) =>\n        this.dashboardService\n          .getCity(cityId)\n          .pipe(\n            map((city: CityInfoResponse) => {\n              return getCitySuccess({ city });\n            }),\n            catchError((error: any) => {\n              // Handle the error here\n              console.log('Error: ', error);\n              \n              return of();\n            })\n          ),\n      )\n    )\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardFacade.html":{"url":"injectables/DashboardFacade.html","title":"injectable - DashboardFacade","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardFacade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/dashboard/dashboard.facade.ts\n        \n\n\n            \n                Description\n            \n            \n                Facade Pattern for managing dashboard-related state and actions.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cities$\n                            \n                            \n                                    Public\n                                getCity$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cities\n                            \n                            \n                                    Public\n                                getCity\n                            \n                            \n                                    Public\n                                resetCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/dashboard/dashboard.facade.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cities\n                        \n                    \n                \n            \n            \n                \n                        \n                    cities(getCitiesPayload?: GetCitiesPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/dashboard/dashboard.facade.ts:30\n                        \n                    \n\n\n            \n                \n                        Dispatches an action to fetch cities data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getCitiesPayload\n                                            \n                                                            GetCitiesPayload\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional payload for fetching cities.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCity\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCity(cityId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/dashboard/dashboard.facade.ts:38\n                        \n                    \n\n\n            \n                \n                        Dispatches an action to fetch a specific city data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cityId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to fetch.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetCity\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetCity()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/dashboard/dashboard.facade.ts:45\n                        \n                    \n\n\n            \n                \n                        Dispatches an action to reset the city data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cities$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(cities$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.facade.ts:17\n                        \n                    \n\n            \n                \n                    Observable stream of cities data.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCity$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(getCity$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/dashboard/dashboard.facade.ts:22\n                        \n                    \n\n            \n                \n                    Observable stream of a specific city data.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Cities, GetCitiesPayload } from '../../models/dashboard.model';\nimport { cities, getCity, resetCity } from './dashboard.actions';\nimport { Observable } from 'rxjs';\nimport { cities$, getCity$ } from './dashboard.selectors';\n\n/**\n * Facade Pattern for managing dashboard-related state and actions.\n */\n@Injectable({ providedIn: 'root' })\nexport class DashboardFacade {\n\n  /**\n   * Observable stream of cities data.\n   */\n  public cities$: Observable = this.store.select(cities$);\n\n  /**\n   * Observable stream of a specific city data.\n   */\n  public getCity$: Observable = this.store.select(getCity$);\n\n  constructor(private store: Store) {}\n\n  /**\n   * Dispatches an action to fetch cities data.\n   * @param getCitiesPayload - Optional payload for fetching cities.\n   */\n  public cities(getCitiesPayload?: GetCitiesPayload): void {\n    this.store.dispatch(cities({ getCitiesPayload }));\n  }\n\n  /**\n   * Dispatches an action to fetch a specific city data.\n   * @param cityId - The ID of the city to fetch.\n   */\n  public getCity(cityId: string): void {\n    this.store.dispatch(getCity({ cityId }));\n  }\n\n  /**\n   * Dispatches an action to reset the city data.\n   */\n  public resetCity(): void {\n    this.store.dispatch(resetCity());\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardService.html":{"url":"injectables/DashboardService.html","title":"injectable - DashboardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/services/dashboard.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCities\n                            \n                            \n                                getCity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/services/dashboard.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCities\n                        \n                    \n                \n            \n            \n                \ngetCities(undefined: GetCitiesPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/dashboard.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of cities.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            GetCitiesPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable of type Cities containing the list of cities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity\n                        \n                    \n                \n            \n            \n                \ngetCity(cityId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/dashboard.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieves detailed information about a specific city.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cityId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the city to retrieve information for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable of type CityInfoResponse containing the city information.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Cities, CityInfoResponse, GetCitiesPayload } from '../../core/models/dashboard.model';\nimport { environment } from '@src/environments/environment.prod';\nimport { ENDPOINTS } from '@src/app/constants/endpoints';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DashboardService {\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Retrieves a list of cities.\n   * @param limit - The maximum number of cities to retrieve. Default is 20.\n   * @param offset - The number of cities to skip. Default is 0.\n   * @returns An Observable of type Cities containing the list of cities.\n   */\n  getCities({ limit = 20, offset = 0 }: GetCitiesPayload): Observable {\n    // FIXME: Remove this hardcoded response and uncomment line 31 to test whit real data\n    return of({ cities: [\n      { cityId: '1', name: 'New York', country: 'USA' },\n      { cityId: '2', name: 'Los Angeles', country: 'USA' },\n      { cityId: '3', name: 'San Francisco', country: 'USA' },\n      { cityId: '4', name: 'Chicago', country: 'USA' },\n      { cityId: '5', name: 'Miami', country: 'USA' },\n      { cityId: '6', name: 'Las Vegas', country: 'USA' },\n      { cityId: '7', name: 'Orlando', country: 'USA' },\n      { cityId: '8', name: 'Seattle', country: 'USA' },\n      { cityId: '9', name: 'Boston', country: 'USA' },\n    ], count: 0 } as Cities);\n    // return this.http.get(`${environment.baseUrl}/${ENDPOINTS.CITIES}?limit=${limit}&offset=${offset}`);\n  }\n\n  /**\n   * Retrieves detailed information about a specific city.\n   * @param cityId - The ID of the city to retrieve information for.\n   * @returns An Observable of type CityInfoResponse containing the city information.\n   */\n  getCity(cityId: string): Observable {\n    // FIXME: Remove this hardcoded response and uncomment line 55 to test whit real data\n    return of({\n      cityId: '1',\n      name: 'New York',\n      country: 'USA',\n      costOfLivingIndex: 70,\n      internetSpeed: { download: 73, upload: 53 },\n      coworkingSpaces: [\n        { name: 'Coworking Space 1', address: 'Address 1', rating: 5 },\n        { name: 'Coworking Space 2', address: 'Address 2', rating: 4 },\n        { name: 'Coworking Space 3', address: 'Address 3', rating: 3 },\n      ],\n      safetyIndex: 89,\n      climate: { averageTemperature: 24, rainfall: 82 },\n    } as CityInfoResponse);\n    // return this.http.get(`${environment.baseUrl}/${ENDPOINTS.CITIES}/${cityId}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DashboardState.html":{"url":"interfaces/DashboardState.html","title":"interface - DashboardState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DashboardState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/dashboard/dashboard.reducer.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the state of the dashboard.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cities\n                                        \n                                \n                                \n                                        \n                                            city\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cities:         Cities\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cities\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        city\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        city:         CityInfoResponse\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CityInfoResponse\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createReducer, on } from '@ngrx/store';\nimport { Cities, CityInfoResponse } from '../../models/dashboard.model';\nimport { citiesSuccess, getCitySuccess, resetCity } from './dashboard.actions';\n\n/**\n * The key used to identify the dashboard feature in the store.\n */\nexport const dashboardFeatureKey = 'search';\n\n/**\n * Represents the state of the dashboard.\n */\nexport interface DashboardState {\n  cities: Cities;\n  city: CityInfoResponse;\n}\n\n/**\n * The initial state for the dashboard reducer.\n */\nconst initialState: DashboardState = {\n  cities: {} as Cities,\n  city: {} as CityInfoResponse,\n};\n\n/**\n * Reducer function for the dashboard state.\n */\nexport const dashboardReducer = createReducer(\n  initialState,\n  /**\n   * Updates the state with the list of cities.\n   * @param state - The current state.\n   * @param cities - The list of cities.\n   * @returns The updated state with the list of cities.\n   */\n  on(citiesSuccess, (state, { cities }) => ({ ...state, cities })),\n  /**\n   * Updates the state with a single city.\n   * @param state - The current state.\n   * @param city - The city object.\n   * @returns The updated state with the city object.\n   */\n  on(getCitySuccess, (state, { city }) => ({ ...state, city })),\n  /**\n   * Resets the city object in the state.\n   * @param state - The current state.\n   * @returns The updated state with an empty city object.\n   */\n  on(resetCity, (state) => ({ ...state, city: {} as CityInfoResponse }))\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FooterLogoModel.html":{"url":"interfaces/FooterLogoModel.html","title":"interface - FooterLogoModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FooterLogoModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the model for the footer logo.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            logoSrc\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logoSrc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logoSrc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FooterTextModel.html":{"url":"interfaces/FooterTextModel.html","title":"interface - FooterTextModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FooterTextModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the model for the footer text.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            labelLink\n                                        \n                                \n                                \n                                        \n                                            routerLink\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        labelLink\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        routerLink\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        routerLink:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormComponent.html":{"url":"components/FormComponent.html","title":"component - FormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/form/form.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a form component.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-form\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MODULE\n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./form.component.html\n            \n\n\n\n            \n                styleUrl\n                ./form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alertPopupService\n                            \n                            \n                                cardModel\n                            \n                            \n                                    Protected\n                                form\n                            \n                            \n                                formBuilder\n                            \n                            \n                                formModel\n                            \n                            \n                                onSubmitForm\n                            \n                            \n                                searchFormValueChanges\n                            \n                            \n                                searchValueChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                onSubmit\n                            \n                            \n                                updateFormValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                formModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmitForm\n                            \n                            \n                                searchValueChanges\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        formModel\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/form/form.component.ts:55\n                            \n                        \n                \n                    \n                        Represents the model for the form.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onSubmitForm\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/form/form.component.ts:61\n                            \n                        \n                \n                    \n                        Event emitted when the form is submitted.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        searchValueChanges\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/form/form.component.ts:66\n                            \n                        \n                \n                    \n                        Event emitted when the search value changes.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/form/form.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/form/form.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Handles the form submission.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateFormValue\n                        \n                    \n                \n            \n            \n                \nupdateFormValue(value: FormControl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/components/form/form.component.ts:120\n                        \n                    \n\n\n            \n                \n                        Updates the form value with the given value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        FormControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form control value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alertPopupService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AlertPopupService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cardModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CardConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n    cardBodyCustomClass: 'px-5 form__card',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:47\n                        \n                    \n\n            \n                \n                    Represents the configuration for the card in the form component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                \n                    \n                        Default value : new FormGroup({})\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:55\n                        \n                    \n\n            \n                \n                    Represents the model for the form.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmitForm\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:61\n                        \n                    \n\n            \n                \n                    Event emitted when the form is submitted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchFormValueChanges\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.form.valueChanges.subscribe((value: FormControl) => {\n    this.searchValueChanges.emit(Object.values(value)[0]);\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:76\n                        \n                    \n\n            \n                \n                    Subscribes to the value changes of the search form and emits the search value.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    value\n                                                    \n                                                            \nThe form control value.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchValueChanges\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/form/form.component.ts:66\n                        \n                    \n\n            \n                \n                    Event emitted when the search value changes.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnInit, inject, input, output } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { CardConfig } from '../../models/card.model';\nimport {\n  FormModel,\n  FormOutputModel,\n  InputFormModel,\n} from '../../models/form.model';\nimport { AlertPopupService } from '../../services/alert-popup.service';\nimport { ButtonComponent } from '../button/button.component';\nimport { CardComponent } from '../card/card.component';\n\n/**\n * Array of modules used in the form component.\n */\nconst MODULE = [CommonModule, ReactiveFormsModule, RouterLink];\n\n/**\n * Array of components used in the component.\n */\nconst COMPONENTS = [CardComponent, ButtonComponent];\n\n/**\n * Represents a form component.\n */\n@Component({\n  selector: 'app-form',\n  standalone: true,\n  imports: [...MODULE, ...COMPONENTS],\n  templateUrl: './form.component.html',\n  styleUrl: './form.component.scss',\n})\nexport class FormComponent implements OnInit {\n  // Variables\n  protected form: FormGroup = new FormGroup({});\n\n  /**\n   * Represents the configuration for the card in the form component.\n   */\n  cardModel: CardConfig = {\n    cardBodyCustomClass: 'px-5 form__card',\n  };\n\n  // Input\n  /**\n   * Represents the model for the form.\n   */\n  formModel = input.required();\n\n  // Output\n  /**\n   * Event emitted when the form is submitted.\n   */\n  onSubmitForm = output();\n\n  /**\n   * Event emitted when the search value changes.\n   */\n  searchValueChanges = output();\n\n  // Inject\n  formBuilder = inject(FormBuilder);\n  alertPopupService = inject(AlertPopupService);\n\n  /**\n   * Subscribes to the value changes of the search form and emits the search value.\n   * @param value - The form control value.\n   */\n  searchFormValueChanges = this.form.valueChanges.subscribe((value: FormControl) => {\n    this.searchValueChanges.emit(Object.values(value)[0]);\n  });\n\n  ngOnInit(): void {\n    this.formModel()?.inputElements.forEach((input: InputFormModel) => {\n      this.form.addControl(\n        input.label.toLowerCase().trim(),\n        this.formBuilder.control('', [...input.inputValidator])\n      );\n    });\n  }\n\n  /**\n   * Handles the form submission.\n   */\n  onSubmit() {\n    if (this.form.valid) {\n      if (\n        this.formModel().type === 'register' &&\n        this.form.value.password !== this.form.value['confirm password']\n      ) {\n        /*\n         * Handle password mismatch with a custom alert popup.\n         */\n        this.alertPopupService.show({\n          alertType: 'danger',\n          label: 'Passwords do not match',\n          isVisible: true,\n        });\n        return;\n      }\n      this.onSubmitForm.emit(this.form.value);\n    } else {\n      // Handle form validation errors\n      console.log('Form is invalid');\n    }\n    this.form.reset();\n  }\n\n  /**\n   * Updates the form value with the given value.\n   * @param value - The form control value.\n   */\n  updateFormValue(value: FormControl) {\n    this.form.patchValue(value);\n  }\n}\n\n    \n\n    \n        \n\n  @if(formModel().backgroundSrc) {\n  \n    \n  \n  }\n\n  \n    \n\n      @if(formModel().logoSrc) {\n      \n      }\n\n      @if(formModel().title) {\n      {{ formModel().title?.label }}\n      }\n\n      @for(inputElement of formModel().inputElements; track inputElement) {\n\n      \n        {{ inputElement.label }}\n\n        @if (formModel().type !== 'search') {\n        \n        \n          Invalid {{ inputElement.label }}\n        \n        } @else {\n        \n        }\n      \n      }\n      @for (buttonElement of formModel().buttonElements; track buttonElement) {\n      \n        \n      \n      }\n\n      @if(formModel().footerText) {\n      \n        {{ formModel().footerText?.text }}\n        {{ formModel().footerText?.labelLink }}\n      \n      }\n\n      @if(formModel().footerLogo) {\n      \n        \n          {{ formModel().footerLogo?.label }}\n          \n        \n      \n      }\n\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @if(formModel().backgroundSrc) {          }            @if(formModel().logoSrc) {            }      @if(formModel().title) {      {{ formModel().title?.label }}      }      @for(inputElement of formModel().inputElements; track inputElement) {              {{ inputElement.label }}        @if (formModel().type !== \\'search\\') {                          Invalid {{ inputElement.label }}                } @else {                }            }      @for (buttonElement of formModel().buttonElements; track buttonElement) {                          }      @if(formModel().footerText) {              {{ formModel().footerText?.text }}        {{ formModel().footerText?.labelLink }}            }      @if(formModel().footerLogo) {                        {{ formModel().footerLogo?.label }}                              }      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormModel.html":{"url":"interfaces/FormModel.html","title":"interface - FormModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a form model.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            backgroundSrc\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            buttonElements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cardCustomClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerLogo\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerText\n                                        \n                                \n                                \n                                        \n                                            inputElements\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logoSrc\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundSrc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backgroundSrc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        buttonElements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buttonElements:         ButtonConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonConfig[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cardCustomClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cardCustomClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerLogo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerLogo:         FooterLogoModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FooterLogoModel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerText:         FooterTextModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FooterTextModel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputElements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputElements:     InputFormModel[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     InputFormModel[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logoSrc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logoSrc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         TitleFormModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TitleFormModel\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         TypeFormModel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TypeFormModel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormOutputModel.html":{"url":"interfaces/FormOutputModel.html","title":"interface - FormOutputModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormOutputModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/models/form.model.ts:4\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetCitiesPayload.html":{"url":"interfaces/GetCitiesPayload.html","title":"interface - GetCitiesPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetCitiesPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the payload for getting cities.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InputFormModel.html":{"url":"interfaces/InputFormModel.html","title":"interface - InputFormModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InputFormModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the model for an input form.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customClass\n                                        \n                                \n                                \n                                        \n                                            inputType\n                                        \n                                \n                                \n                                        \n                                            inputValidator\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputType:         InputFormType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         InputFormType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputValidator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputValidator:     ValidatorFn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ValidatorFn[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InternetSpeed.html":{"url":"interfaces/InternetSpeed.html","title":"interface - InternetSpeed","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InternetSpeed\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/dashboard.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the internet speed with download and upload values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            download\n                                        \n                                \n                                \n                                        \n                                            upload\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        download\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        download:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        upload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        upload:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface City {\n  cityId: string;\n  name: string;\n  country: string;\n}\n\n/**\n * Represents a collection of cities.\n */\nexport interface Cities {\n  count: number;\n  cities: City[];\n}\n\n/**\n * Represents the payload for getting cities.\n */\nexport interface GetCitiesPayload {\n  limit: number;\n  offset: number;\n}\n\n/**\n * Represents the response object for city information.\n */\nexport interface CityInfoResponse {\n  cityId: string;\n  name: string;\n  country: string;\n  costOfLivingIndex: number;\n  internetSpeed: InternetSpeed;\n  coworkingSpaces: CoworkingSpace[];\n  safetyIndex: number;\n  climate: Climate;\n}\n\n/**\n * Represents the internet speed with download and upload values.\n */\nexport interface InternetSpeed {\n  download: number;\n  upload: number;\n}\n\n/**\n * Represents a coworking space.\n */\nexport interface CoworkingSpace {\n  name: string;\n  address: string;\n  rating: number;\n}\n\n/**\n * Represents the climate data.\n */\nexport interface Climate {\n  averageTemperature: number;\n  rainfall: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/login/login.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the LoginComponent class.\nThis component is responsible for handling the login functionality.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                FormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n            \n                styleUrl\n                ./login.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                formModel\n                            \n                            \n                                loginRegisterService\n                            \n                            \n                                token\n                            \n                            \n                                userFacade\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmitForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmitForm\n                        \n                    \n                \n            \n            \n                \nonSubmitForm(formOutputModel: FormOutputModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/login/login.component.ts:84\n                        \n                    \n\n\n            \n                \n                        Handles the form submission event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                formOutputModel\n                                            \n                                                            FormOutputModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe output model of the form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormModel\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'login',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Sign in',\n    },\n    inputElements: [\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signin',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign in',\n        customClass: 'w-100',\n      },\n    ],\n    footerText: {\n      text: 'Don’t you have an account?',\n      labelLink: 'Create new one',\n      routerLink: `/${ROUTE.REGISTER}`,\n    },\n    footerLogo: {\n      label: 'Powered by',\n      logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:26\n                        \n                    \n\n            \n                \n                    Represents the form model for the login component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginRegisterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LoginRegisterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : this.userFacade.token$\n    .pipe(filter(Boolean))\n    .subscribe((token) => {\n      console.log('Token:', token);\n    })\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:74\n                        \n                    \n\n            \n                \n                    Represents the subscription to the token$ observable.\nIt logs the token value when it is emitted.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/login/login.component.ts:67\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { UserFacade } from '../../../core/store/user/user.facade';\nimport { Subscription, filter } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport { ROUTE } from '../../../constants/route';\nimport { IMAGES } from '../../../constants/images';\nimport { FormComponent } from '@src/app/shared/components/form/form.component';\nimport { FormModel, FormOutputModel } from '@src/app/shared/models/form.model';\nimport { LoginRegisterService } from '../../services/loginRegisterService.service';\n\n/**\n * Represents the LoginComponent class.\n * This component is responsible for handling the login functionality.\n */\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [FormComponent],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n})\nexport class LoginComponent {\n  /**\n   * Represents the form model for the login component.\n   */\n  formModel: FormModel = {\n    type: 'login',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Sign in',\n    },\n    inputElements: [\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signin',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign in',\n        customClass: 'w-100',\n      },\n    ],\n    footerText: {\n      text: 'Don’t you have an account?',\n      labelLink: 'Create new one',\n      routerLink: `/${ROUTE.REGISTER}`,\n    },\n    footerLogo: {\n      label: 'Powered by',\n      logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  };\n\n  // Inject\n  userFacade = inject(UserFacade);\n  loginRegisterService = inject(LoginRegisterService);\n\n  /**\n   * Represents the subscription to the token$ observable.\n   * It logs the token value when it is emitted.\n   */\n  token: Subscription = this.userFacade.token$\n    .pipe(filter(Boolean))\n    .subscribe((token) => {\n      console.log('Token:', token);\n    });\n\n  /**\n   * Handles the form submission event.\n   * @param formOutputModel - The output model of the form.\n   */\n  onSubmitForm(formOutputModel: FormOutputModel) {\n    this.userFacade.login({\n      email: formOutputModel['email'],\n      password: formOutputModel['password'],\n    });\n  }\n}\n\n    \n\n    \n        \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginGuard.html":{"url":"injectables/LoginGuard.html","title":"injectable - LoginGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/guards/login.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/guards/login.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/guards/login.guard.ts:18\n                        \n                    \n\n\n            \n                \n                        Determines if the user is allowed to access the route.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true if the user is logged in, false otherwise and redirect to login route.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ROUTE } from '../constants/route';\n\n@Injectable({\n  providedIn: 'root',\n})\n/**\n * Guard that checks if the user is logged in before allowing access to a route.\n */\nexport class LoginGuard {\n  constructor(private router: Router) {}\n\n  /**\n   * Determines if the user is allowed to access the route.\n   * @returns true if the user is logged in, false otherwise and redirect to login route.\n   */\n  canActivate(): boolean {\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== 'undefined') {\n      return true;\n    } else {\n      this.router.navigate([ROUTE.LOGIN]);\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginPayload.html":{"url":"interfaces/LoginPayload.html","title":"interface - LoginPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the payload for user login.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginRegisterService.html":{"url":"injectables/LoginRegisterService.html","title":"injectable - LoginRegisterService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginRegisterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/modules/services/loginRegisterService.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling login and registration functionality.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/modules/services/loginRegisterService.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(loginPayload: LoginPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/loginRegisterService.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Performs a login operation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                loginPayload\n                                            \n                                                            LoginPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe login payload containing the email and password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An observable that emits the login response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(registerPayload: RegisterPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/services/loginRegisterService.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Performs a registration operation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registerPayload\n                                            \n                                                            RegisterPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe registration payload containing the email and password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An observable that emits the registration response.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LoginPayload, LoginResponse, RegisterPayload, RegisterResponse } from '../../core/models/user.model';\n// import { environment } from '../../../../environments/environment';\n// import { ENDPOINTS } from '../../../constants/endpoints';\n\n/**\n * Service responsible for handling login and registration functionality.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginRegisterService {\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Performs a login operation.\n   * @param loginPayload - The login payload containing the email and password.\n   * @returns An observable that emits the login response.\n   */\n  login(loginPayload: LoginPayload): Observable {\n    // FIXME: MOCK DATA\n    // return this.http.post(`${environment.baseUrl}/${ENDPOINTS.LOGIN}`, loginPayload);\n    const mockResponse: LoginResponse = {\n      token: 'your-token-string',\n      name: loginPayload.email.replace(/@.*/, '')\n    };\n    return of(mockResponse);\n  }\n\n  /**\n   * Performs a registration operation.\n   * @param registerPayload - The registration payload containing the email and password.\n   * @returns An observable that emits the registration response.\n   */\n  register(registerPayload: RegisterPayload): Observable {\n    // FIXME: MOCK DATA\n    // return this.http.post(`${environment.baseUrl}/${ENDPOINTS.REGISTER}`, registerPayload );\n    const mockResponse: RegisterResponse = {\n      token: 'your-token-string',\n      name: registerPayload.email.replace(/@.*/, '')\n    };\n    return of(mockResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response received after a successful login.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavBarComponent.html":{"url":"components/NavBarComponent.html","title":"component - NavBarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavBarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/navbar/navbar.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the navigation bar component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                COMPONENTS\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navbar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                navbarConfig\n                            \n                            \n                                onClickButton\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                navbarConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onClickButton\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        navbarConfig\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/navbar/navbar.component.ts:27\n                            \n                        \n                \n                    \n                        The configuration for the navigation bar.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onClickButton\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/navbar/navbar.component.ts:32\n                            \n                        \n                \n                    \n                        Event emitted when a button in the navigation bar is clicked.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        navbarConfig\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/navbar/navbar.component.ts:27\n                        \n                    \n\n            \n                \n                    The configuration for the navigation bar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClickButton\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/navbar/navbar.component.ts:32\n                        \n                    \n\n            \n                \n                    Event emitted when a button in the navigation bar is clicked.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input, output } from '@angular/core';\nimport { NavbarConfig } from '../../models/navbar.model';\nimport { ButtonComponent } from '../button/button.component';\nimport { ButtonConfig } from '../../models/button.model';\n\nconst COMPONENTS = [\n  ButtonComponent,\n];\n\n/**\n * Represents the navigation bar component.\n */\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [\n    ...COMPONENTS\n  ],\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss'\n})\nexport class NavBarComponent {\n\n  /**\n   * The configuration for the navigation bar.\n   */\n  navbarConfig = input.required();\n\n  /**\n   * Event emitted when a button in the navigation bar is clicked.\n   */\n  onClickButton = output();\n\n}\n\n    \n\n    \n        \n  \n\n    @if(navbarConfig().imgLogo) {\n    \n      \n    \n    }\n\n    \n      \n      \n        @if (navbarConfig().buttonsNavbarStart) {\n        @for(button of navbarConfig().buttonsNavbarStart; track button) {\n        \n          \n        \n        }\n        }\n      \n\n      @if (navbarConfig().buttonsNavbarEnd) {\n      @for (button of navbarConfig().buttonsNavbarEnd; track button) {\n      \n         -->\n        \n      \n      }\n      }\n\n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      @if(navbarConfig().imgLogo) {                  }                        @if (navbarConfig().buttonsNavbarStart) {        @for(button of navbarConfig().buttonsNavbarStart; track button) {                                  }        }            @if (navbarConfig().buttonsNavbarEnd) {      @for (button of navbarConfig().buttonsNavbarEnd; track button) {               -->                    }      }      '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavBarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NavbarConfig.html":{"url":"interfaces/NavbarConfig.html","title":"interface - NavbarConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NavbarConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/navbar.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the configuration for the navbar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buttonsNavbarEnd\n                                        \n                                \n                                \n                                        \n                                            buttonsNavbarStart\n                                        \n                                \n                                \n                                        \n                                            imgLogo\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buttonsNavbarEnd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buttonsNavbarEnd:         ButtonConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonConfig[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        buttonsNavbarStart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buttonsNavbarStart:         ButtonConfig[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonConfig[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imgLogo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imgLogo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ButtonConfig } from \"./button.model\";\n\n/**\n * Represents the configuration for the navbar.\n */\nexport interface NavbarConfig {\n  imgLogo: string;\n  buttonsNavbarStart: ButtonConfig[];\n  buttonsNavbarEnd: ButtonConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterPayload.html":{"url":"interfaces/RegisterPayload.html","title":"interface - RegisterPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the payload for user registration.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            surname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterResponse.html":{"url":"interfaces/RegisterResponse.html","title":"interface - RegisterResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response object returned when registering a user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegistrationComponent.html":{"url":"components/RegistrationComponent.html","title":"component - RegistrationComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegistrationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/modules/components/registration/registration.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents the Registration Component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-registration\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                FormComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./registration.component.html\n            \n\n\n\n            \n                styleUrl\n                ./registration.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                formModel\n                            \n                            \n                                loginRegisterService\n                            \n                            \n                                userFacade\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmitForm\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmitForm\n                        \n                    \n                \n            \n            \n                \nonSubmitForm(formOutputModel: FormOutputModel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/modules/components/registration/registration.component.ts:91\n                        \n                    \n\n\n            \n                \n                        Handles the form submission event.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                formOutputModel\n                                            \n                                                            FormOutputModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe output model from the form.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        formModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormModel\n\n                    \n                \n                \n                    \n                        Default value : {\n    type: 'register',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Create an account'\n    },\n    inputElements: [\n      {\n        label: 'Name',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Surname',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Confirm Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signup',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign up',\n        customClass: 'w-100',\n      }],\n    footerText: {\n        text: 'Do you have an account?',\n        labelLink: 'Sign in',\n        routerLink: `/${ROUTE.LOGIN}`,\n    },\n    footerLogo: {\n        label: 'Powered by',\n        logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/registration/registration.component.ts:24\n                        \n                    \n\n            \n                \n                    Represents the form model for registration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginRegisterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LoginRegisterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/registration/registration.component.ts:84\n                        \n                    \n\n            \n                \n                    Inject Service for handling login and registration functionality.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFacade\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserFacade)\n                    \n                \n                    \n                        \n                                Defined in src/app/modules/components/registration/registration.component.ts:85\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { FormComponent } from '@src/app/shared/components/form/form.component';\nimport { FormModel, FormOutputModel } from '@src/app/shared/models/form.model';\nimport { IMAGES } from '../../../constants/images';\nimport { ROUTE } from '../../../constants/route';\nimport { LoginRegisterService } from '../../services/loginRegisterService.service';\nimport { UserFacade } from '../../../core/store/user/user.facade';\n\n/**\n * Represents the Registration Component.\n */\n@Component({\n  selector: 'app-registration',\n  standalone: true,\n  imports: [FormComponent],\n  templateUrl: './registration.component.html',\n  styleUrl: './registration.component.scss',\n})\nexport class RegistrationComponent {\n  /**\n   * Represents the form model for registration.\n   */\n  formModel: FormModel = {\n    type: 'register',\n    logoSrc: IMAGES.YANCHWAREGO_LOGO,\n    title: {\n      label: 'Create an account'\n    },\n    inputElements: [\n      {\n        label: 'Name',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Surname',\n        inputType: 'text',\n        inputValidator: [Validators.required],\n        customClass: 'my-2',\n      },\n      {\n        label: 'Email',\n        inputType: 'email',\n        inputValidator: [Validators.required, Validators.email],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-2',\n      },\n      {\n        label: 'Confirm Password',\n        inputType: 'password',\n        inputValidator: [Validators.required, Validators.minLength(6)],\n        customClass: 'mb-3',\n      },\n    ],\n    buttonElements: [\n      {\n        id: 'signup',\n        classButtonType: 'btn-primary',\n        typeButtonType: 'submit',\n        label: 'Sign up',\n        customClass: 'w-100',\n      }],\n    footerText: {\n        text: 'Do you have an account?',\n        labelLink: 'Sign in',\n        routerLink: `/${ROUTE.LOGIN}`,\n    },\n    footerLogo: {\n        label: 'Powered by',\n        logoSrc: IMAGES.YANCHWARE_LOGO,\n    },\n  };\n\n  /**\n   * Inject Service for handling login and registration functionality.\n   */\n  loginRegisterService = inject(LoginRegisterService);\n  userFacade = inject(UserFacade);\n\n  /**\n   * Handles the form submission event.\n   * @param formOutputModel - The output model from the form.\n   */\n  onSubmitForm(formOutputModel: FormOutputModel) {\n    this.userFacade.register({\n      name: formOutputModel['name'],\n      surname: formOutputModel['surname'],\n      email: formOutputModel['email'],\n      password: formOutputModel['password'],\n    });\n  }\n}\n\n    \n\n    \n        \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  '\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegistrationComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StarRatingComponent.html":{"url":"components/StarRatingComponent.html","title":"component - StarRatingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  StarRatingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/components/star-rating/star-rating.component.ts\n\n\n\n    \n        Description\n    \n    \n        Represents a star rating component.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-star-rating\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./star-rating.component.html\n            \n\n\n\n            \n                styleUrl\n                ./star-rating.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rating\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                rating\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        rating\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/components/star-rating/star-rating.component.ts:17\n                            \n                        \n                \n                    \n                        The rating value of the star rating component.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        rating\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/components/star-rating/star-rating.component.ts:17\n                        \n                    \n\n            \n                \n                    The rating value of the star rating component.\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, input } from '@angular/core';\n\n/**\n * Represents a star rating component.\n */\n@Component({\n  selector: 'app-star-rating',\n  standalone: true,\n  imports: [],\n  templateUrl: './star-rating.component.html',\n  styleUrl: './star-rating.component.scss'\n})\nexport class StarRatingComponent {\n  /**\n   * The rating value of the star rating component.\n   */\n  rating = input.required();\n}\n\n    \n\n    \n        \n  @for (star of [1, 2, 3, 4, 5]; track star) {\n  &#9733;\n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @for (star of [1, 2, 3, 4, 5]; track star) {  ★  }'\n    var COMPONENTS = [{'name': 'AlertPopupComponent', 'selector': 'app-alert-popup'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BarChartComponent', 'selector': 'app-bar-chart'},{'name': 'ButtonComponent', 'selector': 'app-button'},{'name': 'CardComponent', 'selector': 'app-card'},{'name': 'CitiesComponent', 'selector': 'app-cities'},{'name': 'CityComponent', 'selector': 'app-city'},{'name': 'DashboardComponent', 'selector': 'app-dashboard'},{'name': 'FormComponent', 'selector': 'app-form'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'NavBarComponent', 'selector': 'app-navbar'},{'name': 'RegistrationComponent', 'selector': 'app-registration'},{'name': 'StarRatingComponent', 'selector': 'app-star-rating'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StarRatingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TitleFormModel.html":{"url":"interfaces/TitleFormModel.html","title":"interface - TitleFormModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TitleFormModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/models/form.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the form model for a title.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customClass\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ValidatorFn } from '@angular/forms';\nimport { ButtonConfig } from './button.model';\n\nexport interface FormOutputModel {\n  [key: string]: string;\n}\n\ntype TypeFormModel = 'login' | 'register' | 'search';\n\n/**\n * Represents a form model.\n */\nexport interface FormModel {\n  type: TypeFormModel;\n  inputElements: InputFormModel[];\n\n  buttonElements?: ButtonConfig[];\n  title?: TitleFormModel;\n  cardCustomClass?: string;\n  backgroundSrc?: string;\n  logoSrc?: string;\n  footerText?: FooterTextModel;\n  footerLogo?: FooterLogoModel;\n}\n\n/**\n * Represents the model for an input form.\n */\nexport interface InputFormModel {\n  label: string;\n  inputType: InputFormType;\n  inputValidator: ValidatorFn[];\n  customClass?: string;\n}\n\n/**\n * Represents the type of input form.\n */\nexport type InputFormType = 'text' | 'email' | 'password';\n\n/**\n * Represents the form model for a title.\n */\nexport interface TitleFormModel {\n  label: string;\n\n  customClass?: string;\n}\n\n/**\n * Represents the model for the footer text.\n */\nexport interface FooterTextModel {\n  text: string;\n  labelLink: string;\n  routerLink: string;\n}\n\n/**\n * Represents the model for the footer logo.\n */\nexport interface FooterLogoModel {\n  label: string;\n  logoSrc: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserData.html":{"url":"interfaces/UserData.html","title":"interface - UserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/user.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the data of a user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            router\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        router\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        router:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserData {\n  token: string;\n  name: string;\n  router: string;\n}\n\n/**\n * Represents the payload for user login.\n */\nexport interface LoginPayload {\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response received after a successful login.\n */\nexport interface LoginResponse {\n  token: string;\n  name: string;\n}\n\n/**\n * Represents the payload for user registration.\n */\nexport interface RegisterPayload {\n  name: string;\n  surname: string;\n  email: string;\n  password: string;\n}\n\n/**\n * Represents the response object returned when registering a user.\n */\nexport interface RegisterResponse {\n  token: string;\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserEffects.html":{"url":"injectables/UserEffects.html","title":"injectable - UserEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/user/user.effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                action$\n                            \n                            \n                                    Public\n                                login$\n                            \n                            \n                                loginRegisterService\n                            \n                            \n                                    Public\n                                logOut$\n                            \n                            \n                                    Public\n                                register$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                removeUserDataRedirect\n                            \n                            \n                                    Private\n                                setUserDataRedirect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/user/user.effects.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe router service\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeUserDataRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUserDataRedirect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.effects.ts:42\n                        \n                    \n\n\n            \n                \n                        Remove user data and redirect to the login page\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setUserDataRedirect\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUserDataRedirect(userData: UserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.effects.ts:33\n                        \n                    \n\n\n            \n                \n                        Set user data into localstorage and redirect to the specified router\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userData\n                                            \n                                                            UserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user data to be set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        action$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(login),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.login(payload).pipe(\n          map(({ token, name }: LoginResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return loginSuccess({response: { token, name }});\n          })\n        )\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:51\n                        \n                    \n\n            \n                \n                    Login effect, set the user data and redirect to the dashboard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginRegisterService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(LoginRegisterService)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logOut$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(logOut),\n      map(() => {\n        this.removeUserDataRedirect();\n        return logOutSuccess();\n      })\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:87\n                        \n                    \n\n            \n                \n                    Log out effect, remove the user data and redirect to the login page\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        register$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() =>\n    this.action$.pipe(\n      ofType(register),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.register(payload).pipe(\n          map(({ token, name }: RegisterResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return registerSuccess({ response: { token, name } });\n          })\n        )\n      )\n    )\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.effects.ts:69\n                        \n                    \n\n            \n                \n                    Register effect, set the user data and redirect to the dashboard\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, switchMap } from 'rxjs';\nimport { ROUTE } from '../../../constants/route';\nimport { LoginResponse, RegisterResponse, UserData } from '../../models/user.model';\nimport { LoginRegisterService } from '../../../modules/services/loginRegisterService.service';\nimport {\n  logOut,\n  logOutSuccess,\n  login,\n  loginSuccess,\n  register,\n  registerSuccess,\n} from './user.actions';\n\n@Injectable()\nexport class UserEffects {\n  // Inject dependencies\n  action$ = inject(Actions);\n  loginRegisterService = inject(LoginRegisterService);\n\n  /**\n   * Constructor\n   * @param router - The router service\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Set user data into localstorage and redirect to the specified router\n   * @param userData - The user data to be set\n   */\n  private setUserDataRedirect(userData: UserData): void {\n    localStorage.setItem('token', userData.token);\n    localStorage.setItem('name', userData.name);\n    this.router.navigate([userData.router]);\n  }\n\n  /**\n   * Remove user data and redirect to the login page\n   */\n  private removeUserDataRedirect(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('name');\n    this.router.navigate([ROUTE.LOGIN]);\n  }\n\n  /**\n   * Login effect, set the user data and redirect to the dashboard\n   */\n  public login$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(login),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.login(payload).pipe(\n          map(({ token, name }: LoginResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return loginSuccess({response: { token, name }});\n          })\n        )\n      )\n    )\n  );\n\n  /**\n   * Register effect, set the user data and redirect to the dashboard\n   */\n  public register$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(register),\n      switchMap(({ payload }) =>\n        this.loginRegisterService.register(payload).pipe(\n          map(({ token, name }: RegisterResponse) => {\n            const router: string = ROUTE.DASHBOARD;\n            this.setUserDataRedirect({ token, name, router});\n            return registerSuccess({ response: { token, name } });\n          })\n        )\n      )\n    )\n  );\n\n  /**\n   * Log out effect, remove the user data and redirect to the login page\n   */\n  public logOut$ = createEffect(() =>\n    this.action$.pipe(\n      ofType(logOut),\n      map(() => {\n        this.removeUserDataRedirect();\n        return logOutSuccess();\n      })\n    )\n  );\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFacade.html":{"url":"injectables/UserFacade.html","title":"injectable - UserFacade","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFacade\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/user/user.facade.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                token$\n                            \n                            \n                                    Public\n                                userState$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                login\n                            \n                            \n                                    Public\n                                logOut\n                            \n                            \n                                    Public\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(store: Store)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/store/user/user.facade.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        store\n                                                  \n                                                        \n                                                                    Store\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(payload: LoginPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.facade.ts:27\n                        \n                    \n\n\n            \n                \n                        Dispatches a login action with the provided payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LoginPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The login payload.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    logOut()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.facade.ts:42\n                        \n                    \n\n\n            \n                \n                        Dispatches a log out action.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(payload: RegisterPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/store/user/user.facade.ts:35\n                        \n                    \n\n\n            \n                \n                        Dispatches a register action with the provided payload.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            RegisterPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The register payload.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        token$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(token$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.facade.ts:19\n                        \n                    \n\n            \n                \n                    Observable representing the user token.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.store.select(userState$)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/store/user/user.facade.ts:14\n                        \n                    \n\n            \n                \n                    Observable representing the user state.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { Store } from \"@ngrx/store\";\nimport { logOut, login, register } from \"./user.actions\";\nimport { Observable } from \"rxjs\";\nimport { token$, userState$ } from \"./user.selectors\";\nimport { UserState } from \"./user.reducer\";\nimport { LoginPayload, RegisterPayload } from \"../../models/user.model\";\n\n@Injectable({ providedIn: 'root' })\nexport class UserFacade {\n  /**\n   * Observable representing the user state.\n   */\n  public userState$: Observable = this.store.select(userState$);\n\n  /**\n   * Observable representing the user token.\n   */\n  public token$: Observable = this.store.select(token$);\n\n  constructor(private store: Store) {}\n\n  /**\n   * Dispatches a login action with the provided payload.\n   * @param payload The login payload.\n   */\n  public login(payload: LoginPayload): void {\n    this.store.dispatch(login({ payload }));\n  }\n\n  /**\n   * Dispatches a register action with the provided payload.\n   * @param payload The register payload.\n   */\n  public register(payload: RegisterPayload): void {\n    this.store.dispatch(register({ payload }));\n  }\n  \n  /**\n   * Dispatches a log out action.\n   */\n  public logOut(): void {\n    this.store.dispatch(logOut());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserState.html":{"url":"interfaces/UserState.html","title":"interface - UserState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/store/user/user.reducer.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the state of the user in the application.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createReducer, on } from \"@ngrx/store\";\nimport { logOutSuccess, loginSuccess, registerSuccess } from \"./user.actions\";\n\n/**\n * The key used to access the user feature state in the Redux store.\n */\nexport const userFeatureKey = 'user';\n\n/**\n * Represents the state of the user in the application.\n */\nexport interface UserState {\n  name: string;\n  token: string;\n}\n\n/**\n * Initial state for the User reducer.\n */\nconst initialState: UserState = {\n  name: '',\n  token: '',\n}\n\n/**\n * Reducer function for managing user state.\n */\nexport const userReducer = createReducer(\n  initialState,\n  \n  /**\n   * Updates the state with the user's information after a successful login.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(loginSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Updates the state with the user's information after a successful registration.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(registerSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Resets the user state to the initial state after a successful logout.\n   * @returns The initial user state.\n   */\n  on(logOutSuccess, () => ( initialState ))\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/endpoints.ts\n            \n            variable\n            ENDPOINTS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/endpoints.ts\n            \n            variable\n            VERSIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/images.ts\n            \n            variable\n            IMAGES\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/constants/route.ts\n            \n            variable\n            ROUTE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/components/cities/cities.component.ts\n            \n            component\n            CitiesComponent\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/core/components/cities/cities.component.ts\n            \n            variable\n            COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/components/cities/cities.component.ts\n            \n            variable\n            MODULES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            Cities\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            City\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            CityInfoResponse\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            Climate\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            CoworkingSpace\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            GetCitiesPayload\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/dashboard.model.ts\n            \n            interface\n            InternetSpeed\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            LoginPayload\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            LoginResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            RegisterPayload\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            RegisterResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/models/user.model.ts\n            \n            interface\n            UserData\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            cities\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            citiesSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            getCity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            getCitySuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.actions.ts\n            \n            variable\n            resetCity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.effects.ts\n            \n            injectable\n            DashboardEffects\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.facade.ts\n            \n            injectable\n            DashboardFacade\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            interface\n            DashboardState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            variable\n            dashboardFeatureKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            variable\n            dashboardReducer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.reducer.ts\n            \n            variable\n            initialState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.selectors.ts\n            \n            variable\n            cities$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.selectors.ts\n            \n            variable\n            getCity$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/dashboard/dashboard.selectors.ts\n            \n            variable\n            getDashboardFeature\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            login\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            loginSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            logOut\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            logOutSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            register\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            registerSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            setUserData\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.actions.ts\n            \n            variable\n            setUserDataSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.effects.ts\n            \n            injectable\n            UserEffects\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.facade.ts\n            \n            injectable\n            UserFacade\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            interface\n            UserState\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            variable\n            initialState\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            variable\n            userFeatureKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.reducer.ts\n            \n            variable\n            userReducer\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.selectors.ts\n            \n            variable\n            getUserFeature\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.selectors.ts\n            \n            variable\n            token$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/store/user/user.selectors.ts\n            \n            variable\n            userState$\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/guards/login.guard.ts\n            \n            injectable\n            LoginGuard\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/modules/components/city/city.component.ts\n            \n            component\n            CityComponent\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/modules/components/city/city.component.ts\n            \n            variable\n            COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/components/city/city.component.ts\n            \n            variable\n            MODULES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/modules/components/dashboard/dashboard.component.ts\n            \n            component\n            DashboardComponent\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/app/modules/components/dashboard/dashboard.component.ts\n            \n            variable\n            COMPONENTS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/modules/components/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/app/modules/components/registration/registration.component.ts\n            \n            component\n            RegistrationComponent\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/modules/services/dashboard.service.ts\n            \n            injectable\n            DashboardService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/modules/services/loginRegisterService.service.ts\n            \n            injectable\n            LoginRegisterService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app/shared/components/alert-popup/alert-popup.component.ts\n            \n            component\n            AlertPopupComponent\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/shared/components/bar-chart/bar-chart.component.ts\n            \n            component\n            BarChartComponent\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/app/shared/components/button/button.component.ts\n            \n            component\n            ButtonComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/shared/components/card/card.component.ts\n            \n            component\n            CardComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/components/form/form.component.ts\n            \n            component\n            FormComponent\n            \n                73 %\n                (11/15)\n            \n        \n        \n            \n                \n                src/app/shared/components/form/form.component.ts\n            \n            variable\n            COMPONENTS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/form/form.component.ts\n            \n            variable\n            MODULE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/navbar/navbar.component.ts\n            \n            component\n            NavBarComponent\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/shared/components/navbar/navbar.component.ts\n            \n            variable\n            COMPONENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/components/star-rating/star-rating.component.ts\n            \n            component\n            StarRatingComponent\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/shared/models/alert-popup.model.ts\n            \n            interface\n            AlertPopupConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/models/alert-popup.model.ts\n            \n            variable\n            TIMER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/models/button.model.ts\n            \n            interface\n            ButtonConfig\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/shared/models/card.model.ts\n            \n            interface\n            CardConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FooterLogoModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FooterTextModel\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FormModel\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            FormOutputModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            InputFormModel\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/shared/models/form.model.ts\n            \n            interface\n            TitleFormModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/shared/models/navbar.model.ts\n            \n            interface\n            NavbarConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/shared/services/alert-popup.service.ts\n            \n            injectable\n            AlertPopupService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^17.3.0\n        \n            @angular/common : ^17.3.0\n        \n            @angular/compiler : ^17.3.0\n        \n            @angular/core : ^17.3.0\n        \n            @angular/forms : ^17.3.0\n        \n            @angular/platform-browser : ^17.3.0\n        \n            @angular/platform-browser-dynamic : ^17.3.0\n        \n            @angular/router : ^17.3.0\n        \n            @ngrx/effects : ^17.2.0\n        \n            @ngrx/store : ^17.2.0\n        \n            @ngrx/store-devtools : ^17.2.0\n        \n            bootstrap : ^5.3.3\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nYanchwareGo\nThis project was generated with Angular CLI version 17.3.5.\nDevelopment server\nRun ng serve or npm run start for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nRun npm run server-start to start the openapi mocker server, it's served on the 1234 port.\nDocumentation\nRun npm run generate-documentation to generate documentation with compodoc tool and start a local server to consult it\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nOpen API Mocker\nTo install the open-api-mocker package globally, run the following command:\nnpm i -g open-api-mocker\nOpen API Start Mock Server\nTo start the mock server run the server-start script:\nnpm run server start\nOr you can choose to launch direct the follow command in the root of this project:\nopen-api-mocker -s server/sr.frontend.challenge.yml -p 1234 -w\n-p 1234 set the local port, feel free to choose whatever you want\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    13 Components\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlertPopupType   (src/.../alert-popup.model.ts)\n                        \n                        \n                            ButtonClassType   (src/.../button.model.ts)\n                        \n                        \n                            ButtonType   (src/.../button.model.ts)\n                        \n                        \n                            CardType   (src/.../card.model.ts)\n                        \n                        \n                            InputFormType   (src/.../form.model.ts)\n                        \n                        \n                            TypeFormModel   (src/.../form.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/shared/models/alert-popup.model.ts\n    \n    \n        \n            \n                \n                    \n                    AlertPopupType\n                \n            \n            \n                \n                    Represents the type of an alert popup.\nPossible values include: 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'.\n\n                \n            \n            \n                \n                        \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\"\n\n                \n            \n        \n    \n    src/app/shared/models/button.model.ts\n    \n    \n        \n            \n                \n                    \n                    ButtonClassType\n                \n            \n            \n                \n                    Represents the possible class types for a button.\n\n                \n            \n            \n                \n                        \"btn\" | \"btn-primary\" | \"btn-secondary\" | \"btn-success\" | \"btn-danger\" | \"btn-warning\" | \"btn-info\" | \"btn-light\" | \"btn-dark\" | \"btn-link\" | \"btn-outline-primary\" | \"btn-outline-secondary\" | \"btn-outline-success\" | \"btn-outline-danger\" | \"btn-outline-warning\" | \"btn-outline-info\" | \"btn-outline-light\" | \"btn-outline-dark\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ButtonType\n                \n            \n            \n                \n                    Represents the type of a button.\n\n                \n            \n            \n                \n                        \"button\" | \"submit\" | \"reset\"\n\n                \n            \n        \n    \n    src/app/shared/models/card.model.ts\n    \n    \n        \n            \n                \n                    \n                    CardType\n                \n            \n            \n                \n                    Represents the type of a card, which can be one of the following:\n\n                \n            \n            \n                \n                        \"text-bg-primary\" | \"text-bg-secondary\" | \"text-bg-success\" | \"text-bg-danger\" | \"text-bg-warning\" | \"text-bg-info\" | \"text-bg-light\" | \"text-bg-dark\" | \"border-primary\" | \"border-secondary\" | \"border-success\" | \"border-danger\" | \"border-warning\" | \"border-info\" | \"border-light\" | \"border-dark\"\n\n                \n            \n        \n    \n    src/app/shared/models/form.model.ts\n    \n    \n        \n            \n                \n                    \n                    InputFormType\n                \n            \n            \n                \n                    Represents the type of input form.\n\n                \n            \n            \n                \n                        \"text\" | \"email\" | \"password\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TypeFormModel\n                \n            \n            \n                \n                        \"login\" | \"register\" | \"search\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            cities   (src/.../dashboard.actions.ts)\n                        \n                        \n                            cities$   (src/.../dashboard.selectors.ts)\n                        \n                        \n                            citiesSuccess   (src/.../dashboard.actions.ts)\n                        \n                        \n                            COMPONENTS   (src/.../navbar.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../form.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../cities.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../city.component.ts)\n                        \n                        \n                            COMPONENTS   (src/.../dashboard.component.ts)\n                        \n                        \n                            dashboardFeatureKey   (src/.../dashboard.reducer.ts)\n                        \n                        \n                            dashboardReducer   (src/.../dashboard.reducer.ts)\n                        \n                        \n                            ENDPOINTS   (src/.../endpoints.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            getCity   (src/.../dashboard.actions.ts)\n                        \n                        \n                            getCity$   (src/.../dashboard.selectors.ts)\n                        \n                        \n                            getCitySuccess   (src/.../dashboard.actions.ts)\n                        \n                        \n                            getDashboardFeature   (src/.../dashboard.selectors.ts)\n                        \n                        \n                            getUserFeature   (src/.../user.selectors.ts)\n                        \n                        \n                            IMAGES   (src/.../images.ts)\n                        \n                        \n                            initialState   (src/.../dashboard.reducer.ts)\n                        \n                        \n                            initialState   (src/.../user.reducer.ts)\n                        \n                        \n                            login   (src/.../user.actions.ts)\n                        \n                        \n                            loginSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            logOut   (src/.../user.actions.ts)\n                        \n                        \n                            logOutSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            MODULE   (src/.../form.component.ts)\n                        \n                        \n                            MODULES   (src/.../cities.component.ts)\n                        \n                        \n                            MODULES   (src/.../city.component.ts)\n                        \n                        \n                            register   (src/.../user.actions.ts)\n                        \n                        \n                            registerSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            resetCity   (src/.../dashboard.actions.ts)\n                        \n                        \n                            ROUTE   (src/.../route.ts)\n                        \n                        \n                            setUserData   (src/.../user.actions.ts)\n                        \n                        \n                            setUserDataSuccess   (src/.../user.actions.ts)\n                        \n                        \n                            TIMER   (src/.../alert-popup.model.ts)\n                        \n                        \n                            token$   (src/.../user.selectors.ts)\n                        \n                        \n                            userFeatureKey   (src/.../user.reducer.ts)\n                        \n                        \n                            userReducer   (src/.../user.reducer.ts)\n                        \n                        \n                            userState$   (src/.../user.selectors.ts)\n                        \n                        \n                            VERSIONS   (src/.../endpoints.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes, withViewTransitions()),\n    provideHttpClient(),\n\n    provideStore(),\n\n    provideStore({ user: userReducer, search: dashboardReducer }),\n    provideStoreDevtools(),\n    provideEffects([UserEffects, DashboardEffects]),\n  ],\n  \n}\n                    \n                \n\n            \n                \n                    Configuration object for the application.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/dashboard/dashboard.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cities\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[Dashboard] Get Cities', props())\n                    \n                \n\n            \n                \n                    Action to get cities for the dashboard.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        citiesSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[Dashboard] Get Cities Success', props())\n                    \n                \n\n            \n                \n                    Action creator for the 'citiesSuccess' action.\nThis action is dispatched when the cities data is successfully retrieved.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[City] Get City Info', props())\n                    \n                \n\n            \n                \n                    Action to get city information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCitySuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[City] Get City Info Success', props())\n                    \n                \n\n            \n                \n                    Action to indicate a successful retrieval of city information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetCity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[City] Reset City')\n                    \n                \n\n            \n                \n                    Action to reset the city.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/dashboard/dashboard.selectors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cities$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getDashboardFeature, ({ cities }) => cities)\n                    \n                \n\n            \n                \n                    Selects the cities from the dashboard feature state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCity$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getDashboardFeature, ({ city }) => city)\n                    \n                \n\n            \n                \n                    Retrieves the city from the dashboard feature state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDashboardFeature\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createFeatureSelector(dashboardFeatureKey)\n                    \n                \n\n            \n                \n                    Retrieves the dashboard feature state from the store.\n\n                \n            \n\n        \n    \n\n    src/app/shared/components/navbar/navbar.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  ButtonComponent,\n]\n                    \n                \n\n\n        \n    \n\n    src/app/shared/components/form/form.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CardComponent, ButtonComponent]\n                    \n                \n\n            \n                \n                    Array of components used in the component.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CommonModule, ReactiveFormsModule, RouterLink]\n                    \n                \n\n            \n                \n                    Array of modules used in the form component.\n\n                \n            \n\n        \n    \n\n    src/app/core/components/cities/cities.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [FormComponent, CardComponent, ButtonComponent]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MODULES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CommonModule, RouterLink]\n                    \n                \n\n\n        \n    \n\n    src/app/modules/components/city/city.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CardComponent, ButtonComponent, BarChartComponent, StarRatingComponent]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MODULES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [CommonModule, RouterLink]\n                    \n                \n\n\n        \n    \n\n    src/app/modules/components/dashboard/dashboard.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        COMPONENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  NavBarComponent,\n  CitiesComponent,\n]\n                    \n                \n\n            \n                \n                    Array of components used in the dashboard.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/dashboard/dashboard.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dashboardFeatureKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'search'\n                    \n                \n\n            \n                \n                    The key used to identify the dashboard feature in the store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dashboardReducer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createReducer(\n  initialState,\n  /**\n   * Updates the state with the list of cities.\n   * @param state - The current state.\n   * @param cities - The list of cities.\n   * @returns The updated state with the list of cities.\n   */\n  on(citiesSuccess, (state, { cities }) => ({ ...state, cities })),\n  /**\n   * Updates the state with a single city.\n   * @param state - The current state.\n   * @param city - The city object.\n   * @returns The updated state with the city object.\n   */\n  on(getCitySuccess, (state, { city }) => ({ ...state, city })),\n  /**\n   * Resets the city object in the state.\n   * @param state - The current state.\n   * @returns The updated state with an empty city object.\n   */\n  on(resetCity, (state) => ({ ...state, city: {} as CityInfoResponse }))\n)\n                    \n                \n\n            \n                \n                    Reducer function for the dashboard state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DashboardState\n\n                    \n                \n                \n                    \n                        Default value : {\n  cities: {} as Cities,\n  city: {} as CityInfoResponse,\n}\n                    \n                \n\n            \n                \n                    The initial state for the dashboard reducer.\n\n                \n            \n\n        \n    \n\n    src/app/constants/endpoints.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENDPOINTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  CITIES: `${VERSIONS.V1}/cities`,\n}\n                    \n                \n\n            \n                \n                    Defines the endpoints used in the application.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        VERSIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  V1: 'v1',\n}\n                    \n                \n\n            \n                \n                    Defines the version used in the endpoint path.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    /**\n     * Indicates whether the application is in production mode.\n     */\n    production: true,\n\n    /**\n     * The base URL for API requests in the production environment.\n     */\n    baseUrl: 'http://localhost:1234',\n}\n                    \n                \n\n            \n                \n                    Represents the production environment configuration.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    /**\n     * Specifies whether the application is in production mode or not.\n     */\n    production: false,\n\n    /**\n     * Specifies the base URL for API requests.\n     */\n    baseUrl: 'http://localhost:1234',\n}\n                    \n                \n\n            \n                \n                    Represents the environment configuration for the application.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/user/user.selectors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getUserFeature\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createFeatureSelector(userFeatureKey)\n                    \n                \n\n            \n                \n                    Retrieves the user feature state from the store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getUserFeature, ({ token }) => token)\n                    \n                \n\n            \n                \n                    Selects the token from the user feature state.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userState$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createSelector(getUserFeature, state => state)\n                    \n                \n\n            \n                \n                    Selects the user state from the user feature state.\n\n                \n            \n\n        \n    \n\n    src/app/constants/images.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IMAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * Path to the YanchWareGo mini logo image.\n   */\n  YANCHWAREGO_MINI_LOGO: './assets/images/YanchWareGo_mini_logo.svg',\n\n  /**\n   * Path to the YanchWareGo logo image.\n   */\n  YANCHWAREGO_LOGO: './assets/images/YanchWareGo_logo.svg',\n\n  /**\n   * Path to the YanchWare logo image.\n   */\n  YANCHWARE_LOGO: './assets/images/YanchWare_logo.svg',\n}\n                    \n                \n\n            \n                \n                    Contains the paths to various image assets used in the application.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/user/user.reducer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initialState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserState\n\n                    \n                \n                \n                    \n                        Default value : {\n  name: '',\n  token: '',\n}\n                    \n                \n\n            \n                \n                    Initial state for the User reducer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userFeatureKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    The key used to access the user feature state in the Redux store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userReducer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createReducer(\n  initialState,\n  \n  /**\n   * Updates the state with the user's information after a successful login.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(loginSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Updates the state with the user's information after a successful registration.\n   * @param state - The current user state.\n   * @param response - The response object containing the user's token and name.\n   * @returns The updated user state.\n   */\n  on(registerSuccess, (state, { response } ) => ({ ...state, token: response.token, name: response.name })),\n\n  /**\n   * Resets the user state to the initial state after a successful logout.\n   * @returns The initial user state.\n   */\n  on(logOutSuccess, () => ( initialState ))\n)\n                    \n                \n\n            \n                \n                    Reducer function for managing user state.\n\n                \n            \n\n        \n    \n\n    src/app/core/store/user/user.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Login', props())\n                    \n                \n\n            \n                \n                    Action to initiate the login process for a user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Login Success', props())\n                    \n                \n\n            \n                \n                    Action creator for login success.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logOut\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Logout')\n                    \n                \n\n            \n                \n                    Action creator for logging out the user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logOutSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Logout Success')\n                    \n                \n\n            \n                \n                    Action creator for the 'logOutSuccess' action.\nThis action is dispatched when a user successfully logs out.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Register', props())\n                    \n                \n\n            \n                \n                    Registers a user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Registered Success', props())\n                    \n                \n\n            \n                \n                    Action creator for registering success.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserData\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Set User Data')\n                    \n                \n\n            \n                \n                    Action creator for setting user data.\nThis action is dispatched when user data needs to be set in the store.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserDataSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createAction('[User] Set User Data Successfully')\n                    \n                \n\n            \n                \n                    Action creator for setting user data successfully.\nThis action is dispatched when user data is successfully set.\n\n                \n            \n\n        \n    \n\n    src/app/constants/route.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROUTE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * The login route.\n   */\n  LOGIN: 'login',\n  \n  /**\n   * The register route.\n   */\n  REGISTER: 'register',\n  \n  /**\n   * The dashboard route.\n   */\n  DASHBOARD: 'dashboard',\n  \n  /**\n   * The city route.\n   */\n  CITY: 'city',\n}\n                    \n                \n\n            \n                \n                    Defines the routes used in the application.\n\n                \n            \n\n        \n    \n\n    src/app/shared/models/alert-popup.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TIMER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7000\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
