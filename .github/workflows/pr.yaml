name: PR

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.10.2

      - name: Restore dependencies cache
        uses: actions/cache@v4
        id: cache-restore
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: fractal-sdk-dependencies

      - name: Build with Gradle
        run: ./gradlew clean test

      - name: Save dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: fractal-sdk-dependencies
          
      - name: Publish Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: '**/build/test-results/test/TEST-*.xml'

      - name: Download Test Report
        uses: actions/download-artifact@v4
        if: always()
        with:
          name: test-results

      - name: Summarize Test Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            const { readFileSync } = require('fs');
            const { parseStringPromise } = require('xml2js');

            // Get all files in the current directory
            const files = fs.readdirSync('.');
            
            // Initialize variables to store test results
            let totalTests = 0;
            let failedTests = 0;
            let totalDuration = 0;
            
            // Iterate over the files and parse the XML test reports
            for (const file of files) {
              if (file.startsWith('TEST-') && file.endsWith('.xml')) {
                const xml = readFileSync(file, 'utf-8');
                const result = await parseStringPromise(xml);
                totalTests += parseInt(result.testsuite.$.tests, 10);
                failedTests += parseInt(result.testsuite.$.failures, 10);
                totalDuration += parseFloat(result.testsuite.$.time);
              }
            }
            
            // Determine if all tests passed
            const success = failedTests === 0;
            
            // Create a summary of the test results
            const summary = `Total tests: ${totalTests}\nFailed tests: ${failedTests}\nTotal duration: ${totalDuration.toFixed(2)}s`;
            
            // Create a pull request review with the test results summary
            await github.rest.pulls.createReview({
              ...context.repo,
              pull_number: context.payload.pull_request.number,
              body: `**Test Results Summary:**\n\n${summary}\n\n${success ? '✅ All tests passed!' : '❌ Some tests failed.'}`,
              event: 'COMMENT',
            });